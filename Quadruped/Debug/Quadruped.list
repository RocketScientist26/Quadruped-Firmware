
Quadruped.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a7c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08005b88  08005b88  00015b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bb0  08005bb0  00020ca0  2**0
                  CONTENTS
  4 .ARM          00000000  08005bb0  08005bb0  00020ca0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005bb0  08005bb0  00020ca0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bb0  08005bb0  00015bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bb4  08005bb4  00015bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000ca0  20000000  08005bb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  20000ca0  08006858  00020ca0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001094  08006858  00021094  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020ca0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9ac  00000000  00000000  00020cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d38  00000000  00000000  00030675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  000333b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e60  00000000  00000000  00034348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001904f  00000000  00000000  000351a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e74  00000000  00000000  0004e1f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bd63  00000000  00000000  0006006b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ebdce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003eec  00000000  00000000  000ebe20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000ca0 	.word	0x20000ca0
 8000128:	00000000 	.word	0x00000000
 800012c:	08005b70 	.word	0x08005b70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000ca4 	.word	0x20000ca4
 8000148:	08005b70 	.word	0x08005b70

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <HAL_Init+0x28>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a07      	ldr	r2, [pc, #28]	; (8000670 <HAL_Init+0x28>)
 8000652:	f043 0310 	orr.w	r3, r3, #16
 8000656:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000658:	2003      	movs	r0, #3
 800065a:	f000 f947 	bl	80008ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800065e:	2000      	movs	r0, #0
 8000660:	f000 f808 	bl	8000674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000664:	f005 f822 	bl	80056ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000668:	2300      	movs	r3, #0
}
 800066a:	4618      	mov	r0, r3
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40022000 	.word	0x40022000

08000674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <HAL_InitTick+0x54>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <HAL_InitTick+0x58>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	4619      	mov	r1, r3
 8000686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800068a:	fbb3 f3f1 	udiv	r3, r3, r1
 800068e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000692:	4618      	mov	r0, r3
 8000694:	f000 f95f 	bl	8000956 <HAL_SYSTICK_Config>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
 80006a0:	e00e      	b.n	80006c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b0f      	cmp	r3, #15
 80006a6:	d80a      	bhi.n	80006be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006a8:	2200      	movs	r2, #0
 80006aa:	6879      	ldr	r1, [r7, #4]
 80006ac:	f04f 30ff 	mov.w	r0, #4294967295
 80006b0:	f000 f927 	bl	8000902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006b4:	4a06      	ldr	r2, [pc, #24]	; (80006d0 <HAL_InitTick+0x5c>)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ba:	2300      	movs	r3, #0
 80006bc:	e000      	b.n	80006c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006be:	2301      	movs	r3, #1
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000c9c 	.word	0x20000c9c
 80006cc:	20000004 	.word	0x20000004
 80006d0:	20000000 	.word	0x20000000

080006d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <HAL_IncTick+0x1c>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	461a      	mov	r2, r3
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <HAL_IncTick+0x20>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4413      	add	r3, r2
 80006e4:	4a03      	ldr	r2, [pc, #12]	; (80006f4 <HAL_IncTick+0x20>)
 80006e6:	6013      	str	r3, [r2, #0]
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	20000004 	.word	0x20000004
 80006f4:	20000cbc 	.word	0x20000cbc

080006f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  return uwTick;
 80006fc:	4b02      	ldr	r3, [pc, #8]	; (8000708 <HAL_GetTick+0x10>)
 80006fe:	681b      	ldr	r3, [r3, #0]
}
 8000700:	4618      	mov	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr
 8000708:	20000cbc 	.word	0x20000cbc

0800070c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000714:	f7ff fff0 	bl	80006f8 <HAL_GetTick>
 8000718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000724:	d005      	beq.n	8000732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <HAL_Delay+0x44>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	461a      	mov	r2, r3
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	4413      	add	r3, r2
 8000730:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000732:	bf00      	nop
 8000734:	f7ff ffe0 	bl	80006f8 <HAL_GetTick>
 8000738:	4602      	mov	r2, r0
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	1ad3      	subs	r3, r2, r3
 800073e:	68fa      	ldr	r2, [r7, #12]
 8000740:	429a      	cmp	r2, r3
 8000742:	d8f7      	bhi.n	8000734 <HAL_Delay+0x28>
  {
  }
}
 8000744:	bf00      	nop
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000004 	.word	0x20000004

08000754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000770:	4013      	ands	r3, r2
 8000772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800077c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000786:	4a04      	ldr	r2, [pc, #16]	; (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	60d3      	str	r3, [r2, #12]
}
 800078c:	bf00      	nop
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <__NVIC_GetPriorityGrouping+0x18>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	f003 0307 	and.w	r3, r3, #7
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	db0b      	blt.n	80007e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	f003 021f 	and.w	r2, r3, #31
 80007d0:	4906      	ldr	r1, [pc, #24]	; (80007ec <__NVIC_EnableIRQ+0x34>)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	095b      	lsrs	r3, r3, #5
 80007d8:	2001      	movs	r0, #1
 80007da:	fa00 f202 	lsl.w	r2, r0, r2
 80007de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr
 80007ec:	e000e100 	.word	0xe000e100

080007f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000800:	2b00      	cmp	r3, #0
 8000802:	db0a      	blt.n	800081a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	b2da      	uxtb	r2, r3
 8000808:	490c      	ldr	r1, [pc, #48]	; (800083c <__NVIC_SetPriority+0x4c>)
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	0112      	lsls	r2, r2, #4
 8000810:	b2d2      	uxtb	r2, r2
 8000812:	440b      	add	r3, r1
 8000814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000818:	e00a      	b.n	8000830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4908      	ldr	r1, [pc, #32]	; (8000840 <__NVIC_SetPriority+0x50>)
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	f003 030f 	and.w	r3, r3, #15
 8000826:	3b04      	subs	r3, #4
 8000828:	0112      	lsls	r2, r2, #4
 800082a:	b2d2      	uxtb	r2, r2
 800082c:	440b      	add	r3, r1
 800082e:	761a      	strb	r2, [r3, #24]
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	e000e100 	.word	0xe000e100
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000844:	b480      	push	{r7}
 8000846:	b089      	sub	sp, #36	; 0x24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	f1c3 0307 	rsb	r3, r3, #7
 800085e:	2b04      	cmp	r3, #4
 8000860:	bf28      	it	cs
 8000862:	2304      	movcs	r3, #4
 8000864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	3304      	adds	r3, #4
 800086a:	2b06      	cmp	r3, #6
 800086c:	d902      	bls.n	8000874 <NVIC_EncodePriority+0x30>
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	3b03      	subs	r3, #3
 8000872:	e000      	b.n	8000876 <NVIC_EncodePriority+0x32>
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000878:	f04f 32ff 	mov.w	r2, #4294967295
 800087c:	69bb      	ldr	r3, [r7, #24]
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	43da      	mvns	r2, r3
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	401a      	ands	r2, r3
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800088c:	f04f 31ff 	mov.w	r1, #4294967295
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	fa01 f303 	lsl.w	r3, r1, r3
 8000896:	43d9      	mvns	r1, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800089c:	4313      	orrs	r3, r2
         );
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3724      	adds	r7, #36	; 0x24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr

080008a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008b8:	d301      	bcc.n	80008be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ba:	2301      	movs	r3, #1
 80008bc:	e00f      	b.n	80008de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <SysTick_Config+0x40>)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008c6:	210f      	movs	r1, #15
 80008c8:	f04f 30ff 	mov.w	r0, #4294967295
 80008cc:	f7ff ff90 	bl	80007f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <SysTick_Config+0x40>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008d6:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <SysTick_Config+0x40>)
 80008d8:	2207      	movs	r2, #7
 80008da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	e000e010 	.word	0xe000e010

080008ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff ff2d 	bl	8000754 <__NVIC_SetPriorityGrouping>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000902:	b580      	push	{r7, lr}
 8000904:	b086      	sub	sp, #24
 8000906:	af00      	add	r7, sp, #0
 8000908:	4603      	mov	r3, r0
 800090a:	60b9      	str	r1, [r7, #8]
 800090c:	607a      	str	r2, [r7, #4]
 800090e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000914:	f7ff ff42 	bl	800079c <__NVIC_GetPriorityGrouping>
 8000918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	68b9      	ldr	r1, [r7, #8]
 800091e:	6978      	ldr	r0, [r7, #20]
 8000920:	f7ff ff90 	bl	8000844 <NVIC_EncodePriority>
 8000924:	4602      	mov	r2, r0
 8000926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ff5f 	bl	80007f0 <__NVIC_SetPriority>
}
 8000932:	bf00      	nop
 8000934:	3718      	adds	r7, #24
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b082      	sub	sp, #8
 800093e:	af00      	add	r7, sp, #0
 8000940:	4603      	mov	r3, r0
 8000942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff35 	bl	80007b8 <__NVIC_EnableIRQ>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f7ff ffa2 	bl	80008a8 <SysTick_Config>
 8000964:	4603      	mov	r3, r0
}
 8000966:	4618      	mov	r0, r3
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b082      	sub	sp, #8
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d101      	bne.n	8000980 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800097c:	2301      	movs	r3, #1
 800097e:	e00e      	b.n	800099e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	795b      	ldrb	r3, [r3, #5]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b00      	cmp	r3, #0
 8000988:	d105      	bne.n	8000996 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2200      	movs	r2, #0
 800098e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f004 febd 	bl	8005710 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2201      	movs	r2, #1
 800099a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b085      	sub	sp, #20
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009ae:	2300      	movs	r3, #0
 80009b0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d008      	beq.n	80009ce <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2204      	movs	r2, #4
 80009c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2200      	movs	r2, #0
 80009c6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e020      	b.n	8000a10 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f022 020e 	bic.w	r2, r2, #14
 80009dc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f022 0201 	bic.w	r2, r2, #1
 80009ec:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009f6:	2101      	movs	r1, #1
 80009f8:	fa01 f202 	lsl.w	r2, r1, r2
 80009fc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2201      	movs	r2, #1
 8000a02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bc80      	pop	{r7}
 8000a18:	4770      	bx	lr
	...

08000a1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a24:	2300      	movs	r3, #0
 8000a26:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d005      	beq.n	8000a3e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2204      	movs	r2, #4
 8000a36:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	73fb      	strb	r3, [r7, #15]
 8000a3c:	e051      	b.n	8000ae2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f022 020e 	bic.w	r2, r2, #14
 8000a4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f022 0201 	bic.w	r2, r2, #1
 8000a5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a22      	ldr	r2, [pc, #136]	; (8000aec <HAL_DMA_Abort_IT+0xd0>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d029      	beq.n	8000abc <HAL_DMA_Abort_IT+0xa0>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a20      	ldr	r2, [pc, #128]	; (8000af0 <HAL_DMA_Abort_IT+0xd4>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d022      	beq.n	8000ab8 <HAL_DMA_Abort_IT+0x9c>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a1f      	ldr	r2, [pc, #124]	; (8000af4 <HAL_DMA_Abort_IT+0xd8>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d01a      	beq.n	8000ab2 <HAL_DMA_Abort_IT+0x96>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a1d      	ldr	r2, [pc, #116]	; (8000af8 <HAL_DMA_Abort_IT+0xdc>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d012      	beq.n	8000aac <HAL_DMA_Abort_IT+0x90>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a1c      	ldr	r2, [pc, #112]	; (8000afc <HAL_DMA_Abort_IT+0xe0>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d00a      	beq.n	8000aa6 <HAL_DMA_Abort_IT+0x8a>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a1a      	ldr	r2, [pc, #104]	; (8000b00 <HAL_DMA_Abort_IT+0xe4>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d102      	bne.n	8000aa0 <HAL_DMA_Abort_IT+0x84>
 8000a9a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a9e:	e00e      	b.n	8000abe <HAL_DMA_Abort_IT+0xa2>
 8000aa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aa4:	e00b      	b.n	8000abe <HAL_DMA_Abort_IT+0xa2>
 8000aa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aaa:	e008      	b.n	8000abe <HAL_DMA_Abort_IT+0xa2>
 8000aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab0:	e005      	b.n	8000abe <HAL_DMA_Abort_IT+0xa2>
 8000ab2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ab6:	e002      	b.n	8000abe <HAL_DMA_Abort_IT+0xa2>
 8000ab8:	2310      	movs	r3, #16
 8000aba:	e000      	b.n	8000abe <HAL_DMA_Abort_IT+0xa2>
 8000abc:	2301      	movs	r3, #1
 8000abe:	4a11      	ldr	r2, [pc, #68]	; (8000b04 <HAL_DMA_Abort_IT+0xe8>)
 8000ac0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2200      	movs	r2, #0
 8000ace:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d003      	beq.n	8000ae2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	4798      	blx	r3
    } 
  }
  return status;
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40020008 	.word	0x40020008
 8000af0:	4002001c 	.word	0x4002001c
 8000af4:	40020030 	.word	0x40020030
 8000af8:	40020044 	.word	0x40020044
 8000afc:	40020058 	.word	0x40020058
 8000b00:	4002006c 	.word	0x4002006c
 8000b04:	40020000 	.word	0x40020000

08000b08 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b0a:	b087      	sub	sp, #28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000b22:	4b2f      	ldr	r3, [pc, #188]	; (8000be0 <HAL_FLASH_Program+0xd8>)
 8000b24:	7e1b      	ldrb	r3, [r3, #24]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d101      	bne.n	8000b2e <HAL_FLASH_Program+0x26>
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	e054      	b.n	8000bd8 <HAL_FLASH_Program+0xd0>
 8000b2e:	4b2c      	ldr	r3, [pc, #176]	; (8000be0 <HAL_FLASH_Program+0xd8>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000b34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b38:	f000 f8a8 	bl	8000c8c <FLASH_WaitForLastOperation>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000b40:	7dfb      	ldrb	r3, [r7, #23]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d144      	bne.n	8000bd0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d102      	bne.n	8000b52 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	757b      	strb	r3, [r7, #21]
 8000b50:	e007      	b.n	8000b62 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d102      	bne.n	8000b5e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	757b      	strb	r3, [r7, #21]
 8000b5c:	e001      	b.n	8000b62 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000b5e:	2304      	movs	r3, #4
 8000b60:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000b62:	2300      	movs	r3, #0
 8000b64:	75bb      	strb	r3, [r7, #22]
 8000b66:	e02d      	b.n	8000bc4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000b68:	7dbb      	ldrb	r3, [r7, #22]
 8000b6a:	005a      	lsls	r2, r3, #1
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	eb02 0c03 	add.w	ip, r2, r3
 8000b72:	7dbb      	ldrb	r3, [r7, #22]
 8000b74:	0119      	lsls	r1, r3, #4
 8000b76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b7a:	f1c1 0620 	rsb	r6, r1, #32
 8000b7e:	f1a1 0020 	sub.w	r0, r1, #32
 8000b82:	fa22 f401 	lsr.w	r4, r2, r1
 8000b86:	fa03 f606 	lsl.w	r6, r3, r6
 8000b8a:	4334      	orrs	r4, r6
 8000b8c:	fa23 f000 	lsr.w	r0, r3, r0
 8000b90:	4304      	orrs	r4, r0
 8000b92:	fa23 f501 	lsr.w	r5, r3, r1
 8000b96:	b2a3      	uxth	r3, r4
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4660      	mov	r0, ip
 8000b9c:	f000 f85a 	bl	8000c54 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000ba0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ba4:	f000 f872 	bl	8000c8c <FLASH_WaitForLastOperation>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000bac:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <HAL_FLASH_Program+0xdc>)
 8000bae:	691b      	ldr	r3, [r3, #16]
 8000bb0:	4a0c      	ldr	r2, [pc, #48]	; (8000be4 <HAL_FLASH_Program+0xdc>)
 8000bb2:	f023 0301 	bic.w	r3, r3, #1
 8000bb6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000bb8:	7dfb      	ldrb	r3, [r7, #23]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d107      	bne.n	8000bce <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000bbe:	7dbb      	ldrb	r3, [r7, #22]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	75bb      	strb	r3, [r7, #22]
 8000bc4:	7dba      	ldrb	r2, [r7, #22]
 8000bc6:	7d7b      	ldrb	r3, [r7, #21]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d3cd      	bcc.n	8000b68 <HAL_FLASH_Program+0x60>
 8000bcc:	e000      	b.n	8000bd0 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000bce:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <HAL_FLASH_Program+0xd8>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	761a      	strb	r2, [r3, #24]

  return status;
 8000bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	371c      	adds	r7, #28
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be0:	20000cc0 	.word	0x20000cc0
 8000be4:	40022000 	.word	0x40022000

08000be8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <HAL_FLASH_Unlock+0x40>)
 8000bf4:	691b      	ldr	r3, [r3, #16]
 8000bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d00d      	beq.n	8000c1a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <HAL_FLASH_Unlock+0x40>)
 8000c00:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <HAL_FLASH_Unlock+0x44>)
 8000c02:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <HAL_FLASH_Unlock+0x40>)
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <HAL_FLASH_Unlock+0x48>)
 8000c08:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000c0a:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <HAL_FLASH_Unlock+0x40>)
 8000c0c:	691b      	ldr	r3, [r3, #16]
 8000c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40022000 	.word	0x40022000
 8000c2c:	45670123 	.word	0x45670123
 8000c30:	cdef89ab 	.word	0xcdef89ab

08000c34 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <HAL_FLASH_Lock+0x1c>)
 8000c3a:	691b      	ldr	r3, [r3, #16]
 8000c3c:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <HAL_FLASH_Lock+0x1c>)
 8000c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c42:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40022000 	.word	0x40022000

08000c54 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <FLASH_Program_HalfWord+0x30>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <FLASH_Program_HalfWord+0x34>)
 8000c68:	691b      	ldr	r3, [r3, #16]
 8000c6a:	4a07      	ldr	r2, [pc, #28]	; (8000c88 <FLASH_Program_HalfWord+0x34>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	887a      	ldrh	r2, [r7, #2]
 8000c76:	801a      	strh	r2, [r3, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000cc0 	.word	0x20000cc0
 8000c88:	40022000 	.word	0x40022000

08000c8c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000c94:	f7ff fd30 	bl	80006f8 <HAL_GetTick>
 8000c98:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000c9a:	e010      	b.n	8000cbe <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca2:	d00c      	beq.n	8000cbe <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d007      	beq.n	8000cba <FLASH_WaitForLastOperation+0x2e>
 8000caa:	f7ff fd25 	bl	80006f8 <HAL_GetTick>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d201      	bcs.n	8000cbe <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	e025      	b.n	8000d0a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <FLASH_WaitForLastOperation+0x88>)
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d1e8      	bne.n	8000c9c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000cca:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <FLASH_WaitForLastOperation+0x88>)
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	f003 0320 	and.w	r3, r3, #32
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d002      	beq.n	8000cdc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <FLASH_WaitForLastOperation+0x88>)
 8000cd8:	2220      	movs	r2, #32
 8000cda:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000cdc:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <FLASH_WaitForLastOperation+0x88>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	f003 0310 	and.w	r3, r3, #16
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d10b      	bne.n	8000d00 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <FLASH_WaitForLastOperation+0x88>)
 8000cea:	69db      	ldr	r3, [r3, #28]
 8000cec:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d105      	bne.n	8000d00 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000cf4:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <FLASH_WaitForLastOperation+0x88>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d003      	beq.n	8000d08 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000d00:	f000 f80a 	bl	8000d18 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000d04:	2301      	movs	r3, #1
 8000d06:	e000      	b.n	8000d0a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40022000 	.word	0x40022000

08000d18 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000d22:	4b23      	ldr	r3, [pc, #140]	; (8000db0 <FLASH_SetErrorCode+0x98>)
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	f003 0310 	and.w	r3, r3, #16
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d009      	beq.n	8000d42 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000d2e:	4b21      	ldr	r3, [pc, #132]	; (8000db4 <FLASH_SetErrorCode+0x9c>)
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	f043 0302 	orr.w	r3, r3, #2
 8000d36:	4a1f      	ldr	r2, [pc, #124]	; (8000db4 <FLASH_SetErrorCode+0x9c>)
 8000d38:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f043 0310 	orr.w	r3, r3, #16
 8000d40:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000d42:	4b1b      	ldr	r3, [pc, #108]	; (8000db0 <FLASH_SetErrorCode+0x98>)
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	f003 0304 	and.w	r3, r3, #4
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d009      	beq.n	8000d62 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000d4e:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <FLASH_SetErrorCode+0x9c>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	4a17      	ldr	r2, [pc, #92]	; (8000db4 <FLASH_SetErrorCode+0x9c>)
 8000d58:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f043 0304 	orr.w	r3, r3, #4
 8000d60:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000d62:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <FLASH_SetErrorCode+0x98>)
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d00b      	beq.n	8000d86 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <FLASH_SetErrorCode+0x9c>)
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	f043 0304 	orr.w	r3, r3, #4
 8000d76:	4a0f      	ldr	r2, [pc, #60]	; (8000db4 <FLASH_SetErrorCode+0x9c>)
 8000d78:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <FLASH_SetErrorCode+0x98>)
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	4a0c      	ldr	r2, [pc, #48]	; (8000db0 <FLASH_SetErrorCode+0x98>)
 8000d80:	f023 0301 	bic.w	r3, r3, #1
 8000d84:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f240 1201 	movw	r2, #257	; 0x101
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d106      	bne.n	8000d9e <FLASH_SetErrorCode+0x86>
 8000d90:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <FLASH_SetErrorCode+0x98>)
 8000d92:	69db      	ldr	r3, [r3, #28]
 8000d94:	4a06      	ldr	r2, [pc, #24]	; (8000db0 <FLASH_SetErrorCode+0x98>)
 8000d96:	f023 0301 	bic.w	r3, r3, #1
 8000d9a:	61d3      	str	r3, [r2, #28]
}  
 8000d9c:	e002      	b.n	8000da4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000d9e:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <FLASH_SetErrorCode+0x98>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	60d3      	str	r3, [r2, #12]
}  
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	40022000 	.word	0x40022000
 8000db4:	20000cc0 	.word	0x20000cc0

08000db8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000dca:	4b2f      	ldr	r3, [pc, #188]	; (8000e88 <HAL_FLASHEx_Erase+0xd0>)
 8000dcc:	7e1b      	ldrb	r3, [r3, #24]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d101      	bne.n	8000dd6 <HAL_FLASHEx_Erase+0x1e>
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	e053      	b.n	8000e7e <HAL_FLASHEx_Erase+0xc6>
 8000dd6:	4b2c      	ldr	r3, [pc, #176]	; (8000e88 <HAL_FLASHEx_Erase+0xd0>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d116      	bne.n	8000e12 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000de4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000de8:	f7ff ff50 	bl	8000c8c <FLASH_WaitForLastOperation>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d141      	bne.n	8000e76 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8000df2:	2001      	movs	r0, #1
 8000df4:	f000 f84c 	bl	8000e90 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000df8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000dfc:	f7ff ff46 	bl	8000c8c <FLASH_WaitForLastOperation>
 8000e00:	4603      	mov	r3, r0
 8000e02:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000e04:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <HAL_FLASHEx_Erase+0xd4>)
 8000e06:	691b      	ldr	r3, [r3, #16]
 8000e08:	4a20      	ldr	r2, [pc, #128]	; (8000e8c <HAL_FLASHEx_Erase+0xd4>)
 8000e0a:	f023 0304 	bic.w	r3, r3, #4
 8000e0e:	6113      	str	r3, [r2, #16]
 8000e10:	e031      	b.n	8000e76 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000e12:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e16:	f7ff ff39 	bl	8000c8c <FLASH_WaitForLastOperation>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d12a      	bne.n	8000e76 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	f04f 32ff 	mov.w	r2, #4294967295
 8000e26:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	e019      	b.n	8000e64 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000e30:	68b8      	ldr	r0, [r7, #8]
 8000e32:	f000 f849 	bl	8000ec8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e36:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e3a:	f7ff ff27 	bl	8000c8c <FLASH_WaitForLastOperation>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000e42:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <HAL_FLASHEx_Erase+0xd4>)
 8000e44:	691b      	ldr	r3, [r3, #16]
 8000e46:	4a11      	ldr	r2, [pc, #68]	; (8000e8c <HAL_FLASHEx_Erase+0xd4>)
 8000e48:	f023 0302 	bic.w	r3, r3, #2
 8000e4c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	601a      	str	r2, [r3, #0]
            break;
 8000e5a:	e00c      	b.n	8000e76 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e62:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	029a      	lsls	r2, r3, #10
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8000e70:	68ba      	ldr	r2, [r7, #8]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d3dc      	bcc.n	8000e30 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000e76:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <HAL_FLASHEx_Erase+0xd0>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	761a      	strb	r2, [r3, #24]

  return status;
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000cc0 	.word	0x20000cc0
 8000e8c:	40022000 	.word	0x40022000

08000e90 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <FLASH_MassErase+0x30>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <FLASH_MassErase+0x34>)
 8000ea0:	691b      	ldr	r3, [r3, #16]
 8000ea2:	4a08      	ldr	r2, [pc, #32]	; (8000ec4 <FLASH_MassErase+0x34>)
 8000ea4:	f043 0304 	orr.w	r3, r3, #4
 8000ea8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <FLASH_MassErase+0x34>)
 8000eac:	691b      	ldr	r3, [r3, #16]
 8000eae:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <FLASH_MassErase+0x34>)
 8000eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eb4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	20000cc0 	.word	0x20000cc0
 8000ec4:	40022000 	.word	0x40022000

08000ec8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <FLASH_PageErase+0x38>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <FLASH_PageErase+0x3c>)
 8000ed8:	691b      	ldr	r3, [r3, #16]
 8000eda:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <FLASH_PageErase+0x3c>)
 8000edc:	f043 0302 	orr.w	r3, r3, #2
 8000ee0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000ee2:	4a08      	ldr	r2, [pc, #32]	; (8000f04 <FLASH_PageErase+0x3c>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <FLASH_PageErase+0x3c>)
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <FLASH_PageErase+0x3c>)
 8000eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ef2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000cc0 	.word	0x20000cc0
 8000f04:	40022000 	.word	0x40022000

08000f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b08b      	sub	sp, #44	; 0x2c
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f12:	2300      	movs	r3, #0
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f16:	2300      	movs	r3, #0
 8000f18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f1a:	e169      	b.n	80011f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	69fa      	ldr	r2, [r7, #28]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	f040 8158 	bne.w	80011ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	4a9a      	ldr	r2, [pc, #616]	; (80011a8 <HAL_GPIO_Init+0x2a0>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d05e      	beq.n	8001002 <HAL_GPIO_Init+0xfa>
 8000f44:	4a98      	ldr	r2, [pc, #608]	; (80011a8 <HAL_GPIO_Init+0x2a0>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d875      	bhi.n	8001036 <HAL_GPIO_Init+0x12e>
 8000f4a:	4a98      	ldr	r2, [pc, #608]	; (80011ac <HAL_GPIO_Init+0x2a4>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d058      	beq.n	8001002 <HAL_GPIO_Init+0xfa>
 8000f50:	4a96      	ldr	r2, [pc, #600]	; (80011ac <HAL_GPIO_Init+0x2a4>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d86f      	bhi.n	8001036 <HAL_GPIO_Init+0x12e>
 8000f56:	4a96      	ldr	r2, [pc, #600]	; (80011b0 <HAL_GPIO_Init+0x2a8>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d052      	beq.n	8001002 <HAL_GPIO_Init+0xfa>
 8000f5c:	4a94      	ldr	r2, [pc, #592]	; (80011b0 <HAL_GPIO_Init+0x2a8>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d869      	bhi.n	8001036 <HAL_GPIO_Init+0x12e>
 8000f62:	4a94      	ldr	r2, [pc, #592]	; (80011b4 <HAL_GPIO_Init+0x2ac>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d04c      	beq.n	8001002 <HAL_GPIO_Init+0xfa>
 8000f68:	4a92      	ldr	r2, [pc, #584]	; (80011b4 <HAL_GPIO_Init+0x2ac>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d863      	bhi.n	8001036 <HAL_GPIO_Init+0x12e>
 8000f6e:	4a92      	ldr	r2, [pc, #584]	; (80011b8 <HAL_GPIO_Init+0x2b0>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d046      	beq.n	8001002 <HAL_GPIO_Init+0xfa>
 8000f74:	4a90      	ldr	r2, [pc, #576]	; (80011b8 <HAL_GPIO_Init+0x2b0>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d85d      	bhi.n	8001036 <HAL_GPIO_Init+0x12e>
 8000f7a:	2b12      	cmp	r3, #18
 8000f7c:	d82a      	bhi.n	8000fd4 <HAL_GPIO_Init+0xcc>
 8000f7e:	2b12      	cmp	r3, #18
 8000f80:	d859      	bhi.n	8001036 <HAL_GPIO_Init+0x12e>
 8000f82:	a201      	add	r2, pc, #4	; (adr r2, 8000f88 <HAL_GPIO_Init+0x80>)
 8000f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f88:	08001003 	.word	0x08001003
 8000f8c:	08000fdd 	.word	0x08000fdd
 8000f90:	08000fef 	.word	0x08000fef
 8000f94:	08001031 	.word	0x08001031
 8000f98:	08001037 	.word	0x08001037
 8000f9c:	08001037 	.word	0x08001037
 8000fa0:	08001037 	.word	0x08001037
 8000fa4:	08001037 	.word	0x08001037
 8000fa8:	08001037 	.word	0x08001037
 8000fac:	08001037 	.word	0x08001037
 8000fb0:	08001037 	.word	0x08001037
 8000fb4:	08001037 	.word	0x08001037
 8000fb8:	08001037 	.word	0x08001037
 8000fbc:	08001037 	.word	0x08001037
 8000fc0:	08001037 	.word	0x08001037
 8000fc4:	08001037 	.word	0x08001037
 8000fc8:	08001037 	.word	0x08001037
 8000fcc:	08000fe5 	.word	0x08000fe5
 8000fd0:	08000ff9 	.word	0x08000ff9
 8000fd4:	4a79      	ldr	r2, [pc, #484]	; (80011bc <HAL_GPIO_Init+0x2b4>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d013      	beq.n	8001002 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fda:	e02c      	b.n	8001036 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	623b      	str	r3, [r7, #32]
          break;
 8000fe2:	e029      	b.n	8001038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	623b      	str	r3, [r7, #32]
          break;
 8000fec:	e024      	b.n	8001038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	3308      	adds	r3, #8
 8000ff4:	623b      	str	r3, [r7, #32]
          break;
 8000ff6:	e01f      	b.n	8001038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	330c      	adds	r3, #12
 8000ffe:	623b      	str	r3, [r7, #32]
          break;
 8001000:	e01a      	b.n	8001038 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d102      	bne.n	8001010 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800100a:	2304      	movs	r3, #4
 800100c:	623b      	str	r3, [r7, #32]
          break;
 800100e:	e013      	b.n	8001038 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d105      	bne.n	8001024 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001018:	2308      	movs	r3, #8
 800101a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	69fa      	ldr	r2, [r7, #28]
 8001020:	611a      	str	r2, [r3, #16]
          break;
 8001022:	e009      	b.n	8001038 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001024:	2308      	movs	r3, #8
 8001026:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	69fa      	ldr	r2, [r7, #28]
 800102c:	615a      	str	r2, [r3, #20]
          break;
 800102e:	e003      	b.n	8001038 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001030:	2300      	movs	r3, #0
 8001032:	623b      	str	r3, [r7, #32]
          break;
 8001034:	e000      	b.n	8001038 <HAL_GPIO_Init+0x130>
          break;
 8001036:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	2bff      	cmp	r3, #255	; 0xff
 800103c:	d801      	bhi.n	8001042 <HAL_GPIO_Init+0x13a>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	e001      	b.n	8001046 <HAL_GPIO_Init+0x13e>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3304      	adds	r3, #4
 8001046:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	2bff      	cmp	r3, #255	; 0xff
 800104c:	d802      	bhi.n	8001054 <HAL_GPIO_Init+0x14c>
 800104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	e002      	b.n	800105a <HAL_GPIO_Init+0x152>
 8001054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001056:	3b08      	subs	r3, #8
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	210f      	movs	r1, #15
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	fa01 f303 	lsl.w	r3, r1, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	401a      	ands	r2, r3
 800106c:	6a39      	ldr	r1, [r7, #32]
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	fa01 f303 	lsl.w	r3, r1, r3
 8001074:	431a      	orrs	r2, r3
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001082:	2b00      	cmp	r3, #0
 8001084:	f000 80b1 	beq.w	80011ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001088:	4b4d      	ldr	r3, [pc, #308]	; (80011c0 <HAL_GPIO_Init+0x2b8>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a4c      	ldr	r2, [pc, #304]	; (80011c0 <HAL_GPIO_Init+0x2b8>)
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b4a      	ldr	r3, [pc, #296]	; (80011c0 <HAL_GPIO_Init+0x2b8>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010a0:	4a48      	ldr	r2, [pc, #288]	; (80011c4 <HAL_GPIO_Init+0x2bc>)
 80010a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a4:	089b      	lsrs	r3, r3, #2
 80010a6:	3302      	adds	r3, #2
 80010a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	220f      	movs	r2, #15
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	4013      	ands	r3, r2
 80010c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a40      	ldr	r2, [pc, #256]	; (80011c8 <HAL_GPIO_Init+0x2c0>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d013      	beq.n	80010f4 <HAL_GPIO_Init+0x1ec>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a3f      	ldr	r2, [pc, #252]	; (80011cc <HAL_GPIO_Init+0x2c4>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d00d      	beq.n	80010f0 <HAL_GPIO_Init+0x1e8>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a3e      	ldr	r2, [pc, #248]	; (80011d0 <HAL_GPIO_Init+0x2c8>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d007      	beq.n	80010ec <HAL_GPIO_Init+0x1e4>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a3d      	ldr	r2, [pc, #244]	; (80011d4 <HAL_GPIO_Init+0x2cc>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d101      	bne.n	80010e8 <HAL_GPIO_Init+0x1e0>
 80010e4:	2303      	movs	r3, #3
 80010e6:	e006      	b.n	80010f6 <HAL_GPIO_Init+0x1ee>
 80010e8:	2304      	movs	r3, #4
 80010ea:	e004      	b.n	80010f6 <HAL_GPIO_Init+0x1ee>
 80010ec:	2302      	movs	r3, #2
 80010ee:	e002      	b.n	80010f6 <HAL_GPIO_Init+0x1ee>
 80010f0:	2301      	movs	r3, #1
 80010f2:	e000      	b.n	80010f6 <HAL_GPIO_Init+0x1ee>
 80010f4:	2300      	movs	r3, #0
 80010f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010f8:	f002 0203 	and.w	r2, r2, #3
 80010fc:	0092      	lsls	r2, r2, #2
 80010fe:	4093      	lsls	r3, r2
 8001100:	68fa      	ldr	r2, [r7, #12]
 8001102:	4313      	orrs	r3, r2
 8001104:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001106:	492f      	ldr	r1, [pc, #188]	; (80011c4 <HAL_GPIO_Init+0x2bc>)
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	3302      	adds	r3, #2
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d006      	beq.n	800112e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001120:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	492c      	ldr	r1, [pc, #176]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	600b      	str	r3, [r1, #0]
 800112c:	e006      	b.n	800113c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800112e:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	43db      	mvns	r3, r3
 8001136:	4928      	ldr	r1, [pc, #160]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 8001138:	4013      	ands	r3, r2
 800113a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d006      	beq.n	8001156 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001148:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	4922      	ldr	r1, [pc, #136]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	604b      	str	r3, [r1, #4]
 8001154:	e006      	b.n	8001164 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001156:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	43db      	mvns	r3, r3
 800115e:	491e      	ldr	r1, [pc, #120]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 8001160:	4013      	ands	r3, r2
 8001162:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d006      	beq.n	800117e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001170:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	4918      	ldr	r1, [pc, #96]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	608b      	str	r3, [r1, #8]
 800117c:	e006      	b.n	800118c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800117e:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 8001180:	689a      	ldr	r2, [r3, #8]
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	43db      	mvns	r3, r3
 8001186:	4914      	ldr	r1, [pc, #80]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 8001188:	4013      	ands	r3, r2
 800118a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d021      	beq.n	80011dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 800119a:	68da      	ldr	r2, [r3, #12]
 800119c:	490e      	ldr	r1, [pc, #56]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	60cb      	str	r3, [r1, #12]
 80011a4:	e021      	b.n	80011ea <HAL_GPIO_Init+0x2e2>
 80011a6:	bf00      	nop
 80011a8:	10320000 	.word	0x10320000
 80011ac:	10310000 	.word	0x10310000
 80011b0:	10220000 	.word	0x10220000
 80011b4:	10210000 	.word	0x10210000
 80011b8:	10120000 	.word	0x10120000
 80011bc:	10110000 	.word	0x10110000
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40010000 	.word	0x40010000
 80011c8:	40010800 	.word	0x40010800
 80011cc:	40010c00 	.word	0x40010c00
 80011d0:	40011000 	.word	0x40011000
 80011d4:	40011400 	.word	0x40011400
 80011d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011dc:	4b0b      	ldr	r3, [pc, #44]	; (800120c <HAL_GPIO_Init+0x304>)
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	43db      	mvns	r3, r3
 80011e4:	4909      	ldr	r1, [pc, #36]	; (800120c <HAL_GPIO_Init+0x304>)
 80011e6:	4013      	ands	r3, r2
 80011e8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ec:	3301      	adds	r3, #1
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	fa22 f303 	lsr.w	r3, r2, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f47f ae8e 	bne.w	8000f1c <HAL_GPIO_Init+0x14>
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	372c      	adds	r7, #44	; 0x2c
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	40010400 	.word	0x40010400

08001210 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	887b      	ldrh	r3, [r7, #2]
 8001222:	4013      	ands	r3, r2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d002      	beq.n	800122e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001228:	2301      	movs	r3, #1
 800122a:	73fb      	strb	r3, [r7, #15]
 800122c:	e001      	b.n	8001232 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001232:	7bfb      	ldrb	r3, [r7, #15]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr

0800123e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	460b      	mov	r3, r1
 8001248:	807b      	strh	r3, [r7, #2]
 800124a:	4613      	mov	r3, r2
 800124c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800124e:	787b      	ldrb	r3, [r7, #1]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001254:	887a      	ldrh	r2, [r7, #2]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800125a:	e003      	b.n	8001264 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800125c:	887b      	ldrh	r3, [r7, #2]
 800125e:	041a      	lsls	r2, r3, #16
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	611a      	str	r2, [r3, #16]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
	...

08001270 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800127c:	695a      	ldr	r2, [r3, #20]
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	4013      	ands	r3, r2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d006      	beq.n	8001294 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001286:	4a05      	ldr	r2, [pc, #20]	; (800129c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800128c:	88fb      	ldrh	r3, [r7, #6]
 800128e:	4618      	mov	r0, r3
 8001290:	f002 fa2e 	bl	80036f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40010400 	.word	0x40010400

080012a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e272      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 8087 	beq.w	80013ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012c0:	4b92      	ldr	r3, [pc, #584]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 030c 	and.w	r3, r3, #12
 80012c8:	2b04      	cmp	r3, #4
 80012ca:	d00c      	beq.n	80012e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012cc:	4b8f      	ldr	r3, [pc, #572]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 030c 	and.w	r3, r3, #12
 80012d4:	2b08      	cmp	r3, #8
 80012d6:	d112      	bne.n	80012fe <HAL_RCC_OscConfig+0x5e>
 80012d8:	4b8c      	ldr	r3, [pc, #560]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012e4:	d10b      	bne.n	80012fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e6:	4b89      	ldr	r3, [pc, #548]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d06c      	beq.n	80013cc <HAL_RCC_OscConfig+0x12c>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d168      	bne.n	80013cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e24c      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001306:	d106      	bne.n	8001316 <HAL_RCC_OscConfig+0x76>
 8001308:	4b80      	ldr	r3, [pc, #512]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a7f      	ldr	r2, [pc, #508]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 800130e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	e02e      	b.n	8001374 <HAL_RCC_OscConfig+0xd4>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10c      	bne.n	8001338 <HAL_RCC_OscConfig+0x98>
 800131e:	4b7b      	ldr	r3, [pc, #492]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a7a      	ldr	r2, [pc, #488]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	4b78      	ldr	r3, [pc, #480]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a77      	ldr	r2, [pc, #476]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001330:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	e01d      	b.n	8001374 <HAL_RCC_OscConfig+0xd4>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001340:	d10c      	bne.n	800135c <HAL_RCC_OscConfig+0xbc>
 8001342:	4b72      	ldr	r3, [pc, #456]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a71      	ldr	r2, [pc, #452]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	4b6f      	ldr	r3, [pc, #444]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a6e      	ldr	r2, [pc, #440]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e00b      	b.n	8001374 <HAL_RCC_OscConfig+0xd4>
 800135c:	4b6b      	ldr	r3, [pc, #428]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a6a      	ldr	r2, [pc, #424]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	4b68      	ldr	r3, [pc, #416]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a67      	ldr	r2, [pc, #412]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 800136e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001372:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d013      	beq.n	80013a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137c:	f7ff f9bc 	bl	80006f8 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001384:	f7ff f9b8 	bl	80006f8 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b64      	cmp	r3, #100	; 0x64
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e200      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001396:	4b5d      	ldr	r3, [pc, #372]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0xe4>
 80013a2:	e014      	b.n	80013ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff f9a8 	bl	80006f8 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013ac:	f7ff f9a4 	bl	80006f8 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b64      	cmp	r3, #100	; 0x64
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e1ec      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013be:	4b53      	ldr	r3, [pc, #332]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0x10c>
 80013ca:	e000      	b.n	80013ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d063      	beq.n	80014a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013da:	4b4c      	ldr	r3, [pc, #304]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00b      	beq.n	80013fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013e6:	4b49      	ldr	r3, [pc, #292]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 030c 	and.w	r3, r3, #12
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d11c      	bne.n	800142c <HAL_RCC_OscConfig+0x18c>
 80013f2:	4b46      	ldr	r3, [pc, #280]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d116      	bne.n	800142c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fe:	4b43      	ldr	r3, [pc, #268]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d005      	beq.n	8001416 <HAL_RCC_OscConfig+0x176>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	691b      	ldr	r3, [r3, #16]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d001      	beq.n	8001416 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e1c0      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001416:	4b3d      	ldr	r3, [pc, #244]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4939      	ldr	r1, [pc, #228]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142a:	e03a      	b.n	80014a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d020      	beq.n	8001476 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001434:	4b36      	ldr	r3, [pc, #216]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 8001436:	2201      	movs	r2, #1
 8001438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143a:	f7ff f95d 	bl	80006f8 <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001442:	f7ff f959 	bl	80006f8 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e1a1      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001454:	4b2d      	ldr	r3, [pc, #180]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f0      	beq.n	8001442 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001460:	4b2a      	ldr	r3, [pc, #168]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	4927      	ldr	r1, [pc, #156]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001470:	4313      	orrs	r3, r2
 8001472:	600b      	str	r3, [r1, #0]
 8001474:	e015      	b.n	80014a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001476:	4b26      	ldr	r3, [pc, #152]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f7ff f93c 	bl	80006f8 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001484:	f7ff f938 	bl	80006f8 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e180      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001496:	4b1d      	ldr	r3, [pc, #116]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d03a      	beq.n	8001524 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d019      	beq.n	80014ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b6:	4b17      	ldr	r3, [pc, #92]	; (8001514 <HAL_RCC_OscConfig+0x274>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014bc:	f7ff f91c 	bl	80006f8 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c4:	f7ff f918 	bl	80006f8 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e160      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d6:	4b0d      	ldr	r3, [pc, #52]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f0      	beq.n	80014c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014e2:	2001      	movs	r0, #1
 80014e4:	f000 fad8 	bl	8001a98 <RCC_Delay>
 80014e8:	e01c      	b.n	8001524 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_RCC_OscConfig+0x274>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f0:	f7ff f902 	bl	80006f8 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f6:	e00f      	b.n	8001518 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f8:	f7ff f8fe 	bl	80006f8 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d908      	bls.n	8001518 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e146      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>
 800150a:	bf00      	nop
 800150c:	40021000 	.word	0x40021000
 8001510:	42420000 	.word	0x42420000
 8001514:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001518:	4b92      	ldr	r3, [pc, #584]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 800151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1e9      	bne.n	80014f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 80a6 	beq.w	800167e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001536:	4b8b      	ldr	r3, [pc, #556]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10d      	bne.n	800155e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001542:	4b88      	ldr	r3, [pc, #544]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	4a87      	ldr	r2, [pc, #540]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 8001548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154c:	61d3      	str	r3, [r2, #28]
 800154e:	4b85      	ldr	r3, [pc, #532]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800155a:	2301      	movs	r3, #1
 800155c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155e:	4b82      	ldr	r3, [pc, #520]	; (8001768 <HAL_RCC_OscConfig+0x4c8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001566:	2b00      	cmp	r3, #0
 8001568:	d118      	bne.n	800159c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800156a:	4b7f      	ldr	r3, [pc, #508]	; (8001768 <HAL_RCC_OscConfig+0x4c8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a7e      	ldr	r2, [pc, #504]	; (8001768 <HAL_RCC_OscConfig+0x4c8>)
 8001570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001576:	f7ff f8bf 	bl	80006f8 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800157e:	f7ff f8bb 	bl	80006f8 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b64      	cmp	r3, #100	; 0x64
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e103      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001590:	4b75      	ldr	r3, [pc, #468]	; (8001768 <HAL_RCC_OscConfig+0x4c8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0f0      	beq.n	800157e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d106      	bne.n	80015b2 <HAL_RCC_OscConfig+0x312>
 80015a4:	4b6f      	ldr	r3, [pc, #444]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	4a6e      	ldr	r2, [pc, #440]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6213      	str	r3, [r2, #32]
 80015b0:	e02d      	b.n	800160e <HAL_RCC_OscConfig+0x36e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10c      	bne.n	80015d4 <HAL_RCC_OscConfig+0x334>
 80015ba:	4b6a      	ldr	r3, [pc, #424]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	4a69      	ldr	r2, [pc, #420]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80015c0:	f023 0301 	bic.w	r3, r3, #1
 80015c4:	6213      	str	r3, [r2, #32]
 80015c6:	4b67      	ldr	r3, [pc, #412]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	4a66      	ldr	r2, [pc, #408]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80015cc:	f023 0304 	bic.w	r3, r3, #4
 80015d0:	6213      	str	r3, [r2, #32]
 80015d2:	e01c      	b.n	800160e <HAL_RCC_OscConfig+0x36e>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	2b05      	cmp	r3, #5
 80015da:	d10c      	bne.n	80015f6 <HAL_RCC_OscConfig+0x356>
 80015dc:	4b61      	ldr	r3, [pc, #388]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	4a60      	ldr	r2, [pc, #384]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80015e2:	f043 0304 	orr.w	r3, r3, #4
 80015e6:	6213      	str	r3, [r2, #32]
 80015e8:	4b5e      	ldr	r3, [pc, #376]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	4a5d      	ldr	r2, [pc, #372]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6213      	str	r3, [r2, #32]
 80015f4:	e00b      	b.n	800160e <HAL_RCC_OscConfig+0x36e>
 80015f6:	4b5b      	ldr	r3, [pc, #364]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	4a5a      	ldr	r2, [pc, #360]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80015fc:	f023 0301 	bic.w	r3, r3, #1
 8001600:	6213      	str	r3, [r2, #32]
 8001602:	4b58      	ldr	r3, [pc, #352]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	4a57      	ldr	r2, [pc, #348]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 8001608:	f023 0304 	bic.w	r3, r3, #4
 800160c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d015      	beq.n	8001642 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001616:	f7ff f86f 	bl	80006f8 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161c:	e00a      	b.n	8001634 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161e:	f7ff f86b 	bl	80006f8 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	f241 3288 	movw	r2, #5000	; 0x1388
 800162c:	4293      	cmp	r3, r2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e0b1      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001634:	4b4b      	ldr	r3, [pc, #300]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0ee      	beq.n	800161e <HAL_RCC_OscConfig+0x37e>
 8001640:	e014      	b.n	800166c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001642:	f7ff f859 	bl	80006f8 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001648:	e00a      	b.n	8001660 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164a:	f7ff f855 	bl	80006f8 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	f241 3288 	movw	r2, #5000	; 0x1388
 8001658:	4293      	cmp	r3, r2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e09b      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001660:	4b40      	ldr	r3, [pc, #256]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1ee      	bne.n	800164a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800166c:	7dfb      	ldrb	r3, [r7, #23]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d105      	bne.n	800167e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001672:	4b3c      	ldr	r3, [pc, #240]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	4a3b      	ldr	r2, [pc, #236]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 8001678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800167c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 8087 	beq.w	8001796 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001688:	4b36      	ldr	r3, [pc, #216]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 030c 	and.w	r3, r3, #12
 8001690:	2b08      	cmp	r3, #8
 8001692:	d061      	beq.n	8001758 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	69db      	ldr	r3, [r3, #28]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d146      	bne.n	800172a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169c:	4b33      	ldr	r3, [pc, #204]	; (800176c <HAL_RCC_OscConfig+0x4cc>)
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a2:	f7ff f829 	bl	80006f8 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016aa:	f7ff f825 	bl	80006f8 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e06d      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016bc:	4b29      	ldr	r3, [pc, #164]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1f0      	bne.n	80016aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d0:	d108      	bne.n	80016e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016d2:	4b24      	ldr	r3, [pc, #144]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	4921      	ldr	r1, [pc, #132]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016e4:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a19      	ldr	r1, [r3, #32]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	430b      	orrs	r3, r1
 80016f6:	491b      	ldr	r1, [pc, #108]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016fc:	4b1b      	ldr	r3, [pc, #108]	; (800176c <HAL_RCC_OscConfig+0x4cc>)
 80016fe:	2201      	movs	r2, #1
 8001700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001702:	f7fe fff9 	bl	80006f8 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170a:	f7fe fff5 	bl	80006f8 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e03d      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x46a>
 8001728:	e035      	b.n	8001796 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <HAL_RCC_OscConfig+0x4cc>)
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001730:	f7fe ffe2 	bl	80006f8 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001738:	f7fe ffde 	bl	80006f8 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e026      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0x498>
 8001756:	e01e      	b.n	8001796 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d107      	bne.n	8001770 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e019      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>
 8001764:	40021000 	.word	0x40021000
 8001768:	40007000 	.word	0x40007000
 800176c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <HAL_RCC_OscConfig+0x500>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	429a      	cmp	r2, r3
 8001782:	d106      	bne.n	8001792 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800178e:	429a      	cmp	r2, r3
 8001790:	d001      	beq.n	8001796 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e000      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40021000 	.word	0x40021000

080017a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0d0      	b.n	800195a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017b8:	4b6a      	ldr	r3, [pc, #424]	; (8001964 <HAL_RCC_ClockConfig+0x1c0>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d910      	bls.n	80017e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c6:	4b67      	ldr	r3, [pc, #412]	; (8001964 <HAL_RCC_ClockConfig+0x1c0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f023 0207 	bic.w	r2, r3, #7
 80017ce:	4965      	ldr	r1, [pc, #404]	; (8001964 <HAL_RCC_ClockConfig+0x1c0>)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d6:	4b63      	ldr	r3, [pc, #396]	; (8001964 <HAL_RCC_ClockConfig+0x1c0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d001      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0b8      	b.n	800195a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d020      	beq.n	8001836 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d005      	beq.n	800180c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001800:	4b59      	ldr	r3, [pc, #356]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	4a58      	ldr	r2, [pc, #352]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001806:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800180a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001818:	4b53      	ldr	r3, [pc, #332]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	4a52      	ldr	r2, [pc, #328]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 800181e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001822:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001824:	4b50      	ldr	r3, [pc, #320]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	494d      	ldr	r1, [pc, #308]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001832:	4313      	orrs	r3, r2
 8001834:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d040      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d107      	bne.n	800185a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184a:	4b47      	ldr	r3, [pc, #284]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d115      	bne.n	8001882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e07f      	b.n	800195a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d107      	bne.n	8001872 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001862:	4b41      	ldr	r3, [pc, #260]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d109      	bne.n	8001882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e073      	b.n	800195a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001872:	4b3d      	ldr	r3, [pc, #244]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e06b      	b.n	800195a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001882:	4b39      	ldr	r3, [pc, #228]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f023 0203 	bic.w	r2, r3, #3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	4936      	ldr	r1, [pc, #216]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001890:	4313      	orrs	r3, r2
 8001892:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001894:	f7fe ff30 	bl	80006f8 <HAL_GetTick>
 8001898:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189a:	e00a      	b.n	80018b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800189c:	f7fe ff2c 	bl	80006f8 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e053      	b.n	800195a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b2:	4b2d      	ldr	r3, [pc, #180]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 020c 	and.w	r2, r3, #12
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d1eb      	bne.n	800189c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018c4:	4b27      	ldr	r3, [pc, #156]	; (8001964 <HAL_RCC_ClockConfig+0x1c0>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d210      	bcs.n	80018f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d2:	4b24      	ldr	r3, [pc, #144]	; (8001964 <HAL_RCC_ClockConfig+0x1c0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f023 0207 	bic.w	r2, r3, #7
 80018da:	4922      	ldr	r1, [pc, #136]	; (8001964 <HAL_RCC_ClockConfig+0x1c0>)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	4313      	orrs	r3, r2
 80018e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e2:	4b20      	ldr	r3, [pc, #128]	; (8001964 <HAL_RCC_ClockConfig+0x1c0>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d001      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e032      	b.n	800195a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d008      	beq.n	8001912 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001900:	4b19      	ldr	r3, [pc, #100]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	4916      	ldr	r1, [pc, #88]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 800190e:	4313      	orrs	r3, r2
 8001910:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	2b00      	cmp	r3, #0
 800191c:	d009      	beq.n	8001932 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800191e:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	490e      	ldr	r1, [pc, #56]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 800192e:	4313      	orrs	r3, r2
 8001930:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001932:	f000 f821 	bl	8001978 <HAL_RCC_GetSysClockFreq>
 8001936:	4602      	mov	r2, r0
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	091b      	lsrs	r3, r3, #4
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	490a      	ldr	r1, [pc, #40]	; (800196c <HAL_RCC_ClockConfig+0x1c8>)
 8001944:	5ccb      	ldrb	r3, [r1, r3]
 8001946:	fa22 f303 	lsr.w	r3, r2, r3
 800194a:	4a09      	ldr	r2, [pc, #36]	; (8001970 <HAL_RCC_ClockConfig+0x1cc>)
 800194c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <HAL_RCC_ClockConfig+0x1d0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fe8e 	bl	8000674 <HAL_InitTick>

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40022000 	.word	0x40022000
 8001968:	40021000 	.word	0x40021000
 800196c:	08005b98 	.word	0x08005b98
 8001970:	20000c9c 	.word	0x20000c9c
 8001974:	20000000 	.word	0x20000000

08001978 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001978:	b490      	push	{r4, r7}
 800197a:	b08a      	sub	sp, #40	; 0x28
 800197c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800197e:	4b29      	ldr	r3, [pc, #164]	; (8001a24 <HAL_RCC_GetSysClockFreq+0xac>)
 8001980:	1d3c      	adds	r4, r7, #4
 8001982:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001984:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001988:	f240 2301 	movw	r3, #513	; 0x201
 800198c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
 8001992:	2300      	movs	r3, #0
 8001994:	61bb      	str	r3, [r7, #24]
 8001996:	2300      	movs	r3, #0
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800199e:	2300      	movs	r3, #0
 80019a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019a2:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <HAL_RCC_GetSysClockFreq+0xb0>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f003 030c 	and.w	r3, r3, #12
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	d002      	beq.n	80019b8 <HAL_RCC_GetSysClockFreq+0x40>
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d003      	beq.n	80019be <HAL_RCC_GetSysClockFreq+0x46>
 80019b6:	e02b      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019b8:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <HAL_RCC_GetSysClockFreq+0xb4>)
 80019ba:	623b      	str	r3, [r7, #32]
      break;
 80019bc:	e02b      	b.n	8001a16 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	0c9b      	lsrs	r3, r3, #18
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	3328      	adds	r3, #40	; 0x28
 80019c8:	443b      	add	r3, r7
 80019ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80019ce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d012      	beq.n	8001a00 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019da:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <HAL_RCC_GetSysClockFreq+0xb0>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	0c5b      	lsrs	r3, r3, #17
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	3328      	adds	r3, #40	; 0x28
 80019e6:	443b      	add	r3, r7
 80019e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80019ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	4a0e      	ldr	r2, [pc, #56]	; (8001a2c <HAL_RCC_GetSysClockFreq+0xb4>)
 80019f2:	fb03 f202 	mul.w	r2, r3, r2
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
 80019fe:	e004      	b.n	8001a0a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	4a0b      	ldr	r2, [pc, #44]	; (8001a30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a04:	fb02 f303 	mul.w	r3, r2, r3
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	623b      	str	r3, [r7, #32]
      break;
 8001a0e:	e002      	b.n	8001a16 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a12:	623b      	str	r3, [r7, #32]
      break;
 8001a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a16:	6a3b      	ldr	r3, [r7, #32]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3728      	adds	r7, #40	; 0x28
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc90      	pop	{r4, r7}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	08005b88 	.word	0x08005b88
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	007a1200 	.word	0x007a1200
 8001a30:	003d0900 	.word	0x003d0900

08001a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a38:	4b02      	ldr	r3, [pc, #8]	; (8001a44 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr
 8001a44:	20000c9c 	.word	0x20000c9c

08001a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a4c:	f7ff fff2 	bl	8001a34 <HAL_RCC_GetHCLKFreq>
 8001a50:	4602      	mov	r2, r0
 8001a52:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	0a1b      	lsrs	r3, r3, #8
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	4903      	ldr	r1, [pc, #12]	; (8001a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a5e:	5ccb      	ldrb	r3, [r1, r3]
 8001a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	08005ba8 	.word	0x08005ba8

08001a70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a74:	f7ff ffde 	bl	8001a34 <HAL_RCC_GetHCLKFreq>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	0adb      	lsrs	r3, r3, #11
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	4903      	ldr	r1, [pc, #12]	; (8001a94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a86:	5ccb      	ldrb	r3, [r1, r3]
 8001a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40021000 	.word	0x40021000
 8001a94:	08005ba8 	.word	0x08005ba8

08001a98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001aa0:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <RCC_Delay+0x34>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <RCC_Delay+0x38>)
 8001aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aaa:	0a5b      	lsrs	r3, r3, #9
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	fb02 f303 	mul.w	r3, r2, r3
 8001ab2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ab4:	bf00      	nop
  }
  while (Delay --);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	1e5a      	subs	r2, r3, #1
 8001aba:	60fa      	str	r2, [r7, #12]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1f9      	bne.n	8001ab4 <RCC_Delay+0x1c>
}
 8001ac0:	bf00      	nop
 8001ac2:	bf00      	nop
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	20000c9c 	.word	0x20000c9c
 8001ad0:	10624dd3 	.word	0x10624dd3

08001ad4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e041      	b.n	8001b6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d106      	bne.n	8001b00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f003 fe26 	bl	800574c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2202      	movs	r2, #2
 8001b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3304      	adds	r3, #4
 8001b10:	4619      	mov	r1, r3
 8001b12:	4610      	mov	r0, r2
 8001b14:	f000 fcb0 	bl	8002478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d001      	beq.n	8001b8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e03a      	b.n	8001c02 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0201 	orr.w	r2, r2, #1
 8001ba2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a18      	ldr	r2, [pc, #96]	; (8001c0c <HAL_TIM_Base_Start_IT+0x98>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d00e      	beq.n	8001bcc <HAL_TIM_Base_Start_IT+0x58>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb6:	d009      	beq.n	8001bcc <HAL_TIM_Base_Start_IT+0x58>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a14      	ldr	r2, [pc, #80]	; (8001c10 <HAL_TIM_Base_Start_IT+0x9c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d004      	beq.n	8001bcc <HAL_TIM_Base_Start_IT+0x58>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a13      	ldr	r2, [pc, #76]	; (8001c14 <HAL_TIM_Base_Start_IT+0xa0>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d111      	bne.n	8001bf0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2b06      	cmp	r3, #6
 8001bdc:	d010      	beq.n	8001c00 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f042 0201 	orr.w	r2, r2, #1
 8001bec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bee:	e007      	b.n	8001c00 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0201 	orr.w	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr
 8001c0c:	40012c00 	.word	0x40012c00
 8001c10:	40000400 	.word	0x40000400
 8001c14:	40000800 	.word	0x40000800

08001c18 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0201 	bic.w	r2, r2, #1
 8001c2e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6a1a      	ldr	r2, [r3, #32]
 8001c36:	f241 1311 	movw	r3, #4369	; 0x1111
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d10f      	bne.n	8001c60 <HAL_TIM_Base_Stop_IT+0x48>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6a1a      	ldr	r2, [r3, #32]
 8001c46:	f240 4344 	movw	r3, #1092	; 0x444
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d107      	bne.n	8001c60 <HAL_TIM_Base_Stop_IT+0x48>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 0201 	bic.w	r2, r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e041      	b.n	8001d0a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d106      	bne.n	8001ca0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f839 	bl	8001d12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3304      	adds	r3, #4
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	f000 fbe0 	bl	8002478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr

08001d24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d109      	bne.n	8001d48 <HAL_TIM_PWM_Start+0x24>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	bf14      	ite	ne
 8001d40:	2301      	movne	r3, #1
 8001d42:	2300      	moveq	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	e022      	b.n	8001d8e <HAL_TIM_PWM_Start+0x6a>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d109      	bne.n	8001d62 <HAL_TIM_PWM_Start+0x3e>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	bf14      	ite	ne
 8001d5a:	2301      	movne	r3, #1
 8001d5c:	2300      	moveq	r3, #0
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	e015      	b.n	8001d8e <HAL_TIM_PWM_Start+0x6a>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d109      	bne.n	8001d7c <HAL_TIM_PWM_Start+0x58>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	bf14      	ite	ne
 8001d74:	2301      	movne	r3, #1
 8001d76:	2300      	moveq	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	e008      	b.n	8001d8e <HAL_TIM_PWM_Start+0x6a>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	bf14      	ite	ne
 8001d88:	2301      	movne	r3, #1
 8001d8a:	2300      	moveq	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e05e      	b.n	8001e54 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d104      	bne.n	8001da6 <HAL_TIM_PWM_Start+0x82>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001da4:	e013      	b.n	8001dce <HAL_TIM_PWM_Start+0xaa>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d104      	bne.n	8001db6 <HAL_TIM_PWM_Start+0x92>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2202      	movs	r2, #2
 8001db0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001db4:	e00b      	b.n	8001dce <HAL_TIM_PWM_Start+0xaa>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	2b08      	cmp	r3, #8
 8001dba:	d104      	bne.n	8001dc6 <HAL_TIM_PWM_Start+0xa2>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dc4:	e003      	b.n	8001dce <HAL_TIM_PWM_Start+0xaa>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2202      	movs	r2, #2
 8001dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	6839      	ldr	r1, [r7, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 fdce 	bl	8002978 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a1e      	ldr	r2, [pc, #120]	; (8001e5c <HAL_TIM_PWM_Start+0x138>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d107      	bne.n	8001df6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001df4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a18      	ldr	r2, [pc, #96]	; (8001e5c <HAL_TIM_PWM_Start+0x138>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d00e      	beq.n	8001e1e <HAL_TIM_PWM_Start+0xfa>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e08:	d009      	beq.n	8001e1e <HAL_TIM_PWM_Start+0xfa>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a14      	ldr	r2, [pc, #80]	; (8001e60 <HAL_TIM_PWM_Start+0x13c>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d004      	beq.n	8001e1e <HAL_TIM_PWM_Start+0xfa>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a12      	ldr	r2, [pc, #72]	; (8001e64 <HAL_TIM_PWM_Start+0x140>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d111      	bne.n	8001e42 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2b06      	cmp	r3, #6
 8001e2e:	d010      	beq.n	8001e52 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0201 	orr.w	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e40:	e007      	b.n	8001e52 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0201 	orr.w	r2, r2, #1
 8001e50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40012c00 	.word	0x40012c00
 8001e60:	40000400 	.word	0x40000400
 8001e64:	40000800 	.word	0x40000800

08001e68 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e041      	b.n	8001f00 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d106      	bne.n	8001e96 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f839 	bl	8001f08 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2202      	movs	r2, #2
 8001e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	f000 fae5 	bl	8002478 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0208 	bic.w	r2, r2, #8
 8001ebc:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6819      	ldr	r1, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr

08001f1a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d122      	bne.n	8001f76 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d11b      	bne.n	8001f76 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f06f 0202 	mvn.w	r2, #2
 8001f46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 fa70 	bl	8002442 <HAL_TIM_IC_CaptureCallback>
 8001f62:	e005      	b.n	8001f70 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 fa63 	bl	8002430 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 fa72 	bl	8002454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d122      	bne.n	8001fca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d11b      	bne.n	8001fca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f06f 0204 	mvn.w	r2, #4
 8001f9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 fa46 	bl	8002442 <HAL_TIM_IC_CaptureCallback>
 8001fb6:	e005      	b.n	8001fc4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 fa39 	bl	8002430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 fa48 	bl	8002454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d122      	bne.n	800201e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	2b08      	cmp	r3, #8
 8001fe4:	d11b      	bne.n	800201e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f06f 0208 	mvn.w	r2, #8
 8001fee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2204      	movs	r2, #4
 8001ff4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 fa1c 	bl	8002442 <HAL_TIM_IC_CaptureCallback>
 800200a:	e005      	b.n	8002018 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 fa0f 	bl	8002430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 fa1e 	bl	8002454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	f003 0310 	and.w	r3, r3, #16
 8002028:	2b10      	cmp	r3, #16
 800202a:	d122      	bne.n	8002072 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	f003 0310 	and.w	r3, r3, #16
 8002036:	2b10      	cmp	r3, #16
 8002038:	d11b      	bne.n	8002072 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f06f 0210 	mvn.w	r2, #16
 8002042:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2208      	movs	r2, #8
 8002048:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f9f2 	bl	8002442 <HAL_TIM_IC_CaptureCallback>
 800205e:	e005      	b.n	800206c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f9e5 	bl	8002430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f9f4 	bl	8002454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b01      	cmp	r3, #1
 800207e:	d10e      	bne.n	800209e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b01      	cmp	r3, #1
 800208c:	d107      	bne.n	800209e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f06f 0201 	mvn.w	r2, #1
 8002096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f001 fb0d 	bl	80036b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a8:	2b80      	cmp	r3, #128	; 0x80
 80020aa:	d10e      	bne.n	80020ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b6:	2b80      	cmp	r3, #128	; 0x80
 80020b8:	d107      	bne.n	80020ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 fce2 	bl	8002a8e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d4:	2b40      	cmp	r3, #64	; 0x40
 80020d6:	d10e      	bne.n	80020f6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e2:	2b40      	cmp	r3, #64	; 0x40
 80020e4:	d107      	bne.n	80020f6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f9b8 	bl	8002466 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	f003 0320 	and.w	r3, r3, #32
 8002100:	2b20      	cmp	r3, #32
 8002102:	d10e      	bne.n	8002122 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f003 0320 	and.w	r3, r3, #32
 800210e:	2b20      	cmp	r3, #32
 8002110:	d107      	bne.n	8002122 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f06f 0220 	mvn.w	r2, #32
 800211a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 fcad 	bl	8002a7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002142:	2302      	movs	r3, #2
 8002144:	e0ac      	b.n	80022a0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b0c      	cmp	r3, #12
 8002152:	f200 809f 	bhi.w	8002294 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002156:	a201      	add	r2, pc, #4	; (adr r2, 800215c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215c:	08002191 	.word	0x08002191
 8002160:	08002295 	.word	0x08002295
 8002164:	08002295 	.word	0x08002295
 8002168:	08002295 	.word	0x08002295
 800216c:	080021d1 	.word	0x080021d1
 8002170:	08002295 	.word	0x08002295
 8002174:	08002295 	.word	0x08002295
 8002178:	08002295 	.word	0x08002295
 800217c:	08002213 	.word	0x08002213
 8002180:	08002295 	.word	0x08002295
 8002184:	08002295 	.word	0x08002295
 8002188:	08002295 	.word	0x08002295
 800218c:	08002253 	.word	0x08002253
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	4618      	mov	r0, r3
 8002198:	f000 f9d0 	bl	800253c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	699a      	ldr	r2, [r3, #24]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0208 	orr.w	r2, r2, #8
 80021aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	699a      	ldr	r2, [r3, #24]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 0204 	bic.w	r2, r2, #4
 80021ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6999      	ldr	r1, [r3, #24]
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	691a      	ldr	r2, [r3, #16]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	619a      	str	r2, [r3, #24]
      break;
 80021ce:	e062      	b.n	8002296 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68b9      	ldr	r1, [r7, #8]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fa16 	bl	8002608 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	699a      	ldr	r2, [r3, #24]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	699a      	ldr	r2, [r3, #24]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6999      	ldr	r1, [r3, #24]
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	021a      	lsls	r2, r3, #8
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	619a      	str	r2, [r3, #24]
      break;
 8002210:	e041      	b.n	8002296 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68b9      	ldr	r1, [r7, #8]
 8002218:	4618      	mov	r0, r3
 800221a:	f000 fa5f 	bl	80026dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	69da      	ldr	r2, [r3, #28]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f042 0208 	orr.w	r2, r2, #8
 800222c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	69da      	ldr	r2, [r3, #28]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0204 	bic.w	r2, r2, #4
 800223c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	69d9      	ldr	r1, [r3, #28]
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	61da      	str	r2, [r3, #28]
      break;
 8002250:	e021      	b.n	8002296 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68b9      	ldr	r1, [r7, #8]
 8002258:	4618      	mov	r0, r3
 800225a:	f000 faa9 	bl	80027b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	69da      	ldr	r2, [r3, #28]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800226c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	69da      	ldr	r2, [r3, #28]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800227c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	69d9      	ldr	r1, [r3, #28]
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	021a      	lsls	r2, r3, #8
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	61da      	str	r2, [r3, #28]
      break;
 8002292:	e000      	b.n	8002296 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002294:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <HAL_TIM_ConfigClockSource+0x18>
 80022bc:	2302      	movs	r3, #2
 80022be:	e0b3      	b.n	8002428 <HAL_TIM_ConfigClockSource+0x180>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2202      	movs	r2, #2
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022f8:	d03e      	beq.n	8002378 <HAL_TIM_ConfigClockSource+0xd0>
 80022fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022fe:	f200 8087 	bhi.w	8002410 <HAL_TIM_ConfigClockSource+0x168>
 8002302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002306:	f000 8085 	beq.w	8002414 <HAL_TIM_ConfigClockSource+0x16c>
 800230a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800230e:	d87f      	bhi.n	8002410 <HAL_TIM_ConfigClockSource+0x168>
 8002310:	2b70      	cmp	r3, #112	; 0x70
 8002312:	d01a      	beq.n	800234a <HAL_TIM_ConfigClockSource+0xa2>
 8002314:	2b70      	cmp	r3, #112	; 0x70
 8002316:	d87b      	bhi.n	8002410 <HAL_TIM_ConfigClockSource+0x168>
 8002318:	2b60      	cmp	r3, #96	; 0x60
 800231a:	d050      	beq.n	80023be <HAL_TIM_ConfigClockSource+0x116>
 800231c:	2b60      	cmp	r3, #96	; 0x60
 800231e:	d877      	bhi.n	8002410 <HAL_TIM_ConfigClockSource+0x168>
 8002320:	2b50      	cmp	r3, #80	; 0x50
 8002322:	d03c      	beq.n	800239e <HAL_TIM_ConfigClockSource+0xf6>
 8002324:	2b50      	cmp	r3, #80	; 0x50
 8002326:	d873      	bhi.n	8002410 <HAL_TIM_ConfigClockSource+0x168>
 8002328:	2b40      	cmp	r3, #64	; 0x40
 800232a:	d058      	beq.n	80023de <HAL_TIM_ConfigClockSource+0x136>
 800232c:	2b40      	cmp	r3, #64	; 0x40
 800232e:	d86f      	bhi.n	8002410 <HAL_TIM_ConfigClockSource+0x168>
 8002330:	2b30      	cmp	r3, #48	; 0x30
 8002332:	d064      	beq.n	80023fe <HAL_TIM_ConfigClockSource+0x156>
 8002334:	2b30      	cmp	r3, #48	; 0x30
 8002336:	d86b      	bhi.n	8002410 <HAL_TIM_ConfigClockSource+0x168>
 8002338:	2b20      	cmp	r3, #32
 800233a:	d060      	beq.n	80023fe <HAL_TIM_ConfigClockSource+0x156>
 800233c:	2b20      	cmp	r3, #32
 800233e:	d867      	bhi.n	8002410 <HAL_TIM_ConfigClockSource+0x168>
 8002340:	2b00      	cmp	r3, #0
 8002342:	d05c      	beq.n	80023fe <HAL_TIM_ConfigClockSource+0x156>
 8002344:	2b10      	cmp	r3, #16
 8002346:	d05a      	beq.n	80023fe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002348:	e062      	b.n	8002410 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	6899      	ldr	r1, [r3, #8]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f000 faee 	bl	800293a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800236c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	609a      	str	r2, [r3, #8]
      break;
 8002376:	e04e      	b.n	8002416 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6818      	ldr	r0, [r3, #0]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	6899      	ldr	r1, [r3, #8]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f000 fad7 	bl	800293a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800239a:	609a      	str	r2, [r3, #8]
      break;
 800239c:	e03b      	b.n	8002416 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	6859      	ldr	r1, [r3, #4]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	461a      	mov	r2, r3
 80023ac:	f000 fa4e 	bl	800284c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2150      	movs	r1, #80	; 0x50
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 faa5 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 80023bc:	e02b      	b.n	8002416 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	6859      	ldr	r1, [r3, #4]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	461a      	mov	r2, r3
 80023cc:	f000 fa6c 	bl	80028a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2160      	movs	r1, #96	; 0x60
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 fa95 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 80023dc:	e01b      	b.n	8002416 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	6859      	ldr	r1, [r3, #4]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	461a      	mov	r2, r3
 80023ec:	f000 fa2e 	bl	800284c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2140      	movs	r1, #64	; 0x40
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 fa85 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 80023fc:	e00b      	b.n	8002416 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4619      	mov	r1, r3
 8002408:	4610      	mov	r0, r2
 800240a:	f000 fa7c 	bl	8002906 <TIM_ITRx_SetConfig>
        break;
 800240e:	e002      	b.n	8002416 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002410:	bf00      	nop
 8002412:	e000      	b.n	8002416 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002414:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr

08002442 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr

08002466 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a29      	ldr	r2, [pc, #164]	; (8002530 <TIM_Base_SetConfig+0xb8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d00b      	beq.n	80024a8 <TIM_Base_SetConfig+0x30>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002496:	d007      	beq.n	80024a8 <TIM_Base_SetConfig+0x30>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a26      	ldr	r2, [pc, #152]	; (8002534 <TIM_Base_SetConfig+0xbc>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d003      	beq.n	80024a8 <TIM_Base_SetConfig+0x30>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a25      	ldr	r2, [pc, #148]	; (8002538 <TIM_Base_SetConfig+0xc0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d108      	bne.n	80024ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a1c      	ldr	r2, [pc, #112]	; (8002530 <TIM_Base_SetConfig+0xb8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d00b      	beq.n	80024da <TIM_Base_SetConfig+0x62>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024c8:	d007      	beq.n	80024da <TIM_Base_SetConfig+0x62>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a19      	ldr	r2, [pc, #100]	; (8002534 <TIM_Base_SetConfig+0xbc>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d003      	beq.n	80024da <TIM_Base_SetConfig+0x62>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a18      	ldr	r2, [pc, #96]	; (8002538 <TIM_Base_SetConfig+0xc0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d108      	bne.n	80024ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a07      	ldr	r2, [pc, #28]	; (8002530 <TIM_Base_SetConfig+0xb8>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d103      	bne.n	8002520 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	615a      	str	r2, [r3, #20]
}
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr
 8002530:	40012c00 	.word	0x40012c00
 8002534:	40000400 	.word	0x40000400
 8002538:	40000800 	.word	0x40000800

0800253c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800253c:	b480      	push	{r7}
 800253e:	b087      	sub	sp, #28
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	f023 0201 	bic.w	r2, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800256a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f023 0303 	bic.w	r3, r3, #3
 8002572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	4313      	orrs	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f023 0302 	bic.w	r3, r3, #2
 8002584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	4313      	orrs	r3, r2
 800258e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a1c      	ldr	r2, [pc, #112]	; (8002604 <TIM_OC1_SetConfig+0xc8>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d10c      	bne.n	80025b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f023 0308 	bic.w	r3, r3, #8
 800259e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f023 0304 	bic.w	r3, r3, #4
 80025b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a13      	ldr	r2, [pc, #76]	; (8002604 <TIM_OC1_SetConfig+0xc8>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d111      	bne.n	80025de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	4313      	orrs	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	621a      	str	r2, [r3, #32]
}
 80025f8:	bf00      	nop
 80025fa:	371c      	adds	r7, #28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40012c00 	.word	0x40012c00

08002608 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	f023 0210 	bic.w	r2, r3, #16
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800263e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	021b      	lsls	r3, r3, #8
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4313      	orrs	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f023 0320 	bic.w	r3, r3, #32
 8002652:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	011b      	lsls	r3, r3, #4
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	4313      	orrs	r3, r2
 800265e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a1d      	ldr	r2, [pc, #116]	; (80026d8 <TIM_OC2_SetConfig+0xd0>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d10d      	bne.n	8002684 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800266e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	4313      	orrs	r3, r2
 800267a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002682:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a14      	ldr	r2, [pc, #80]	; (80026d8 <TIM_OC2_SetConfig+0xd0>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d113      	bne.n	80026b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002692:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800269a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	621a      	str	r2, [r3, #32]
}
 80026ce:	bf00      	nop
 80026d0:	371c      	adds	r7, #28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr
 80026d8:	40012c00 	.word	0x40012c00

080026dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026dc:	b480      	push	{r7}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800270a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f023 0303 	bic.w	r3, r3, #3
 8002712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	4313      	orrs	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	021b      	lsls	r3, r3, #8
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	4313      	orrs	r3, r2
 8002730:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a1d      	ldr	r2, [pc, #116]	; (80027ac <TIM_OC3_SetConfig+0xd0>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d10d      	bne.n	8002756 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002740:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	021b      	lsls	r3, r3, #8
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	4313      	orrs	r3, r2
 800274c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a14      	ldr	r2, [pc, #80]	; (80027ac <TIM_OC3_SetConfig+0xd0>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d113      	bne.n	8002786 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800276c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4313      	orrs	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4313      	orrs	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	621a      	str	r2, [r3, #32]
}
 80027a0:	bf00      	nop
 80027a2:	371c      	adds	r7, #28
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bc80      	pop	{r7}
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	40012c00 	.word	0x40012c00

080027b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	021b      	lsls	r3, r3, #8
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	031b      	lsls	r3, r3, #12
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a0f      	ldr	r2, [pc, #60]	; (8002848 <TIM_OC4_SetConfig+0x98>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d109      	bne.n	8002824 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002816:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	019b      	lsls	r3, r3, #6
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	4313      	orrs	r3, r2
 8002822:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	621a      	str	r2, [r3, #32]
}
 800283e:	bf00      	nop
 8002840:	371c      	adds	r7, #28
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr
 8002848:	40012c00 	.word	0x40012c00

0800284c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	f023 0201 	bic.w	r2, r3, #1
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f023 030a 	bic.w	r3, r3, #10
 8002888:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	4313      	orrs	r3, r2
 8002890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	621a      	str	r2, [r3, #32]
}
 800289e:	bf00      	nop
 80028a0:	371c      	adds	r7, #28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	f023 0210 	bic.w	r2, r3, #16
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	031b      	lsls	r3, r3, #12
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	4313      	orrs	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	621a      	str	r2, [r3, #32]
}
 80028fc:	bf00      	nop
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr

08002906 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002906:	b480      	push	{r7}
 8002908:	b085      	sub	sp, #20
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	f043 0307 	orr.w	r3, r3, #7
 8002928:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	609a      	str	r2, [r3, #8]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr

0800293a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800293a:	b480      	push	{r7}
 800293c:	b087      	sub	sp, #28
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002954:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	021a      	lsls	r2, r3, #8
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	431a      	orrs	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	4313      	orrs	r3, r2
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	4313      	orrs	r3, r2
 8002966:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	609a      	str	r2, [r3, #8]
}
 800296e:	bf00      	nop
 8002970:	371c      	adds	r7, #28
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	2201      	movs	r2, #1
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a1a      	ldr	r2, [r3, #32]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	43db      	mvns	r3, r3
 800299a:	401a      	ands	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a1a      	ldr	r2, [r3, #32]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f003 031f 	and.w	r3, r3, #31
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	fa01 f303 	lsl.w	r3, r1, r3
 80029b0:	431a      	orrs	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	621a      	str	r2, [r3, #32]
}
 80029b6:	bf00      	nop
 80029b8:	371c      	adds	r7, #28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029d4:	2302      	movs	r3, #2
 80029d6:	e046      	b.n	8002a66 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a16      	ldr	r2, [pc, #88]	; (8002a70 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d00e      	beq.n	8002a3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a24:	d009      	beq.n	8002a3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a12      	ldr	r2, [pc, #72]	; (8002a74 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d004      	beq.n	8002a3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a10      	ldr	r2, [pc, #64]	; (8002a78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d10c      	bne.n	8002a54 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr
 8002a70:	40012c00 	.word	0x40012c00
 8002a74:	40000400 	.word	0x40000400
 8002a78:	40000800 	.word	0x40000800

08002a7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr

08002a8e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e03f      	b.n	8002b32 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d106      	bne.n	8002acc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f002 ff28 	bl	800591c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2224      	movs	r2, #36	; 0x24
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ae2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 fd27 	bl	8003538 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	691a      	ldr	r2, [r3, #16]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002af8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695a      	ldr	r2, [r3, #20]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b08a      	sub	sp, #40	; 0x28
 8002b3e:	af02      	add	r7, sp, #8
 8002b40:	60f8      	str	r0, [r7, #12]
 8002b42:	60b9      	str	r1, [r7, #8]
 8002b44:	603b      	str	r3, [r7, #0]
 8002b46:	4613      	mov	r3, r2
 8002b48:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b20      	cmp	r3, #32
 8002b58:	d17c      	bne.n	8002c54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d002      	beq.n	8002b66 <HAL_UART_Transmit+0x2c>
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e075      	b.n	8002c56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <HAL_UART_Transmit+0x3e>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e06e      	b.n	8002c56 <HAL_UART_Transmit+0x11c>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2221      	movs	r2, #33	; 0x21
 8002b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b8e:	f7fd fdb3 	bl	80006f8 <HAL_GetTick>
 8002b92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	88fa      	ldrh	r2, [r7, #6]
 8002b98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	88fa      	ldrh	r2, [r7, #6]
 8002b9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba8:	d108      	bne.n	8002bbc <HAL_UART_Transmit+0x82>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d104      	bne.n	8002bbc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	61bb      	str	r3, [r7, #24]
 8002bba:	e003      	b.n	8002bc4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002bcc:	e02a      	b.n	8002c24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	2180      	movs	r1, #128	; 0x80
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 fada 	bl	8003192 <UART_WaitOnFlagUntilTimeout>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e036      	b.n	8002c56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10b      	bne.n	8002c06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bfc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	3302      	adds	r3, #2
 8002c02:	61bb      	str	r3, [r7, #24]
 8002c04:	e007      	b.n	8002c16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	781a      	ldrb	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	3301      	adds	r3, #1
 8002c14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1cf      	bne.n	8002bce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2200      	movs	r2, #0
 8002c36:	2140      	movs	r1, #64	; 0x40
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 faaa 	bl	8003192 <UART_WaitOnFlagUntilTimeout>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e006      	b.n	8002c56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	e000      	b.n	8002c56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c54:	2302      	movs	r3, #2
  }
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3720      	adds	r7, #32
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b08a      	sub	sp, #40	; 0x28
 8002c62:	af02      	add	r7, sp, #8
 8002c64:	60f8      	str	r0, [r7, #12]
 8002c66:	60b9      	str	r1, [r7, #8]
 8002c68:	603b      	str	r3, [r7, #0]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b20      	cmp	r3, #32
 8002c7c:	f040 808c 	bne.w	8002d98 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <HAL_UART_Receive+0x2e>
 8002c86:	88fb      	ldrh	r3, [r7, #6]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e084      	b.n	8002d9a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_UART_Receive+0x40>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e07d      	b.n	8002d9a <HAL_UART_Receive+0x13c>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2222      	movs	r2, #34	; 0x22
 8002cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cba:	f7fd fd1d 	bl	80006f8 <HAL_GetTick>
 8002cbe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	88fa      	ldrh	r2, [r7, #6]
 8002cc4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	88fa      	ldrh	r2, [r7, #6]
 8002cca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd4:	d108      	bne.n	8002ce8 <HAL_UART_Receive+0x8a>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d104      	bne.n	8002ce8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	e003      	b.n	8002cf0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002cf8:	e043      	b.n	8002d82 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2200      	movs	r2, #0
 8002d02:	2120      	movs	r1, #32
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 fa44 	bl	8003192 <UART_WaitOnFlagUntilTimeout>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e042      	b.n	8002d9a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10c      	bne.n	8002d34 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	3302      	adds	r3, #2
 8002d30:	61bb      	str	r3, [r7, #24]
 8002d32:	e01f      	b.n	8002d74 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d3c:	d007      	beq.n	8002d4e <HAL_UART_Receive+0xf0>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10a      	bne.n	8002d5c <HAL_UART_Receive+0xfe>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d106      	bne.n	8002d5c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	701a      	strb	r2, [r3, #0]
 8002d5a:	e008      	b.n	8002d6e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	3301      	adds	r3, #1
 8002d72:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1b6      	bne.n	8002cfa <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	e000      	b.n	8002d9a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002d98:	2302      	movs	r3, #2
  }
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3720      	adds	r7, #32
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b084      	sub	sp, #16
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	4613      	mov	r3, r2
 8002dae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b20      	cmp	r3, #32
 8002dba:	d11d      	bne.n	8002df8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d002      	beq.n	8002dc8 <HAL_UART_Receive_IT+0x26>
 8002dc2:	88fb      	ldrh	r3, [r7, #6]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e016      	b.n	8002dfa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d101      	bne.n	8002dda <HAL_UART_Receive_IT+0x38>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e00f      	b.n	8002dfa <HAL_UART_Receive_IT+0x58>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	461a      	mov	r2, r3
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 fa19 	bl	8003226 <UART_Start_Receive_IT>
 8002df4:	4603      	mov	r3, r0
 8002df6:	e000      	b.n	8002dfa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002df8:	2302      	movs	r3, #2
  }
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08a      	sub	sp, #40	; 0x28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10d      	bne.n	8002e56 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d008      	beq.n	8002e56 <HAL_UART_IRQHandler+0x52>
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	f003 0320 	and.w	r3, r3, #32
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 fac9 	bl	80033e6 <UART_Receive_IT>
      return;
 8002e54:	e17b      	b.n	800314e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 80b1 	beq.w	8002fc0 <HAL_UART_IRQHandler+0x1bc>
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d105      	bne.n	8002e74 <HAL_UART_IRQHandler+0x70>
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 80a6 	beq.w	8002fc0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00a      	beq.n	8002e94 <HAL_UART_IRQHandler+0x90>
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d005      	beq.n	8002e94 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	f043 0201 	orr.w	r2, r3, #1
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	f003 0304 	and.w	r3, r3, #4
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_UART_IRQHandler+0xb0>
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	f043 0202 	orr.w	r2, r3, #2
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00a      	beq.n	8002ed4 <HAL_UART_IRQHandler+0xd0>
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	f043 0204 	orr.w	r2, r3, #4
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00f      	beq.n	8002efe <HAL_UART_IRQHandler+0xfa>
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	f003 0320 	and.w	r3, r3, #32
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d104      	bne.n	8002ef2 <HAL_UART_IRQHandler+0xee>
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d005      	beq.n	8002efe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	f043 0208 	orr.w	r2, r3, #8
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 811e 	beq.w	8003144 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	f003 0320 	and.w	r3, r3, #32
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d007      	beq.n	8002f22 <HAL_UART_IRQHandler+0x11e>
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	f003 0320 	and.w	r3, r3, #32
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 fa62 	bl	80033e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	bf14      	ite	ne
 8002f30:	2301      	movne	r3, #1
 8002f32:	2300      	moveq	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d102      	bne.n	8002f4a <HAL_UART_IRQHandler+0x146>
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d031      	beq.n	8002fae <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f9a4 	bl	8003298 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d023      	beq.n	8002fa6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695a      	ldr	r2, [r3, #20]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f6c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d013      	beq.n	8002f9e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7a:	4a76      	ldr	r2, [pc, #472]	; (8003154 <HAL_UART_IRQHandler+0x350>)
 8002f7c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fd fd4a 	bl	8000a1c <HAL_DMA_Abort_IT>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d016      	beq.n	8002fbc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f98:	4610      	mov	r0, r2
 8002f9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f9c:	e00e      	b.n	8002fbc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f8e3 	bl	800316a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fa4:	e00a      	b.n	8002fbc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f8df 	bl	800316a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fac:	e006      	b.n	8002fbc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f8db 	bl	800316a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002fba:	e0c3      	b.n	8003144 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fbc:	bf00      	nop
    return;
 8002fbe:	e0c1      	b.n	8003144 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	f040 80a1 	bne.w	800310c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	f003 0310 	and.w	r3, r3, #16
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 809b 	beq.w	800310c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 8095 	beq.w	800310c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003002:	2b00      	cmp	r3, #0
 8003004:	d04e      	beq.n	80030a4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003010:	8a3b      	ldrh	r3, [r7, #16]
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 8098 	beq.w	8003148 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800301c:	8a3a      	ldrh	r2, [r7, #16]
 800301e:	429a      	cmp	r2, r3
 8003020:	f080 8092 	bcs.w	8003148 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	8a3a      	ldrh	r2, [r7, #16]
 8003028:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	2b20      	cmp	r3, #32
 8003032:	d02b      	beq.n	800308c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003042:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0201 	bic.w	r2, r2, #1
 8003052:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695a      	ldr	r2, [r3, #20]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003062:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0210 	bic.w	r2, r2, #16
 8003080:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003086:	4618      	mov	r0, r3
 8003088:	f7fd fc8d 	bl	80009a6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003094:	b29b      	uxth	r3, r3
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	b29b      	uxth	r3, r3
 800309a:	4619      	mov	r1, r3
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f86d 	bl	800317c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80030a2:	e051      	b.n	8003148 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d047      	beq.n	800314c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80030bc:	8a7b      	ldrh	r3, [r7, #18]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d044      	beq.n	800314c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80030d0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695a      	ldr	r2, [r3, #20]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0201 	bic.w	r2, r2, #1
 80030e0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2220      	movs	r2, #32
 80030e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0210 	bic.w	r2, r2, #16
 80030fe:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003100:	8a7b      	ldrh	r3, [r7, #18]
 8003102:	4619      	mov	r1, r3
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f839 	bl	800317c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800310a:	e01f      	b.n	800314c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003112:	2b00      	cmp	r3, #0
 8003114:	d008      	beq.n	8003128 <HAL_UART_IRQHandler+0x324>
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f8f9 	bl	8003318 <UART_Transmit_IT>
    return;
 8003126:	e012      	b.n	800314e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00d      	beq.n	800314e <HAL_UART_IRQHandler+0x34a>
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f93a 	bl	80033b6 <UART_EndTransmit_IT>
    return;
 8003142:	e004      	b.n	800314e <HAL_UART_IRQHandler+0x34a>
    return;
 8003144:	bf00      	nop
 8003146:	e002      	b.n	800314e <HAL_UART_IRQHandler+0x34a>
      return;
 8003148:	bf00      	nop
 800314a:	e000      	b.n	800314e <HAL_UART_IRQHandler+0x34a>
      return;
 800314c:	bf00      	nop
  }
}
 800314e:	3728      	adds	r7, #40	; 0x28
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	080032f1 	.word	0x080032f1

08003158 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr

0800316a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr

0800317c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	460b      	mov	r3, r1
 8003186:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr

08003192 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b084      	sub	sp, #16
 8003196:	af00      	add	r7, sp, #0
 8003198:	60f8      	str	r0, [r7, #12]
 800319a:	60b9      	str	r1, [r7, #8]
 800319c:	603b      	str	r3, [r7, #0]
 800319e:	4613      	mov	r3, r2
 80031a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031a2:	e02c      	b.n	80031fe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031aa:	d028      	beq.n	80031fe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d007      	beq.n	80031c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80031b2:	f7fd faa1 	bl	80006f8 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d21d      	bcs.n	80031fe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031d0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0201 	bic.w	r2, r2, #1
 80031e0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2220      	movs	r2, #32
 80031ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e00f      	b.n	800321e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4013      	ands	r3, r2
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	429a      	cmp	r2, r3
 800320c:	bf0c      	ite	eq
 800320e:	2301      	moveq	r3, #1
 8003210:	2300      	movne	r3, #0
 8003212:	b2db      	uxtb	r3, r3
 8003214:	461a      	mov	r2, r3
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	429a      	cmp	r2, r3
 800321a:	d0c3      	beq.n	80031a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003226:	b480      	push	{r7}
 8003228:	b085      	sub	sp, #20
 800322a:	af00      	add	r7, sp, #0
 800322c:	60f8      	str	r0, [r7, #12]
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	4613      	mov	r3, r2
 8003232:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	88fa      	ldrh	r2, [r7, #6]
 800323e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	88fa      	ldrh	r2, [r7, #6]
 8003244:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2222      	movs	r2, #34	; 0x22
 8003250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800326a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0201 	orr.w	r2, r2, #1
 800327a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0220 	orr.w	r2, r2, #32
 800328a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr

08003298 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80032ae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695a      	ldr	r2, [r3, #20]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0201 	bic.w	r2, r2, #1
 80032be:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d107      	bne.n	80032d8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0210 	bic.w	r2, r2, #16
 80032d6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2220      	movs	r2, #32
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr

080032f0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f7ff ff2d 	bl	800316a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003310:	bf00      	nop
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b21      	cmp	r3, #33	; 0x21
 800332a:	d13e      	bne.n	80033aa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003334:	d114      	bne.n	8003360 <UART_Transmit_IT+0x48>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d110      	bne.n	8003360 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	461a      	mov	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003352:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	1c9a      	adds	r2, r3, #2
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	621a      	str	r2, [r3, #32]
 800335e:	e008      	b.n	8003372 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	1c59      	adds	r1, r3, #1
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6211      	str	r1, [r2, #32]
 800336a:	781a      	ldrb	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003376:	b29b      	uxth	r3, r3
 8003378:	3b01      	subs	r3, #1
 800337a:	b29b      	uxth	r3, r3
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	4619      	mov	r1, r3
 8003380:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10f      	bne.n	80033a6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003394:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68da      	ldr	r2, [r3, #12]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	e000      	b.n	80033ac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80033aa:	2302      	movs	r3, #2
  }
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bc80      	pop	{r7}
 80033b4:	4770      	bx	lr

080033b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b082      	sub	sp, #8
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2220      	movs	r2, #32
 80033d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff febe 	bl	8003158 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b086      	sub	sp, #24
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b22      	cmp	r3, #34	; 0x22
 80033f8:	f040 8099 	bne.w	800352e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003404:	d117      	bne.n	8003436 <UART_Receive_IT+0x50>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d113      	bne.n	8003436 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003416:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	b29b      	uxth	r3, r3
 8003420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003424:	b29a      	uxth	r2, r3
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342e:	1c9a      	adds	r2, r3, #2
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	629a      	str	r2, [r3, #40]	; 0x28
 8003434:	e026      	b.n	8003484 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800343c:	2300      	movs	r3, #0
 800343e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003448:	d007      	beq.n	800345a <UART_Receive_IT+0x74>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10a      	bne.n	8003468 <UART_Receive_IT+0x82>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d106      	bne.n	8003468 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	b2da      	uxtb	r2, r3
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	701a      	strb	r2, [r3, #0]
 8003466:	e008      	b.n	800347a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003474:	b2da      	uxtb	r2, r3
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003488:	b29b      	uxth	r3, r3
 800348a:	3b01      	subs	r3, #1
 800348c:	b29b      	uxth	r3, r3
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	4619      	mov	r1, r3
 8003492:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003494:	2b00      	cmp	r3, #0
 8003496:	d148      	bne.n	800352a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0220 	bic.w	r2, r2, #32
 80034a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695a      	ldr	r2, [r3, #20]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0201 	bic.w	r2, r2, #1
 80034c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d123      	bne.n	8003520 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0210 	bic.w	r2, r2, #16
 80034ec:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0310 	and.w	r3, r3, #16
 80034f8:	2b10      	cmp	r3, #16
 80034fa:	d10a      	bne.n	8003512 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034fc:	2300      	movs	r3, #0
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003516:	4619      	mov	r1, r3
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff fe2f 	bl	800317c <HAL_UARTEx_RxEventCallback>
 800351e:	e002      	b.n	8003526 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f8db 	bl	80036dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003526:	2300      	movs	r3, #0
 8003528:	e002      	b.n	8003530 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800352a:	2300      	movs	r3, #0
 800352c:	e000      	b.n	8003530 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800352e:	2302      	movs	r3, #2
  }
}
 8003530:	4618      	mov	r0, r3
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	4313      	orrs	r3, r2
 8003566:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003572:	f023 030c 	bic.w	r3, r3, #12
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6812      	ldr	r2, [r2, #0]
 800357a:	68b9      	ldr	r1, [r7, #8]
 800357c:	430b      	orrs	r3, r1
 800357e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699a      	ldr	r2, [r3, #24]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a2c      	ldr	r2, [pc, #176]	; (800364c <UART_SetConfig+0x114>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d103      	bne.n	80035a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80035a0:	f7fe fa66 	bl	8001a70 <HAL_RCC_GetPCLK2Freq>
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	e002      	b.n	80035ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80035a8:	f7fe fa4e 	bl	8001a48 <HAL_RCC_GetPCLK1Freq>
 80035ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	4613      	mov	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	009a      	lsls	r2, r3, #2
 80035b8:	441a      	add	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c4:	4a22      	ldr	r2, [pc, #136]	; (8003650 <UART_SetConfig+0x118>)
 80035c6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ca:	095b      	lsrs	r3, r3, #5
 80035cc:	0119      	lsls	r1, r3, #4
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	4613      	mov	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	009a      	lsls	r2, r3, #2
 80035d8:	441a      	add	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80035e4:	4b1a      	ldr	r3, [pc, #104]	; (8003650 <UART_SetConfig+0x118>)
 80035e6:	fba3 0302 	umull	r0, r3, r3, r2
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	2064      	movs	r0, #100	; 0x64
 80035ee:	fb00 f303 	mul.w	r3, r0, r3
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	3332      	adds	r3, #50	; 0x32
 80035f8:	4a15      	ldr	r2, [pc, #84]	; (8003650 <UART_SetConfig+0x118>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	095b      	lsrs	r3, r3, #5
 8003600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003604:	4419      	add	r1, r3
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	009a      	lsls	r2, r3, #2
 8003610:	441a      	add	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	fbb2 f2f3 	udiv	r2, r2, r3
 800361c:	4b0c      	ldr	r3, [pc, #48]	; (8003650 <UART_SetConfig+0x118>)
 800361e:	fba3 0302 	umull	r0, r3, r3, r2
 8003622:	095b      	lsrs	r3, r3, #5
 8003624:	2064      	movs	r0, #100	; 0x64
 8003626:	fb00 f303 	mul.w	r3, r0, r3
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	3332      	adds	r3, #50	; 0x32
 8003630:	4a07      	ldr	r2, [pc, #28]	; (8003650 <UART_SetConfig+0x118>)
 8003632:	fba2 2303 	umull	r2, r3, r2, r3
 8003636:	095b      	lsrs	r3, r3, #5
 8003638:	f003 020f 	and.w	r2, r3, #15
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	440a      	add	r2, r1
 8003642:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003644:	bf00      	nop
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40013800 	.word	0x40013800
 8003650:	51eb851f 	.word	0x51eb851f

08003654 <App_RESET_Button_Read>:
extern float movements_buttons_mode_patterns[576];
extern float movements_special_tricks_swim[104];
extern float movements_kick_pose[8];

//Reset button
uint8_t App_RESET_Button_Read(){
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 800365a:	2300      	movs	r3, #0
 800365c:	71fb      	strb	r3, [r7, #7]
	while(i != 10){
 800365e:	e00b      	b.n	8003678 <App_RESET_Button_Read+0x24>
		if(HAL_GPIO_ReadPin(BUTTON_SET_RESET_GPIO_Port, BUTTON_SET_RESET_Pin) == GPIO_PIN_SET){
 8003660:	2108      	movs	r1, #8
 8003662:	4809      	ldr	r0, [pc, #36]	; (8003688 <App_RESET_Button_Read+0x34>)
 8003664:	f7fd fdd4 	bl	8001210 <HAL_GPIO_ReadPin>
 8003668:	4603      	mov	r3, r0
 800366a:	2b01      	cmp	r3, #1
 800366c:	d101      	bne.n	8003672 <App_RESET_Button_Read+0x1e>
			return 0;
 800366e:	2300      	movs	r3, #0
 8003670:	e006      	b.n	8003680 <App_RESET_Button_Read+0x2c>
		}
		i++;
 8003672:	79fb      	ldrb	r3, [r7, #7]
 8003674:	3301      	adds	r3, #1
 8003676:	71fb      	strb	r3, [r7, #7]
	while(i != 10){
 8003678:	79fb      	ldrb	r3, [r7, #7]
 800367a:	2b0a      	cmp	r3, #10
 800367c:	d1f0      	bne.n	8003660 <App_RESET_Button_Read+0xc>
	}
	return 1;
 800367e:	2301      	movs	r3, #1
}
 8003680:	4618      	mov	r0, r3
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40010800 	.word	0x40010800

0800368c <App_Action_Cancel>:

//Action cancel
void App_Action_Cancel(){
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
	app_action = 0;
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <App_Action_Cancel+0x20>)
 8003692:	2200      	movs	r2, #0
 8003694:	701a      	strb	r2, [r3, #0]
	app_movement_start = 1;
 8003696:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <App_Action_Cancel+0x24>)
 8003698:	2201      	movs	r2, #1
 800369a:	701a      	strb	r2, [r3, #0]
	app_return_to_stay = APP_STAY_FROM_BTNS_DRIVE_SETTINGS;
 800369c:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <App_Action_Cancel+0x28>)
 800369e:	2201      	movs	r2, #1
 80036a0:	701a      	strb	r2, [r3, #0]
}
 80036a2:	bf00      	nop
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bc80      	pop	{r7}
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	20000ce0 	.word	0x20000ce0
 80036b0:	20000005 	.word	0x20000005
 80036b4:	20000ce2 	.word	0x20000ce2

080036b8 <HAL_TIM_PeriodElapsedCallback>:

//Interrupts
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM1){
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a04      	ldr	r2, [pc, #16]	; (80036d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d101      	bne.n	80036ce <HAL_TIM_PeriodElapsedCallback+0x16>
		App_Action_Cancel();
 80036ca:	f7ff ffdf 	bl	800368c <App_Action_Cancel>
	}
}
 80036ce:	bf00      	nop
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40012c00 	.word	0x40012c00

080036dc <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
	Bluetooth_Read_Message();
 80036e4:	f000 fad6 	bl	8003c94 <Bluetooth_Read_Message>
}
 80036e8:	bf00      	nop
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_SET_RESET_Pin){
 80036fa:	88fb      	ldrh	r3, [r7, #6]
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d109      	bne.n	8003714 <HAL_GPIO_EXTI_Callback+0x24>
		if(HAL_GPIO_ReadPin(BUTTON_SET_RESET_GPIO_Port, BUTTON_SET_RESET_Pin) == GPIO_PIN_RESET){
 8003700:	2108      	movs	r1, #8
 8003702:	480b      	ldr	r0, [pc, #44]	; (8003730 <HAL_GPIO_EXTI_Callback+0x40>)
 8003704:	f7fd fd84 	bl	8001210 <HAL_GPIO_ReadPin>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d102      	bne.n	8003714 <HAL_GPIO_EXTI_Callback+0x24>
			app_action_button_reset = 1;
 800370e:	4b09      	ldr	r3, [pc, #36]	; (8003734 <HAL_GPIO_EXTI_Callback+0x44>)
 8003710:	2201      	movs	r2, #1
 8003712:	701a      	strb	r2, [r3, #0]
		}
	}
	if(GPIO_Pin == BT_STAT_Pin){
 8003714:	88fb      	ldrh	r3, [r7, #6]
 8003716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800371a:	d104      	bne.n	8003726 <HAL_GPIO_EXTI_Callback+0x36>
		if(HAL_GPIO_ReadPin(BT_STAT_GPIO_Port, BT_STAT_Pin) == GPIO_PIN_RESET){
 800371c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003720:	4803      	ldr	r0, [pc, #12]	; (8003730 <HAL_GPIO_EXTI_Callback+0x40>)
 8003722:	f7fd fd75 	bl	8001210 <HAL_GPIO_ReadPin>
			//EXT
		}
	}
}
 8003726:	bf00      	nop
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40010800 	.word	0x40010800
 8003734:	20000cea 	.word	0x20000cea

08003738 <App_SysTick_Call>:
void App_SysTick_Call(){
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
	if(app_action != 12){//If not in settings page
 800373c:	4b09      	ldr	r3, [pc, #36]	; (8003764 <App_SysTick_Call+0x2c>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	2b0c      	cmp	r3, #12
 8003742:	d006      	beq.n	8003752 <App_SysTick_Call+0x1a>
		Led_Breath(app_action, LED_NOT_IN_SETTINGS);
 8003744:	4b07      	ldr	r3, [pc, #28]	; (8003764 <App_SysTick_Call+0x2c>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2101      	movs	r1, #1
 800374a:	4618      	mov	r0, r3
 800374c:	f000 fde2 	bl	8004314 <Led_Breath>
	}else{
		Led_Breath(app_action, LED_IN_SETTINGS);
	}
}
 8003750:	e005      	b.n	800375e <App_SysTick_Call+0x26>
		Led_Breath(app_action, LED_IN_SETTINGS);
 8003752:	4b04      	ldr	r3, [pc, #16]	; (8003764 <App_SysTick_Call+0x2c>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2100      	movs	r1, #0
 8003758:	4618      	mov	r0, r3
 800375a:	f000 fddb 	bl	8004314 <Led_Breath>
}
 800375e:	bf00      	nop
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	20000ce0 	.word	0x20000ce0

08003768 <App_Loop_Settings>:

//Loops
void App_Loop_Settings(){
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
	//Bluetooth name and password change
	if(app_action_name_and_password_changed == 1){
 800376c:	4b15      	ldr	r3, [pc, #84]	; (80037c4 <App_Loop_Settings+0x5c>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d10a      	bne.n	800378a <App_Loop_Settings+0x22>
		Settings_Bluetooth_Change(&settings[22], &settings[18]);//Change name and password
 8003774:	4914      	ldr	r1, [pc, #80]	; (80037c8 <App_Loop_Settings+0x60>)
 8003776:	4815      	ldr	r0, [pc, #84]	; (80037cc <App_Loop_Settings+0x64>)
 8003778:	f001 fb38 	bl	8004dec <Settings_Bluetooth_Change>
		app_action_name_and_password_changed = 0;
 800377c:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <App_Loop_Settings+0x5c>)
 800377e:	2200      	movs	r2, #0
 8003780:	701a      	strb	r2, [r3, #0]
		App_Action_Cancel();
 8003782:	f7ff ff83 	bl	800368c <App_Action_Cancel>
		Bluetooth_UART_Listen();
 8003786:	f000 fa13 	bl	8003bb0 <Bluetooth_UART_Listen>
	}
	//Settings reset by button press
	if(app_action_button_reset == 1){
 800378a:	4b11      	ldr	r3, [pc, #68]	; (80037d0 <App_Loop_Settings+0x68>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d115      	bne.n	80037be <App_Loop_Settings+0x56>
		if(App_RESET_Button_Read() == 1){
 8003792:	f7ff ff5f 	bl	8003654 <App_RESET_Button_Read>
 8003796:	4603      	mov	r3, r0
 8003798:	2b01      	cmp	r3, #1
 800379a:	d10d      	bne.n	80037b8 <App_Loop_Settings+0x50>
			Led_Off();
 800379c:	f000 fdaa 	bl	80042f4 <Led_Off>
			Settings_Reset();
 80037a0:	f001 fbd8 	bl	8004f54 <Settings_Reset>
			Settings_Read(&servo_calibration_values[0], &led_active);
 80037a4:	490b      	ldr	r1, [pc, #44]	; (80037d4 <App_Loop_Settings+0x6c>)
 80037a6:	480c      	ldr	r0, [pc, #48]	; (80037d8 <App_Loop_Settings+0x70>)
 80037a8:	f001 fc36 	bl	8005018 <Settings_Read>
			Led_On();
 80037ac:	f000 fd96 	bl	80042dc <Led_On>
			App_Action_Cancel();
 80037b0:	f7ff ff6c 	bl	800368c <App_Action_Cancel>
			Bluetooth_UART_Listen();
 80037b4:	f000 f9fc 	bl	8003bb0 <Bluetooth_UART_Listen>
		}
		app_action_button_reset = 0;
 80037b8:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <App_Loop_Settings+0x68>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	701a      	strb	r2, [r3, #0]
	}
}
 80037be:	bf00      	nop
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	20000ce1 	.word	0x20000ce1
 80037c8:	20000c42 	.word	0x20000c42
 80037cc:	20000c46 	.word	0x20000c46
 80037d0:	20000cea 	.word	0x20000cea
 80037d4:	20000006 	.word	0x20000006
 80037d8:	20000f0c 	.word	0x20000f0c

080037dc <App_Loop_Buttons_Mode_Actions>:
void App_Loop_Buttons_Mode_Actions(){
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af02      	add	r7, sp, #8
	if((app_action >= 1)&&(app_action <= 6)){
 80037e2:	4b57      	ldr	r3, [pc, #348]	; (8003940 <App_Loop_Buttons_Mode_Actions+0x164>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 80a7 	beq.w	800393a <App_Loop_Buttons_Mode_Actions+0x15e>
 80037ec:	4b54      	ldr	r3, [pc, #336]	; (8003940 <App_Loop_Buttons_Mode_Actions+0x164>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	2b06      	cmp	r3, #6
 80037f2:	f200 80a2 	bhi.w	800393a <App_Loop_Buttons_Mode_Actions+0x15e>
		if(app_movement_start == 1){
 80037f6:	4b53      	ldr	r3, [pc, #332]	; (8003944 <App_Loop_Buttons_Mode_Actions+0x168>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d150      	bne.n	80038a0 <App_Loop_Buttons_Mode_Actions+0xc4>
			app_movement_start = 0;
 80037fe:	4b51      	ldr	r3, [pc, #324]	; (8003944 <App_Loop_Buttons_Mode_Actions+0x168>)
 8003800:	2200      	movs	r2, #0
 8003802:	701a      	strb	r2, [r3, #0]
			if(app_button_mode_motion_speed == 1){
 8003804:	4b50      	ldr	r3, [pc, #320]	; (8003948 <App_Loop_Buttons_Mode_Actions+0x16c>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d115      	bne.n	8003838 <App_Loop_Buttons_Mode_Actions+0x5c>
				Servo_Move(movements_standby_pose, &movements_buttons_mode_patterns[((app_action-1)*96)+(((app_button_mode_motion_speed-1)*32))], MOV_BTNS_MODE_SAMPLES_SP1, MOV_BTNS_MODE_DELAY_SP1, SERVO_NOINT);
 800380c:	4b4c      	ldr	r3, [pc, #304]	; (8003940 <App_Loop_Buttons_Mode_Actions+0x164>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	1e5a      	subs	r2, r3, #1
 8003812:	4613      	mov	r3, r2
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	441a      	add	r2, r3
 8003818:	4b4b      	ldr	r3, [pc, #300]	; (8003948 <App_Loop_Buttons_Mode_Actions+0x16c>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	3b01      	subs	r3, #1
 800381e:	4413      	add	r3, r2
 8003820:	015b      	lsls	r3, r3, #5
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4a49      	ldr	r2, [pc, #292]	; (800394c <App_Loop_Buttons_Mode_Actions+0x170>)
 8003826:	1899      	adds	r1, r3, r2
 8003828:	2301      	movs	r3, #1
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	2303      	movs	r3, #3
 800382e:	221e      	movs	r2, #30
 8003830:	4847      	ldr	r0, [pc, #284]	; (8003950 <App_Loop_Buttons_Mode_Actions+0x174>)
 8003832:	f000 ffb3 	bl	800479c <Servo_Move>
			}else if(app_button_mode_motion_speed == 3){
				Servo_Play_Pattern(&movements_buttons_mode_patterns[((app_action-1)*96)+(((app_button_mode_motion_speed-1)*32))], 4, MOV_BTNS_MODE_SAMPLES_SP3, MOV_BTNS_MODE_DELAY_SP3, SERVO_INT);
			}
		}
	}
}
 8003836:	e080      	b.n	800393a <App_Loop_Buttons_Mode_Actions+0x15e>
			}else if(app_button_mode_motion_speed == 2){
 8003838:	4b43      	ldr	r3, [pc, #268]	; (8003948 <App_Loop_Buttons_Mode_Actions+0x16c>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b02      	cmp	r3, #2
 800383e:	d115      	bne.n	800386c <App_Loop_Buttons_Mode_Actions+0x90>
				Servo_Move(movements_standby_pose, &movements_buttons_mode_patterns[((app_action-1)*96)+(((app_button_mode_motion_speed-1)*32))], MOV_BTNS_MODE_SAMPLES_SP2, MOV_BTNS_MODE_DELAY_SP2, SERVO_NOINT);
 8003840:	4b3f      	ldr	r3, [pc, #252]	; (8003940 <App_Loop_Buttons_Mode_Actions+0x164>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	1e5a      	subs	r2, r3, #1
 8003846:	4613      	mov	r3, r2
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	441a      	add	r2, r3
 800384c:	4b3e      	ldr	r3, [pc, #248]	; (8003948 <App_Loop_Buttons_Mode_Actions+0x16c>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	3b01      	subs	r3, #1
 8003852:	4413      	add	r3, r2
 8003854:	015b      	lsls	r3, r3, #5
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4a3c      	ldr	r2, [pc, #240]	; (800394c <App_Loop_Buttons_Mode_Actions+0x170>)
 800385a:	1899      	adds	r1, r3, r2
 800385c:	2301      	movs	r3, #1
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	2303      	movs	r3, #3
 8003862:	221e      	movs	r2, #30
 8003864:	483a      	ldr	r0, [pc, #232]	; (8003950 <App_Loop_Buttons_Mode_Actions+0x174>)
 8003866:	f000 ff99 	bl	800479c <Servo_Move>
}
 800386a:	e066      	b.n	800393a <App_Loop_Buttons_Mode_Actions+0x15e>
			}else if(app_button_mode_motion_speed == 3){
 800386c:	4b36      	ldr	r3, [pc, #216]	; (8003948 <App_Loop_Buttons_Mode_Actions+0x16c>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b03      	cmp	r3, #3
 8003872:	d162      	bne.n	800393a <App_Loop_Buttons_Mode_Actions+0x15e>
				Servo_Move(movements_standby_pose, &movements_buttons_mode_patterns[((app_action-1)*96)+(((app_button_mode_motion_speed-1)*32))], MOV_BTNS_MODE_SAMPLES_SP3, MOV_BTNS_MODE_DELAY_SP3, SERVO_NOINT);
 8003874:	4b32      	ldr	r3, [pc, #200]	; (8003940 <App_Loop_Buttons_Mode_Actions+0x164>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	1e5a      	subs	r2, r3, #1
 800387a:	4613      	mov	r3, r2
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	441a      	add	r2, r3
 8003880:	4b31      	ldr	r3, [pc, #196]	; (8003948 <App_Loop_Buttons_Mode_Actions+0x16c>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	3b01      	subs	r3, #1
 8003886:	4413      	add	r3, r2
 8003888:	015b      	lsls	r3, r3, #5
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4a2f      	ldr	r2, [pc, #188]	; (800394c <App_Loop_Buttons_Mode_Actions+0x170>)
 800388e:	1899      	adds	r1, r3, r2
 8003890:	2301      	movs	r3, #1
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	2303      	movs	r3, #3
 8003896:	2220      	movs	r2, #32
 8003898:	482d      	ldr	r0, [pc, #180]	; (8003950 <App_Loop_Buttons_Mode_Actions+0x174>)
 800389a:	f000 ff7f 	bl	800479c <Servo_Move>
}
 800389e:	e04c      	b.n	800393a <App_Loop_Buttons_Mode_Actions+0x15e>
			if(app_button_mode_motion_speed == 1){
 80038a0:	4b29      	ldr	r3, [pc, #164]	; (8003948 <App_Loop_Buttons_Mode_Actions+0x16c>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d115      	bne.n	80038d4 <App_Loop_Buttons_Mode_Actions+0xf8>
				Servo_Play_Pattern(&movements_buttons_mode_patterns[((app_action-1)*96)+(((app_button_mode_motion_speed-1)*32))], 4, MOV_BTNS_MODE_SAMPLES_SP1, MOV_BTNS_MODE_DELAY_SP1, SERVO_INT);
 80038a8:	4b25      	ldr	r3, [pc, #148]	; (8003940 <App_Loop_Buttons_Mode_Actions+0x164>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	1e5a      	subs	r2, r3, #1
 80038ae:	4613      	mov	r3, r2
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	441a      	add	r2, r3
 80038b4:	4b24      	ldr	r3, [pc, #144]	; (8003948 <App_Loop_Buttons_Mode_Actions+0x16c>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	3b01      	subs	r3, #1
 80038ba:	4413      	add	r3, r2
 80038bc:	015b      	lsls	r3, r3, #5
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4a22      	ldr	r2, [pc, #136]	; (800394c <App_Loop_Buttons_Mode_Actions+0x170>)
 80038c2:	1898      	adds	r0, r3, r2
 80038c4:	2300      	movs	r3, #0
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	2303      	movs	r3, #3
 80038ca:	221e      	movs	r2, #30
 80038cc:	2104      	movs	r1, #4
 80038ce:	f000 ffd3 	bl	8004878 <Servo_Play_Pattern>
}
 80038d2:	e032      	b.n	800393a <App_Loop_Buttons_Mode_Actions+0x15e>
			}else if(app_button_mode_motion_speed == 2){
 80038d4:	4b1c      	ldr	r3, [pc, #112]	; (8003948 <App_Loop_Buttons_Mode_Actions+0x16c>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d115      	bne.n	8003908 <App_Loop_Buttons_Mode_Actions+0x12c>
				Servo_Play_Pattern(&movements_buttons_mode_patterns[((app_action-1)*96)+(((app_button_mode_motion_speed-1)*32))], 4, MOV_BTNS_MODE_SAMPLES_SP2, MOV_BTNS_MODE_DELAY_SP2, SERVO_INT);
 80038dc:	4b18      	ldr	r3, [pc, #96]	; (8003940 <App_Loop_Buttons_Mode_Actions+0x164>)
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	1e5a      	subs	r2, r3, #1
 80038e2:	4613      	mov	r3, r2
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	441a      	add	r2, r3
 80038e8:	4b17      	ldr	r3, [pc, #92]	; (8003948 <App_Loop_Buttons_Mode_Actions+0x16c>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	3b01      	subs	r3, #1
 80038ee:	4413      	add	r3, r2
 80038f0:	015b      	lsls	r3, r3, #5
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4a15      	ldr	r2, [pc, #84]	; (800394c <App_Loop_Buttons_Mode_Actions+0x170>)
 80038f6:	1898      	adds	r0, r3, r2
 80038f8:	2300      	movs	r3, #0
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	2303      	movs	r3, #3
 80038fe:	221e      	movs	r2, #30
 8003900:	2104      	movs	r1, #4
 8003902:	f000 ffb9 	bl	8004878 <Servo_Play_Pattern>
}
 8003906:	e018      	b.n	800393a <App_Loop_Buttons_Mode_Actions+0x15e>
			}else if(app_button_mode_motion_speed == 3){
 8003908:	4b0f      	ldr	r3, [pc, #60]	; (8003948 <App_Loop_Buttons_Mode_Actions+0x16c>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b03      	cmp	r3, #3
 800390e:	d114      	bne.n	800393a <App_Loop_Buttons_Mode_Actions+0x15e>
				Servo_Play_Pattern(&movements_buttons_mode_patterns[((app_action-1)*96)+(((app_button_mode_motion_speed-1)*32))], 4, MOV_BTNS_MODE_SAMPLES_SP3, MOV_BTNS_MODE_DELAY_SP3, SERVO_INT);
 8003910:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <App_Loop_Buttons_Mode_Actions+0x164>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	1e5a      	subs	r2, r3, #1
 8003916:	4613      	mov	r3, r2
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	441a      	add	r2, r3
 800391c:	4b0a      	ldr	r3, [pc, #40]	; (8003948 <App_Loop_Buttons_Mode_Actions+0x16c>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	3b01      	subs	r3, #1
 8003922:	4413      	add	r3, r2
 8003924:	015b      	lsls	r3, r3, #5
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4a08      	ldr	r2, [pc, #32]	; (800394c <App_Loop_Buttons_Mode_Actions+0x170>)
 800392a:	1898      	adds	r0, r3, r2
 800392c:	2300      	movs	r3, #0
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	2303      	movs	r3, #3
 8003932:	2220      	movs	r2, #32
 8003934:	2104      	movs	r1, #4
 8003936:	f000 ff9f 	bl	8004878 <Servo_Play_Pattern>
}
 800393a:	bf00      	nop
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20000ce0 	.word	0x20000ce0
 8003944:	20000005 	.word	0x20000005
 8003948:	20000ce3 	.word	0x20000ce3
 800394c:	20000048 	.word	0x20000048
 8003950:	20000008 	.word	0x20000008

08003954 <App_Loop_Kick>:
void App_Loop_Kick(){
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af02      	add	r7, sp, #8
	if(app_action == 7){
 800395a:	4b12      	ldr	r3, [pc, #72]	; (80039a4 <App_Loop_Kick+0x50>)
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	2b07      	cmp	r3, #7
 8003960:	d11d      	bne.n	800399e <App_Loop_Kick+0x4a>
		if(app_movement_start == 1){
 8003962:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <App_Loop_Kick+0x54>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d111      	bne.n	800398e <App_Loop_Kick+0x3a>
			app_movement_start = 0;
 800396a:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <App_Loop_Kick+0x54>)
 800396c:	2200      	movs	r2, #0
 800396e:	701a      	strb	r2, [r3, #0]
			Servo_Move(movements_standby_pose, movements_kick_pose, MOV_KICK_ENTER_EXIT_SAMPLES, MOV_KICK_ENTER_EXIT_DELAY, SERVO_INT);
 8003970:	2300      	movs	r3, #0
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	2303      	movs	r3, #3
 8003976:	2228      	movs	r2, #40	; 0x28
 8003978:	490c      	ldr	r1, [pc, #48]	; (80039ac <App_Loop_Kick+0x58>)
 800397a:	480d      	ldr	r0, [pc, #52]	; (80039b0 <App_Loop_Kick+0x5c>)
 800397c:	f000 ff0e 	bl	800479c <Servo_Move>
			if(app_action == 7){
 8003980:	4b08      	ldr	r3, [pc, #32]	; (80039a4 <App_Loop_Kick+0x50>)
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b07      	cmp	r3, #7
 8003986:	d102      	bne.n	800398e <App_Loop_Kick+0x3a>
				app_return_to_stay = APP_STAY_FROM_KICK;
 8003988:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <App_Loop_Kick+0x60>)
 800398a:	2205      	movs	r2, #5
 800398c:	701a      	strb	r2, [r3, #0]
			}
		}
		Servo_Set_Kick(app_kick_direction, app_kick_strength, SERVO_KICK_NO_KICK);
 800398e:	4b0a      	ldr	r3, [pc, #40]	; (80039b8 <App_Loop_Kick+0x64>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	4a0a      	ldr	r2, [pc, #40]	; (80039bc <App_Loop_Kick+0x68>)
 8003994:	7811      	ldrb	r1, [r2, #0]
 8003996:	2200      	movs	r2, #0
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fff7 	bl	800498c <Servo_Set_Kick>
	}
}
 800399e:	bf00      	nop
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	20000ce0 	.word	0x20000ce0
 80039a8:	20000005 	.word	0x20000005
 80039ac:	20000b68 	.word	0x20000b68
 80039b0:	20000008 	.word	0x20000008
 80039b4:	20000ce2 	.word	0x20000ce2
 80039b8:	20000ce4 	.word	0x20000ce4
 80039bc:	20000ce5 	.word	0x20000ce5

080039c0 <App_Loop_Drive>:
void App_Loop_Drive(){
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
	if(app_action == 8){//Drive
 80039c4:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <App_Loop_Drive+0x20>)
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	d107      	bne.n	80039dc <App_Loop_Drive+0x1c>
		Servo_Drive(app_driving_direction, app_driving_speed);
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <App_Loop_Drive+0x24>)
 80039ce:	881b      	ldrh	r3, [r3, #0]
 80039d0:	4a05      	ldr	r2, [pc, #20]	; (80039e8 <App_Loop_Drive+0x28>)
 80039d2:	8812      	ldrh	r2, [r2, #0]
 80039d4:	4611      	mov	r1, r2
 80039d6:	4618      	mov	r0, r3
 80039d8:	f001 f84a 	bl	8004a70 <Servo_Drive>
	}
}
 80039dc:	bf00      	nop
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	20000ce0 	.word	0x20000ce0
 80039e4:	20000ce6 	.word	0x20000ce6
 80039e8:	20000ce8 	.word	0x20000ce8

080039ec <App_Loop_Special_Tricks>:
void App_Loop_Special_Tricks(){
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af02      	add	r7, sp, #8
	if(app_action == 9){//Swimming
 80039f2:	4b19      	ldr	r3, [pc, #100]	; (8003a58 <App_Loop_Special_Tricks+0x6c>)
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	2b09      	cmp	r3, #9
 80039f8:	d12b      	bne.n	8003a52 <App_Loop_Special_Tricks+0x66>
		if(app_movement_start == 1){
 80039fa:	4b18      	ldr	r3, [pc, #96]	; (8003a5c <App_Loop_Special_Tricks+0x70>)
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d11f      	bne.n	8003a42 <App_Loop_Special_Tricks+0x56>
			app_movement_start = 0;
 8003a02:	4b16      	ldr	r3, [pc, #88]	; (8003a5c <App_Loop_Special_Tricks+0x70>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	701a      	strb	r2, [r3, #0]
			Servo_Play_Trick_Pattern(movements_standby_pose, movements_special_tricks_swim, 9, MOV_SPC_TRICKS_SWIM_ENTER_EXIT_SAMPLES, MOV_SPC_TRICKS_SWIM_ENTER_EXIT_DELAY, SERVO_INT);
 8003a08:	2300      	movs	r3, #0
 8003a0a:	9301      	str	r3, [sp, #4]
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	2328      	movs	r3, #40	; 0x28
 8003a12:	2209      	movs	r2, #9
 8003a14:	4912      	ldr	r1, [pc, #72]	; (8003a60 <App_Loop_Special_Tricks+0x74>)
 8003a16:	4813      	ldr	r0, [pc, #76]	; (8003a64 <App_Loop_Special_Tricks+0x78>)
 8003a18:	f000 ff76 	bl	8004908 <Servo_Play_Trick_Pattern>
			HAL_Delay(70);
 8003a1c:	2046      	movs	r0, #70	; 0x46
 8003a1e:	f7fc fe75 	bl	800070c <HAL_Delay>
			Servo_Move(&movements_special_tricks_swim[32], &movements_special_tricks_swim[40], MOV_SPC_TRICKS_SWIM_ENTER_EXIT_SAMPLES, MOV_SPC_TRICKS_SWIM_ENTER_EXIT_DELAY, SERVO_INT);
 8003a22:	2300      	movs	r3, #0
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	2302      	movs	r3, #2
 8003a28:	2228      	movs	r2, #40	; 0x28
 8003a2a:	490f      	ldr	r1, [pc, #60]	; (8003a68 <App_Loop_Special_Tricks+0x7c>)
 8003a2c:	480f      	ldr	r0, [pc, #60]	; (8003a6c <App_Loop_Special_Tricks+0x80>)
 8003a2e:	f000 feb5 	bl	800479c <Servo_Move>
			if(app_action == 9){
 8003a32:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <App_Loop_Special_Tricks+0x6c>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	2b09      	cmp	r3, #9
 8003a38:	d10b      	bne.n	8003a52 <App_Loop_Special_Tricks+0x66>
				app_return_to_stay = APP_STAY_FROM_SWIM;
 8003a3a:	4b0d      	ldr	r3, [pc, #52]	; (8003a70 <App_Loop_Special_Tricks+0x84>)
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	701a      	strb	r2, [r3, #0]
		}
		else{
			Servo_Play_Pattern(&movements_special_tricks_swim[40], 8, MOV_SPC_TRICKS_SWIM_PLAY_SAMPLES, MOV_SPC_TRICKS_SWIM_PLAY_DELAY, SERVO_INT);
		}
	}
}
 8003a40:	e007      	b.n	8003a52 <App_Loop_Special_Tricks+0x66>
			Servo_Play_Pattern(&movements_special_tricks_swim[40], 8, MOV_SPC_TRICKS_SWIM_PLAY_SAMPLES, MOV_SPC_TRICKS_SWIM_PLAY_DELAY, SERVO_INT);
 8003a42:	2300      	movs	r3, #0
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	2302      	movs	r3, #2
 8003a48:	2228      	movs	r2, #40	; 0x28
 8003a4a:	2108      	movs	r1, #8
 8003a4c:	4806      	ldr	r0, [pc, #24]	; (8003a68 <App_Loop_Special_Tricks+0x7c>)
 8003a4e:	f000 ff13 	bl	8004878 <Servo_Play_Pattern>
}
 8003a52:	bf00      	nop
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	20000ce0 	.word	0x20000ce0
 8003a5c:	20000005 	.word	0x20000005
 8003a60:	200009c8 	.word	0x200009c8
 8003a64:	20000008 	.word	0x20000008
 8003a68:	20000a68 	.word	0x20000a68
 8003a6c:	20000a48 	.word	0x20000a48
 8003a70:	20000ce2 	.word	0x20000ce2

08003a74 <App_Loop_Settings_Mode_Enter>:
void App_Loop_Settings_Mode_Enter(){
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af02      	add	r7, sp, #8
	if(app_action == 12){
 8003a7a:	4b0d      	ldr	r3, [pc, #52]	; (8003ab0 <App_Loop_Settings_Mode_Enter+0x3c>)
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	2b0c      	cmp	r3, #12
 8003a80:	d113      	bne.n	8003aaa <App_Loop_Settings_Mode_Enter+0x36>
		if(app_movement_start == 1){
 8003a82:	4b0c      	ldr	r3, [pc, #48]	; (8003ab4 <App_Loop_Settings_Mode_Enter+0x40>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d10f      	bne.n	8003aaa <App_Loop_Settings_Mode_Enter+0x36>
			app_movement_start = 0;
 8003a8a:	4b0a      	ldr	r3, [pc, #40]	; (8003ab4 <App_Loop_Settings_Mode_Enter+0x40>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	701a      	strb	r2, [r3, #0]
			General_Copy_Float(movements_calibration_pose, servo_current_values, 8);
 8003a90:	2208      	movs	r2, #8
 8003a92:	4909      	ldr	r1, [pc, #36]	; (8003ab8 <App_Loop_Settings_Mode_Enter+0x44>)
 8003a94:	4809      	ldr	r0, [pc, #36]	; (8003abc <App_Loop_Settings_Mode_Enter+0x48>)
 8003a96:	f000 fbf6 	bl	8004286 <General_Copy_Float>
			Servo_Move(movements_standby_pose, movements_calibration_pose, MOV_SETTINGS_AND_RETURN_SAMPLES, MOV_SETTINGS_AND_RETURN_DELAY, SERVO_NOINT);
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	2304      	movs	r3, #4
 8003aa0:	223c      	movs	r2, #60	; 0x3c
 8003aa2:	4906      	ldr	r1, [pc, #24]	; (8003abc <App_Loop_Settings_Mode_Enter+0x48>)
 8003aa4:	4806      	ldr	r0, [pc, #24]	; (8003ac0 <App_Loop_Settings_Mode_Enter+0x4c>)
 8003aa6:	f000 fe79 	bl	800479c <Servo_Move>
		}
	}
}
 8003aaa:	bf00      	nop
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	20000ce0 	.word	0x20000ce0
 8003ab4:	20000005 	.word	0x20000005
 8003ab8:	20000b90 	.word	0x20000b90
 8003abc:	20000028 	.word	0x20000028
 8003ac0:	20000008 	.word	0x20000008

08003ac4 <App_Loop_Return_To_Stay>:
void App_Loop_Return_To_Stay(){
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af02      	add	r7, sp, #8
	if((app_action == 0)&&(app_return_to_stay != APP_STAY_NO_RETURN)){
 8003aca:	4b1d      	ldr	r3, [pc, #116]	; (8003b40 <App_Loop_Return_To_Stay+0x7c>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d133      	bne.n	8003b3a <App_Loop_Return_To_Stay+0x76>
 8003ad2:	4b1c      	ldr	r3, [pc, #112]	; (8003b44 <App_Loop_Return_To_Stay+0x80>)
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d02f      	beq.n	8003b3a <App_Loop_Return_To_Stay+0x76>
		if(app_return_to_stay == APP_STAY_FROM_BTNS_DRIVE_SETTINGS){ 
 8003ada:	4b1a      	ldr	r3, [pc, #104]	; (8003b44 <App_Loop_Return_To_Stay+0x80>)
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d108      	bne.n	8003af4 <App_Loop_Return_To_Stay+0x30>
			Servo_Move(servo_current_values, movements_standby_pose, MOV_SETTINGS_AND_RETURN_SAMPLES, MOV_SETTINGS_AND_RETURN_DELAY, SERVO_NOINT);
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	2304      	movs	r3, #4
 8003ae8:	223c      	movs	r2, #60	; 0x3c
 8003aea:	4917      	ldr	r1, [pc, #92]	; (8003b48 <App_Loop_Return_To_Stay+0x84>)
 8003aec:	4817      	ldr	r0, [pc, #92]	; (8003b4c <App_Loop_Return_To_Stay+0x88>)
 8003aee:	f000 fe55 	bl	800479c <Servo_Move>
 8003af2:	e01f      	b.n	8003b34 <App_Loop_Return_To_Stay+0x70>
		}else if(app_return_to_stay == APP_STAY_FROM_SWIM){
 8003af4:	4b13      	ldr	r3, [pc, #76]	; (8003b44 <App_Loop_Return_To_Stay+0x80>)
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d01b      	beq.n	8003b34 <App_Loop_Return_To_Stay+0x70>
			
		}else if(app_return_to_stay == APP_STAY_FROM_WORKOUT){
 8003afc:	4b11      	ldr	r3, [pc, #68]	; (8003b44 <App_Loop_Return_To_Stay+0x80>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b03      	cmp	r3, #3
 8003b02:	d017      	beq.n	8003b34 <App_Loop_Return_To_Stay+0x70>
			
		}else if(app_return_to_stay == APP_STAY_FROM_HELLO){
 8003b04:	4b0f      	ldr	r3, [pc, #60]	; (8003b44 <App_Loop_Return_To_Stay+0x80>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d013      	beq.n	8003b34 <App_Loop_Return_To_Stay+0x70>
			
		}else if(app_return_to_stay == APP_STAY_FROM_KICK){
 8003b0c:	4b0d      	ldr	r3, [pc, #52]	; (8003b44 <App_Loop_Return_To_Stay+0x80>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b05      	cmp	r3, #5
 8003b12:	d10f      	bne.n	8003b34 <App_Loop_Return_To_Stay+0x70>
			Servo_Set_Kick(app_kick_direction, app_kick_strength, SERVO_KICK_SET_KICK);
 8003b14:	4b0e      	ldr	r3, [pc, #56]	; (8003b50 <App_Loop_Return_To_Stay+0x8c>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	4a0e      	ldr	r2, [pc, #56]	; (8003b54 <App_Loop_Return_To_Stay+0x90>)
 8003b1a:	7811      	ldrb	r1, [r2, #0]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 ff34 	bl	800498c <Servo_Set_Kick>
			Servo_Move(movements_kick_pose, movements_standby_pose, MOV_KICK_ENTER_EXIT_SAMPLES, MOV_KICK_ENTER_EXIT_DELAY, SERVO_NOINT);
 8003b24:	2301      	movs	r3, #1
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	2303      	movs	r3, #3
 8003b2a:	2228      	movs	r2, #40	; 0x28
 8003b2c:	4906      	ldr	r1, [pc, #24]	; (8003b48 <App_Loop_Return_To_Stay+0x84>)
 8003b2e:	480a      	ldr	r0, [pc, #40]	; (8003b58 <App_Loop_Return_To_Stay+0x94>)
 8003b30:	f000 fe34 	bl	800479c <Servo_Move>
		}
		app_return_to_stay = APP_STAY_NO_RETURN;
 8003b34:	4b03      	ldr	r3, [pc, #12]	; (8003b44 <App_Loop_Return_To_Stay+0x80>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	701a      	strb	r2, [r3, #0]
	}
}
 8003b3a:	bf00      	nop
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	20000ce0 	.word	0x20000ce0
 8003b44:	20000ce2 	.word	0x20000ce2
 8003b48:	20000008 	.word	0x20000008
 8003b4c:	20000b90 	.word	0x20000b90
 8003b50:	20000ce4 	.word	0x20000ce4
 8003b54:	20000ce5 	.word	0x20000ce5
 8003b58:	20000b68 	.word	0x20000b68

08003b5c <App_Init>:

//App
void App_Init(){
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
	Settings_Read(servo_calibration_values, &led_active);
 8003b60:	4907      	ldr	r1, [pc, #28]	; (8003b80 <App_Init+0x24>)
 8003b62:	4808      	ldr	r0, [pc, #32]	; (8003b84 <App_Init+0x28>)
 8003b64:	f001 fa58 	bl	8005018 <Settings_Read>
	Servo_Init();
 8003b68:	f000 fdba 	bl	80046e0 <Servo_Init>
	Servo_Set(movements_standby_pose);
 8003b6c:	4806      	ldr	r0, [pc, #24]	; (8003b88 <App_Init+0x2c>)
 8003b6e:	f000 fc61 	bl	8004434 <Servo_Set>
	Led_Init();
 8003b72:	f000 fba9 	bl	80042c8 <Led_Init>
	Bluetooth_UART_Listen();
 8003b76:	f000 f81b 	bl	8003bb0 <Bluetooth_UART_Listen>
}
 8003b7a:	bf00      	nop
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	20000006 	.word	0x20000006
 8003b84:	20000f0c 	.word	0x20000f0c
 8003b88:	20000008 	.word	0x20000008

08003b8c <App_Loop>:
void App_Loop(){
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
	App_Loop_Settings();//Check if settings need to be updated in Flash
 8003b90:	f7ff fdea 	bl	8003768 <App_Loop_Settings>

	App_Loop_Buttons_Mode_Actions();//Check if any movement requested
 8003b94:	f7ff fe22 	bl	80037dc <App_Loop_Buttons_Mode_Actions>
	App_Loop_Kick();
 8003b98:	f7ff fedc 	bl	8003954 <App_Loop_Kick>
	App_Loop_Drive();
 8003b9c:	f7ff ff10 	bl	80039c0 <App_Loop_Drive>
	App_Loop_Special_Tricks();//Swimming, Workout, Hello
 8003ba0:	f7ff ff24 	bl	80039ec <App_Loop_Special_Tricks>
	App_Loop_Settings_Mode_Enter();
 8003ba4:	f7ff ff66 	bl	8003a74 <App_Loop_Settings_Mode_Enter>

	App_Loop_Return_To_Stay();//Check if movement finished and we need to return no standby pose
 8003ba8:	f7ff ff8c 	bl	8003ac4 <App_Loop_Return_To_Stay>
 8003bac:	bf00      	nop
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <Bluetooth_UART_Listen>:
extern int8_t servo_calibration_values[8];
extern uint8_t settings[35];

uint8_t bluetooth_rx_data[512];

void Bluetooth_UART_Listen(){
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &bluetooth_rx_data[0], 1);
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	4903      	ldr	r1, [pc, #12]	; (8003bc4 <Bluetooth_UART_Listen+0x14>)
 8003bb8:	4803      	ldr	r0, [pc, #12]	; (8003bc8 <Bluetooth_UART_Listen+0x18>)
 8003bba:	f7ff f8f2 	bl	8002da2 <HAL_UART_Receive_IT>
}
 8003bbe:	bf00      	nop
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20000cec 	.word	0x20000cec
 8003bc8:	20001050 	.word	0x20001050

08003bcc <Bluetooth_UART_Timer_Stop>:
void Bluetooth_UART_Timer_Stop(){
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim1);
 8003bd0:	4803      	ldr	r0, [pc, #12]	; (8003be0 <Bluetooth_UART_Timer_Stop+0x14>)
 8003bd2:	f7fe f821 	bl	8001c18 <HAL_TIM_Base_Stop_IT>
	TIM1 -> CNT = 0;
 8003bd6:	4b03      	ldr	r3, [pc, #12]	; (8003be4 <Bluetooth_UART_Timer_Stop+0x18>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003bdc:	bf00      	nop
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	20000f30 	.word	0x20000f30
 8003be4:	40012c00 	.word	0x40012c00

08003be8 <Bluetooth_UART_Timer_Start>:
void Bluetooth_UART_Timer_Start(){
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim1);
 8003bec:	4802      	ldr	r0, [pc, #8]	; (8003bf8 <Bluetooth_UART_Timer_Start+0x10>)
 8003bee:	f7fd ffc1 	bl	8001b74 <HAL_TIM_Base_Start_IT>
}
 8003bf2:	bf00      	nop
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	20000f30 	.word	0x20000f30

08003bfc <Bluetooth_UART_Timer_Reset>:
void Bluetooth_UART_Timer_Reset(){
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
	Bluetooth_UART_Timer_Stop();
 8003c00:	f7ff ffe4 	bl	8003bcc <Bluetooth_UART_Timer_Stop>
	Bluetooth_UART_Timer_Start();
 8003c04:	f7ff fff0 	bl	8003be8 <Bluetooth_UART_Timer_Start>
}
 8003c08:	bf00      	nop
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <Bluetooth_Is_Connected>:
uint8_t Bluetooth_Is_Connected(){
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(BT_STAT_GPIO_Port, BT_STAT_Pin) == GPIO_PIN_SET){
 8003c10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c14:	4805      	ldr	r0, [pc, #20]	; (8003c2c <Bluetooth_Is_Connected+0x20>)
 8003c16:	f7fd fafb 	bl	8001210 <HAL_GPIO_ReadPin>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <Bluetooth_Is_Connected+0x18>
		return 1;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e000      	b.n	8003c26 <Bluetooth_Is_Connected+0x1a>
	}
	return 0;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40010800 	.word	0x40010800

08003c30 <Bluetooth_Receive>:
void Bluetooth_Receive(uint16_t count){
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	4603      	mov	r3, r0
 8003c38:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Receive(&huart1, &bluetooth_rx_data[0], count, (count*6)+300);
 8003c3a:	88fa      	ldrh	r2, [r7, #6]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	4413      	add	r3, r2
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8003c48:	88fa      	ldrh	r2, [r7, #6]
 8003c4a:	4904      	ldr	r1, [pc, #16]	; (8003c5c <Bluetooth_Receive+0x2c>)
 8003c4c:	4804      	ldr	r0, [pc, #16]	; (8003c60 <Bluetooth_Receive+0x30>)
 8003c4e:	f7ff f806 	bl	8002c5e <HAL_UART_Receive>
}
 8003c52:	bf00      	nop
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20000cec 	.word	0x20000cec
 8003c60:	20001050 	.word	0x20001050

08003c64 <Bluetooth_Transmit>:
void Bluetooth_Transmit(uint8_t *data, uint16_t count){
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, &data[0], count, (count*9)+300);
 8003c70:	887a      	ldrh	r2, [r7, #2]
 8003c72:	4613      	mov	r3, r2
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8003c7c:	887a      	ldrh	r2, [r7, #2]
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	4803      	ldr	r0, [pc, #12]	; (8003c90 <Bluetooth_Transmit+0x2c>)
 8003c82:	f7fe ff5a 	bl	8002b3a <HAL_UART_Transmit>
}
 8003c86:	bf00      	nop
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	20001050 	.word	0x20001050

08003c94 <Bluetooth_Read_Message>:

void Bluetooth_Read_Message(){
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
	if(Bluetooth_Is_Connected() == 1){
 8003c9a:	f7ff ffb7 	bl	8003c0c <Bluetooth_Is_Connected>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	f040 8188 	bne.w	8003fb6 <Bluetooth_Read_Message+0x322>
		if(bluetooth_rx_data[0] == '#'){//Command
 8003ca6:	4b9a      	ldr	r3, [pc, #616]	; (8003f10 <Bluetooth_Read_Message+0x27c>)
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	2b23      	cmp	r3, #35	; 0x23
 8003cac:	f040 8183 	bne.w	8003fb6 <Bluetooth_Read_Message+0x322>
			Bluetooth_Receive(1);
 8003cb0:	2001      	movs	r0, #1
 8003cb2:	f7ff ffbd 	bl	8003c30 <Bluetooth_Receive>
			//Movement Commands Forward, Backward, Turn Left, Turn Right, Slide Left, Slide Right
			//Example: #1-3, #[COMMAND ID HERE FROM 1 TO 6]-[SPEED VALUE HERE FROM 1 TO 3]
			if((bluetooth_rx_data[0] >= (1+48))&&(bluetooth_rx_data[0] <= (6+48))){
 8003cb6:	4b96      	ldr	r3, [pc, #600]	; (8003f10 <Bluetooth_Read_Message+0x27c>)
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	2b30      	cmp	r3, #48	; 0x30
 8003cbc:	d920      	bls.n	8003d00 <Bluetooth_Read_Message+0x6c>
 8003cbe:	4b94      	ldr	r3, [pc, #592]	; (8003f10 <Bluetooth_Read_Message+0x27c>)
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	2b36      	cmp	r3, #54	; 0x36
 8003cc4:	d81c      	bhi.n	8003d00 <Bluetooth_Read_Message+0x6c>
				app_action = bluetooth_rx_data[0] - 48;
 8003cc6:	4b92      	ldr	r3, [pc, #584]	; (8003f10 <Bluetooth_Read_Message+0x27c>)
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	3b30      	subs	r3, #48	; 0x30
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	4b91      	ldr	r3, [pc, #580]	; (8003f14 <Bluetooth_Read_Message+0x280>)
 8003cd0:	701a      	strb	r2, [r3, #0]
				Bluetooth_Receive(2);
 8003cd2:	2002      	movs	r0, #2
 8003cd4:	f7ff ffac 	bl	8003c30 <Bluetooth_Receive>
				app_button_mode_motion_speed = bluetooth_rx_data[1]-48;
 8003cd8:	4b8d      	ldr	r3, [pc, #564]	; (8003f10 <Bluetooth_Read_Message+0x27c>)
 8003cda:	785b      	ldrb	r3, [r3, #1]
 8003cdc:	3b30      	subs	r3, #48	; 0x30
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	4b8d      	ldr	r3, [pc, #564]	; (8003f18 <Bluetooth_Read_Message+0x284>)
 8003ce2:	701a      	strb	r2, [r3, #0]
				if((app_button_mode_motion_speed>3)||(app_button_mode_motion_speed<1)){
 8003ce4:	4b8c      	ldr	r3, [pc, #560]	; (8003f18 <Bluetooth_Read_Message+0x284>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b03      	cmp	r3, #3
 8003cea:	d803      	bhi.n	8003cf4 <Bluetooth_Read_Message+0x60>
 8003cec:	4b8a      	ldr	r3, [pc, #552]	; (8003f18 <Bluetooth_Read_Message+0x284>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d102      	bne.n	8003cfa <Bluetooth_Read_Message+0x66>
					app_button_mode_motion_speed = 1;
 8003cf4:	4b88      	ldr	r3, [pc, #544]	; (8003f18 <Bluetooth_Read_Message+0x284>)
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	701a      	strb	r2, [r3, #0]
				}
				Bluetooth_UART_Timer_Reset();
 8003cfa:	f7ff ff7f 	bl	8003bfc <Bluetooth_UART_Timer_Reset>
 8003cfe:	e15a      	b.n	8003fb6 <Bluetooth_Read_Message+0x322>
			}
			//Kick
			else if(bluetooth_rx_data[0] == 'L'){
 8003d00:	4b83      	ldr	r3, [pc, #524]	; (8003f10 <Bluetooth_Read_Message+0x27c>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	2b4c      	cmp	r3, #76	; 0x4c
 8003d06:	d126      	bne.n	8003d56 <Bluetooth_Read_Message+0xc2>
				Bluetooth_Receive(5);//#L00-00
 8003d08:	2005      	movs	r0, #5
 8003d0a:	f7ff ff91 	bl	8003c30 <Bluetooth_Receive>
				app_action = 7;
 8003d0e:	4b81      	ldr	r3, [pc, #516]	; (8003f14 <Bluetooth_Read_Message+0x280>)
 8003d10:	2207      	movs	r2, #7
 8003d12:	701a      	strb	r2, [r3, #0]
				app_kick_strength = ((bluetooth_rx_data[0]-48)*10)+(bluetooth_rx_data[1]-48);
 8003d14:	4b7e      	ldr	r3, [pc, #504]	; (8003f10 <Bluetooth_Read_Message+0x27c>)
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	0092      	lsls	r2, r2, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	4b7b      	ldr	r3, [pc, #492]	; (8003f10 <Bluetooth_Read_Message+0x27c>)
 8003d24:	785b      	ldrb	r3, [r3, #1]
 8003d26:	4413      	add	r3, r2
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	3b10      	subs	r3, #16
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	4b7b      	ldr	r3, [pc, #492]	; (8003f1c <Bluetooth_Read_Message+0x288>)
 8003d30:	701a      	strb	r2, [r3, #0]
				app_kick_direction = ((bluetooth_rx_data[3]-48)*10)+(bluetooth_rx_data[4]-48);
 8003d32:	4b77      	ldr	r3, [pc, #476]	; (8003f10 <Bluetooth_Read_Message+0x27c>)
 8003d34:	78db      	ldrb	r3, [r3, #3]
 8003d36:	461a      	mov	r2, r3
 8003d38:	0092      	lsls	r2, r2, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	4b73      	ldr	r3, [pc, #460]	; (8003f10 <Bluetooth_Read_Message+0x27c>)
 8003d42:	791b      	ldrb	r3, [r3, #4]
 8003d44:	4413      	add	r3, r2
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	3b10      	subs	r3, #16
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	4b74      	ldr	r3, [pc, #464]	; (8003f20 <Bluetooth_Read_Message+0x28c>)
 8003d4e:	701a      	strb	r2, [r3, #0]
				Bluetooth_UART_Timer_Reset();
 8003d50:	f7ff ff54 	bl	8003bfc <Bluetooth_UART_Timer_Reset>
 8003d54:	e12f      	b.n	8003fb6 <Bluetooth_Read_Message+0x322>
			}
			//Driving
			else if(bluetooth_rx_data[0] == 'K'){
 8003d56:	4b6e      	ldr	r3, [pc, #440]	; (8003f10 <Bluetooth_Read_Message+0x27c>)
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	2b4b      	cmp	r3, #75	; 0x4b
 8003d5c:	d13c      	bne.n	8003dd8 <Bluetooth_Read_Message+0x144>
				Bluetooth_Receive(6);//#K020-80
 8003d5e:	2006      	movs	r0, #6
 8003d60:	f7ff ff66 	bl	8003c30 <Bluetooth_Receive>
				app_driving_direction = ((bluetooth_rx_data[0]-48)*100)+((bluetooth_rx_data[1]-48)*10)+(bluetooth_rx_data[2]-48);
 8003d64:	4b6a      	ldr	r3, [pc, #424]	; (8003f10 <Bluetooth_Read_Message+0x27c>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	3b30      	subs	r3, #48	; 0x30
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	0092      	lsls	r2, r2, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	461a      	mov	r2, r3
 8003d74:	0091      	lsls	r1, r2, #2
 8003d76:	461a      	mov	r2, r3
 8003d78:	460b      	mov	r3, r1
 8003d7a:	4413      	add	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	4b63      	ldr	r3, [pc, #396]	; (8003f10 <Bluetooth_Read_Message+0x27c>)
 8003d82:	785b      	ldrb	r3, [r3, #1]
 8003d84:	3b30      	subs	r3, #48	; 0x30
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	4619      	mov	r1, r3
 8003d8a:	0089      	lsls	r1, r1, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	4413      	add	r3, r2
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	4b5e      	ldr	r3, [pc, #376]	; (8003f10 <Bluetooth_Read_Message+0x27c>)
 8003d98:	789b      	ldrb	r3, [r3, #2]
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	4413      	add	r3, r2
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	3b30      	subs	r3, #48	; 0x30
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	4b5f      	ldr	r3, [pc, #380]	; (8003f24 <Bluetooth_Read_Message+0x290>)
 8003da6:	801a      	strh	r2, [r3, #0]
				app_driving_speed = ((bluetooth_rx_data[4]-48)*10)+(bluetooth_rx_data[5]-48);
 8003da8:	4b59      	ldr	r3, [pc, #356]	; (8003f10 <Bluetooth_Read_Message+0x27c>)
 8003daa:	791b      	ldrb	r3, [r3, #4]
 8003dac:	3b30      	subs	r3, #48	; 0x30
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	461a      	mov	r2, r3
 8003db2:	0092      	lsls	r2, r2, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	4b55      	ldr	r3, [pc, #340]	; (8003f10 <Bluetooth_Read_Message+0x27c>)
 8003dbc:	795b      	ldrb	r3, [r3, #5]
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	3b30      	subs	r3, #48	; 0x30
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	4b57      	ldr	r3, [pc, #348]	; (8003f28 <Bluetooth_Read_Message+0x294>)
 8003dca:	801a      	strh	r2, [r3, #0]
				app_action = 8;
 8003dcc:	4b51      	ldr	r3, [pc, #324]	; (8003f14 <Bluetooth_Read_Message+0x280>)
 8003dce:	2208      	movs	r2, #8
 8003dd0:	701a      	strb	r2, [r3, #0]
					Bluetooth_UART_Timer_Reset();
 8003dd2:	f7ff ff13 	bl	8003bfc <Bluetooth_UART_Timer_Reset>
 8003dd6:	e0ee      	b.n	8003fb6 <Bluetooth_Read_Message+0x322>
			}
			//Special Tricks
			else if(bluetooth_rx_data[0] == 'D'){
 8003dd8:	4b4d      	ldr	r3, [pc, #308]	; (8003f10 <Bluetooth_Read_Message+0x27c>)
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	2b44      	cmp	r3, #68	; 0x44
 8003dde:	d113      	bne.n	8003e08 <Bluetooth_Read_Message+0x174>
				//#D1 #D2 #D3
				Bluetooth_Receive(1);
 8003de0:	2001      	movs	r0, #1
 8003de2:	f7ff ff25 	bl	8003c30 <Bluetooth_Receive>
				if((bluetooth_rx_data[0] >= (1 + 48))&&(bluetooth_rx_data[0] <= (3 + 48))){
 8003de6:	4b4a      	ldr	r3, [pc, #296]	; (8003f10 <Bluetooth_Read_Message+0x27c>)
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	2b30      	cmp	r3, #48	; 0x30
 8003dec:	d909      	bls.n	8003e02 <Bluetooth_Read_Message+0x16e>
 8003dee:	4b48      	ldr	r3, [pc, #288]	; (8003f10 <Bluetooth_Read_Message+0x27c>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	2b33      	cmp	r3, #51	; 0x33
 8003df4:	d805      	bhi.n	8003e02 <Bluetooth_Read_Message+0x16e>
					app_action = 8 + (bluetooth_rx_data[0] - 48);
 8003df6:	4b46      	ldr	r3, [pc, #280]	; (8003f10 <Bluetooth_Read_Message+0x27c>)
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	3b28      	subs	r3, #40	; 0x28
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	4b45      	ldr	r3, [pc, #276]	; (8003f14 <Bluetooth_Read_Message+0x280>)
 8003e00:	701a      	strb	r2, [r3, #0]
				}
				Bluetooth_UART_Timer_Reset();
 8003e02:	f7ff fefb 	bl	8003bfc <Bluetooth_UART_Timer_Reset>
 8003e06:	e0d6      	b.n	8003fb6 <Bluetooth_Read_Message+0x322>
			}

			//LED
			else if(bluetooth_rx_data[0] == 'E'){
 8003e08:	4b41      	ldr	r3, [pc, #260]	; (8003f10 <Bluetooth_Read_Message+0x27c>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b45      	cmp	r3, #69	; 0x45
 8003e0e:	d118      	bne.n	8003e42 <Bluetooth_Read_Message+0x1ae>
				//#E0 #E1
				Bluetooth_Receive(1);
 8003e10:	2001      	movs	r0, #1
 8003e12:	f7ff ff0d 	bl	8003c30 <Bluetooth_Receive>
				if(bluetooth_rx_data[0] == '1'){
 8003e16:	4b3e      	ldr	r3, [pc, #248]	; (8003f10 <Bluetooth_Read_Message+0x27c>)
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b31      	cmp	r3, #49	; 0x31
 8003e1c:	d106      	bne.n	8003e2c <Bluetooth_Read_Message+0x198>
					Led_On();
 8003e1e:	f000 fa5d 	bl	80042dc <Led_On>
					settings[32] = '1';
 8003e22:	4b42      	ldr	r3, [pc, #264]	; (8003f2c <Bluetooth_Read_Message+0x298>)
 8003e24:	2231      	movs	r2, #49	; 0x31
 8003e26:	f883 2020 	strb.w	r2, [r3, #32]
 8003e2a:	e005      	b.n	8003e38 <Bluetooth_Read_Message+0x1a4>
				}
				else{
					Led_Off();
 8003e2c:	f000 fa62 	bl	80042f4 <Led_Off>
					settings[32] = '0';
 8003e30:	4b3e      	ldr	r3, [pc, #248]	; (8003f2c <Bluetooth_Read_Message+0x298>)
 8003e32:	2230      	movs	r2, #48	; 0x30
 8003e34:	f883 2020 	strb.w	r2, [r3, #32]
				}
				Flash_Write(&settings[0],35);
 8003e38:	2123      	movs	r1, #35	; 0x23
 8003e3a:	483c      	ldr	r0, [pc, #240]	; (8003f2c <Bluetooth_Read_Message+0x298>)
 8003e3c:	f000 f95c 	bl	80040f8 <Flash_Write>
 8003e40:	e0b9      	b.n	8003fb6 <Bluetooth_Read_Message+0x322>
			}

			//Settings
			else if(bluetooth_rx_data[0] == 'S'){
 8003e42:	4b33      	ldr	r3, [pc, #204]	; (8003f10 <Bluetooth_Read_Message+0x27c>)
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	2b53      	cmp	r3, #83	; 0x53
 8003e48:	f040 80b5 	bne.w	8003fb6 <Bluetooth_Read_Message+0x322>
				//nastroikebis dgomi da dabruneba parametrebis
				Bluetooth_Receive(1);
 8003e4c:	2001      	movs	r0, #1
 8003e4e:	f7ff feef 	bl	8003c30 <Bluetooth_Receive>
				Bluetooth_UART_Timer_Stop();
 8003e52:	f7ff febb 	bl	8003bcc <Bluetooth_UART_Timer_Stop>
				if((bluetooth_rx_data[0] == 'O')||(bluetooth_rx_data[0] == 'W')){
 8003e56:	4b2e      	ldr	r3, [pc, #184]	; (8003f10 <Bluetooth_Read_Message+0x27c>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	2b4f      	cmp	r3, #79	; 0x4f
 8003e5c:	d003      	beq.n	8003e66 <Bluetooth_Read_Message+0x1d2>
 8003e5e:	4b2c      	ldr	r3, [pc, #176]	; (8003f10 <Bluetooth_Read_Message+0x27c>)
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	2b57      	cmp	r3, #87	; 0x57
 8003e64:	d14a      	bne.n	8003efc <Bluetooth_Read_Message+0x268>
					//Assemble calibration values into string //#C-0-0-0-0-0-0-0-01234Quadruped 1\n
					uint8_t i = 0;
 8003e66:	2300      	movs	r3, #0
 8003e68:	71fb      	strb	r3, [r7, #7]
					while(i != 8){
 8003e6a:	e02c      	b.n	8003ec6 <Bluetooth_Read_Message+0x232>
						i++;
 8003e6c:	79fb      	ldrb	r3, [r7, #7]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	71fb      	strb	r3, [r7, #7]
						if(servo_calibration_values[i-1] < 0){
 8003e72:	79fb      	ldrb	r3, [r7, #7]
 8003e74:	3b01      	subs	r3, #1
 8003e76:	4a2e      	ldr	r2, [pc, #184]	; (8003f30 <Bluetooth_Read_Message+0x29c>)
 8003e78:	56d3      	ldrsb	r3, [r2, r3]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	da12      	bge.n	8003ea4 <Bluetooth_Read_Message+0x210>
							settings[(2*i)] = '-';
 8003e7e:	79fb      	ldrb	r3, [r7, #7]
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	4a2a      	ldr	r2, [pc, #168]	; (8003f2c <Bluetooth_Read_Message+0x298>)
 8003e84:	212d      	movs	r1, #45	; 0x2d
 8003e86:	54d1      	strb	r1, [r2, r3]
							settings[(2*i)+1] = (servo_calibration_values[i-1] - (2*servo_calibration_values[i-1]))+48;
 8003e88:	79fb      	ldrb	r3, [r7, #7]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	4a28      	ldr	r2, [pc, #160]	; (8003f30 <Bluetooth_Read_Message+0x29c>)
 8003e8e:	56d3      	ldrsb	r3, [r2, r3]
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	79fb      	ldrb	r3, [r7, #7]
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	3301      	adds	r3, #1
 8003e98:	f1c2 0230 	rsb	r2, r2, #48	; 0x30
 8003e9c:	b2d1      	uxtb	r1, r2
 8003e9e:	4a23      	ldr	r2, [pc, #140]	; (8003f2c <Bluetooth_Read_Message+0x298>)
 8003ea0:	54d1      	strb	r1, [r2, r3]
 8003ea2:	e010      	b.n	8003ec6 <Bluetooth_Read_Message+0x232>
						}
						else{
							settings[(2*i)] = '+';
 8003ea4:	79fb      	ldrb	r3, [r7, #7]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	4a20      	ldr	r2, [pc, #128]	; (8003f2c <Bluetooth_Read_Message+0x298>)
 8003eaa:	212b      	movs	r1, #43	; 0x2b
 8003eac:	54d1      	strb	r1, [r2, r3]
							settings[(2*i)+1] = servo_calibration_values[i-1]+48;
 8003eae:	79fb      	ldrb	r3, [r7, #7]
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	4a1f      	ldr	r2, [pc, #124]	; (8003f30 <Bluetooth_Read_Message+0x29c>)
 8003eb4:	56d3      	ldrsb	r3, [r2, r3]
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	79fb      	ldrb	r3, [r7, #7]
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	3230      	adds	r2, #48	; 0x30
 8003ec0:	b2d1      	uxtb	r1, r2
 8003ec2:	4a1a      	ldr	r2, [pc, #104]	; (8003f2c <Bluetooth_Read_Message+0x298>)
 8003ec4:	54d1      	strb	r1, [r2, r3]
					while(i != 8){
 8003ec6:	79fb      	ldrb	r3, [r7, #7]
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d1cf      	bne.n	8003e6c <Bluetooth_Read_Message+0x1d8>
						}
					}
					if(bluetooth_rx_data[0] == 'O'){
 8003ecc:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <Bluetooth_Read_Message+0x27c>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b4f      	cmp	r3, #79	; 0x4f
 8003ed2:	d10a      	bne.n	8003eea <Bluetooth_Read_Message+0x256>
						Bluetooth_Transmit(&settings[0], 34);
 8003ed4:	2122      	movs	r1, #34	; 0x22
 8003ed6:	4815      	ldr	r0, [pc, #84]	; (8003f2c <Bluetooth_Read_Message+0x298>)
 8003ed8:	f7ff fec4 	bl	8003c64 <Bluetooth_Transmit>
						app_return_to_stay = APP_STAY_NO_RETURN;
 8003edc:	4b15      	ldr	r3, [pc, #84]	; (8003f34 <Bluetooth_Read_Message+0x2a0>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	701a      	strb	r2, [r3, #0]
						app_action = 12;
 8003ee2:	4b0c      	ldr	r3, [pc, #48]	; (8003f14 <Bluetooth_Read_Message+0x280>)
 8003ee4:	220c      	movs	r2, #12
 8003ee6:	701a      	strb	r2, [r3, #0]
				if((bluetooth_rx_data[0] == 'O')||(bluetooth_rx_data[0] == 'W')){
 8003ee8:	e064      	b.n	8003fb4 <Bluetooth_Read_Message+0x320>
					}
					else if(bluetooth_rx_data[0] == 'W'){//Write configuration to flash request #SW
 8003eea:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <Bluetooth_Read_Message+0x27c>)
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	2b57      	cmp	r3, #87	; 0x57
 8003ef0:	d160      	bne.n	8003fb4 <Bluetooth_Read_Message+0x320>
						Flash_Write(&settings[0],35);
 8003ef2:	2123      	movs	r1, #35	; 0x23
 8003ef4:	480d      	ldr	r0, [pc, #52]	; (8003f2c <Bluetooth_Read_Message+0x298>)
 8003ef6:	f000 f8ff 	bl	80040f8 <Flash_Write>
				if((bluetooth_rx_data[0] == 'O')||(bluetooth_rx_data[0] == 'W')){
 8003efa:	e05b      	b.n	8003fb4 <Bluetooth_Read_Message+0x320>
					}

				}
				else if(bluetooth_rx_data[0] == 'C'){//Settings page closed #SC
 8003efc:	4b04      	ldr	r3, [pc, #16]	; (8003f10 <Bluetooth_Read_Message+0x27c>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b43      	cmp	r3, #67	; 0x43
 8003f02:	d119      	bne.n	8003f38 <Bluetooth_Read_Message+0x2a4>
					app_return_to_stay = APP_STAY_FROM_BTNS_DRIVE_SETTINGS;
 8003f04:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <Bluetooth_Read_Message+0x2a0>)
 8003f06:	2201      	movs	r2, #1
 8003f08:	701a      	strb	r2, [r3, #0]
					Bluetooth_UART_Timer_Start();
 8003f0a:	f7ff fe6d 	bl	8003be8 <Bluetooth_UART_Timer_Start>
 8003f0e:	e052      	b.n	8003fb6 <Bluetooth_Read_Message+0x322>
 8003f10:	20000cec 	.word	0x20000cec
 8003f14:	20000ce0 	.word	0x20000ce0
 8003f18:	20000ce3 	.word	0x20000ce3
 8003f1c:	20000ce5 	.word	0x20000ce5
 8003f20:	20000ce4 	.word	0x20000ce4
 8003f24:	20000ce6 	.word	0x20000ce6
 8003f28:	20000ce8 	.word	0x20000ce8
 8003f2c:	20000c30 	.word	0x20000c30
 8003f30:	20000f0c 	.word	0x20000f0c
 8003f34:	20000ce2 	.word	0x20000ce2
				}
				else if(bluetooth_rx_data[0] == 'D'){//Adjust joint position and calibration value #SD+91
 8003f38:	4b22      	ldr	r3, [pc, #136]	; (8003fc4 <Bluetooth_Read_Message+0x330>)
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	2b44      	cmp	r3, #68	; 0x44
 8003f3e:	d11b      	bne.n	8003f78 <Bluetooth_Read_Message+0x2e4>
					Bluetooth_Receive(3);
 8003f40:	2003      	movs	r0, #3
 8003f42:	f7ff fe75 	bl	8003c30 <Bluetooth_Receive>
					int8_t v = bluetooth_rx_data[1]-48;
 8003f46:	4b1f      	ldr	r3, [pc, #124]	; (8003fc4 <Bluetooth_Read_Message+0x330>)
 8003f48:	785b      	ldrb	r3, [r3, #1]
 8003f4a:	3b30      	subs	r3, #48	; 0x30
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	71bb      	strb	r3, [r7, #6]
					uint8_t n = bluetooth_rx_data[2]-48-1;
 8003f50:	4b1c      	ldr	r3, [pc, #112]	; (8003fc4 <Bluetooth_Read_Message+0x330>)
 8003f52:	789b      	ldrb	r3, [r3, #2]
 8003f54:	3b31      	subs	r3, #49	; 0x31
 8003f56:	717b      	strb	r3, [r7, #5]
					if(bluetooth_rx_data[0] == '-'){
 8003f58:	4b1a      	ldr	r3, [pc, #104]	; (8003fc4 <Bluetooth_Read_Message+0x330>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b2d      	cmp	r3, #45	; 0x2d
 8003f5e:	d103      	bne.n	8003f68 <Bluetooth_Read_Message+0x2d4>
						v = v-(2*v);
 8003f60:	79bb      	ldrb	r3, [r7, #6]
 8003f62:	425b      	negs	r3, r3
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	71bb      	strb	r3, [r7, #6]
					}
					servo_calibration_values[n] = v;
 8003f68:	797b      	ldrb	r3, [r7, #5]
 8003f6a:	4917      	ldr	r1, [pc, #92]	; (8003fc8 <Bluetooth_Read_Message+0x334>)
 8003f6c:	79ba      	ldrb	r2, [r7, #6]
 8003f6e:	54ca      	strb	r2, [r1, r3]
					Servo_Set(&movements_calibration_pose[0]);
 8003f70:	4816      	ldr	r0, [pc, #88]	; (8003fcc <Bluetooth_Read_Message+0x338>)
 8003f72:	f000 fa5f 	bl	8004434 <Servo_Set>
 8003f76:	e01e      	b.n	8003fb6 <Bluetooth_Read_Message+0x322>
				}
				else if(bluetooth_rx_data[0] == 'S'){//Set new Bluetooth name and password #SSNNNNNNNNNNPPPP
 8003f78:	4b12      	ldr	r3, [pc, #72]	; (8003fc4 <Bluetooth_Read_Message+0x330>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b53      	cmp	r3, #83	; 0x53
 8003f7e:	d11a      	bne.n	8003fb6 <Bluetooth_Read_Message+0x322>
					Bluetooth_Receive(14);
 8003f80:	200e      	movs	r0, #14
 8003f82:	f7ff fe55 	bl	8003c30 <Bluetooth_Receive>
					General_Copy(&bluetooth_rx_data[10], &settings[18],4);	//#C-0-0-0-0-0-0-0-01234Quadruped 1\n
 8003f86:	2204      	movs	r2, #4
 8003f88:	4911      	ldr	r1, [pc, #68]	; (8003fd0 <Bluetooth_Read_Message+0x33c>)
 8003f8a:	4812      	ldr	r0, [pc, #72]	; (8003fd4 <Bluetooth_Read_Message+0x340>)
 8003f8c:	f000 f95c 	bl	8004248 <General_Copy>
					General_Copy(&bluetooth_rx_data[0], &settings[22],10);
 8003f90:	220a      	movs	r2, #10
 8003f92:	4911      	ldr	r1, [pc, #68]	; (8003fd8 <Bluetooth_Read_Message+0x344>)
 8003f94:	480b      	ldr	r0, [pc, #44]	; (8003fc4 <Bluetooth_Read_Message+0x330>)
 8003f96:	f000 f957 	bl	8004248 <General_Copy>
					Flash_Write(&settings[0],35);
 8003f9a:	2123      	movs	r1, #35	; 0x23
 8003f9c:	480f      	ldr	r0, [pc, #60]	; (8003fdc <Bluetooth_Read_Message+0x348>)
 8003f9e:	f000 f8ab 	bl	80040f8 <Flash_Write>
					//Wait for disconnecting, than change name/password and reset Bluetooth
					app_action_name_and_password_changed = 1;
 8003fa2:	4b0f      	ldr	r3, [pc, #60]	; (8003fe0 <Bluetooth_Read_Message+0x34c>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	701a      	strb	r2, [r3, #0]
					app_return_to_stay = APP_STAY_FROM_BTNS_DRIVE_SETTINGS;
 8003fa8:	4b0e      	ldr	r3, [pc, #56]	; (8003fe4 <Bluetooth_Read_Message+0x350>)
 8003faa:	2201      	movs	r2, #1
 8003fac:	701a      	strb	r2, [r3, #0]
					Bluetooth_UART_Timer_Start();
 8003fae:	f7ff fe1b 	bl	8003be8 <Bluetooth_UART_Timer_Start>
 8003fb2:	e000      	b.n	8003fb6 <Bluetooth_Read_Message+0x322>
				if((bluetooth_rx_data[0] == 'O')||(bluetooth_rx_data[0] == 'W')){
 8003fb4:	bf00      	nop
				}
			}
		}
	}
	Bluetooth_UART_Listen();
 8003fb6:	f7ff fdfb 	bl	8003bb0 <Bluetooth_UART_Listen>
}
 8003fba:	bf00      	nop
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	20000cec 	.word	0x20000cec
 8003fc8:	20000f0c 	.word	0x20000f0c
 8003fcc:	20000028 	.word	0x20000028
 8003fd0:	20000c42 	.word	0x20000c42
 8003fd4:	20000cf6 	.word	0x20000cf6
 8003fd8:	20000c46 	.word	0x20000c46
 8003fdc:	20000c30 	.word	0x20000c30
 8003fe0:	20000ce1 	.word	0x20000ce1
 8003fe4:	20000ce2 	.word	0x20000ce2

08003fe8 <Flash_Read>:
#include "main.h"
#include "flash.h"

static FLASH_EraseInitTypeDef EraseInitStruct;

void Flash_Read(uint8_t *data, uint16_t length){
 8003fe8:	b480      	push	{r7}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	807b      	strh	r3, [r7, #2]
	uint16_t fpages = length/4;
 8003ff4:	887b      	ldrh	r3, [r7, #2]
 8003ff6:	089b      	lsrs	r3, r3, #2
 8003ff8:	82bb      	strh	r3, [r7, #20]
	uint16_t lbytes = length-(fpages*4);
 8003ffa:	8abb      	ldrh	r3, [r7, #20]
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	887a      	ldrh	r2, [r7, #2]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	827b      	strh	r3, [r7, #18]

	uint32_t tmp = 0;
 8004006:	2300      	movs	r3, #0
 8004008:	60fb      	str	r3, [r7, #12]
	uint16_t i = 0;
 800400a:	2300      	movs	r3, #0
 800400c:	82fb      	strh	r3, [r7, #22]
	while(i!=(fpages*4)){
 800400e:	e027      	b.n	8004060 <Flash_Read+0x78>
		tmp = *(__IO uint32_t *)(0x0800C000+i);
 8004010:	8afb      	ldrh	r3, [r7, #22]
 8004012:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8004016:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	60fb      	str	r3, [r7, #12]
		data[i] = (uint8_t)((uint32_t)tmp>>24);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	0e19      	lsrs	r1, r3, #24
 8004022:	8afb      	ldrh	r3, [r7, #22]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	4413      	add	r3, r2
 8004028:	b2ca      	uxtb	r2, r1
 800402a:	701a      	strb	r2, [r3, #0]
		data[i+1] = (uint8_t)((uint32_t)tmp>>16);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	0c19      	lsrs	r1, r3, #16
 8004030:	8afb      	ldrh	r3, [r7, #22]
 8004032:	3301      	adds	r3, #1
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	4413      	add	r3, r2
 8004038:	b2ca      	uxtb	r2, r1
 800403a:	701a      	strb	r2, [r3, #0]
		data[i+2] = (uint8_t)((uint32_t)tmp>>8);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	0a19      	lsrs	r1, r3, #8
 8004040:	8afb      	ldrh	r3, [r7, #22]
 8004042:	3302      	adds	r3, #2
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	4413      	add	r3, r2
 8004048:	b2ca      	uxtb	r2, r1
 800404a:	701a      	strb	r2, [r3, #0]
		data[i+3] = (uint8_t)tmp;
 800404c:	8afb      	ldrh	r3, [r7, #22]
 800404e:	3303      	adds	r3, #3
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	4413      	add	r3, r2
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	701a      	strb	r2, [r3, #0]
		i += 4;
 800405a:	8afb      	ldrh	r3, [r7, #22]
 800405c:	3304      	adds	r3, #4
 800405e:	82fb      	strh	r3, [r7, #22]
	while(i!=(fpages*4)){
 8004060:	8afa      	ldrh	r2, [r7, #22]
 8004062:	8abb      	ldrh	r3, [r7, #20]
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	429a      	cmp	r2, r3
 8004068:	d1d2      	bne.n	8004010 <Flash_Read+0x28>
	}
	if(lbytes != 0){
 800406a:	8a7b      	ldrh	r3, [r7, #18]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d03e      	beq.n	80040ee <Flash_Read+0x106>
		tmp = *(__IO uint32_t *)(0x0800C000+i);
 8004070:	8afb      	ldrh	r3, [r7, #22]
 8004072:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8004076:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60fb      	str	r3, [r7, #12]
		if(lbytes == 3){
 800407e:	8a7b      	ldrh	r3, [r7, #18]
 8004080:	2b03      	cmp	r3, #3
 8004082:	d117      	bne.n	80040b4 <Flash_Read+0xcc>
			data[i] = (uint8_t)((uint32_t)tmp>>24);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	0e19      	lsrs	r1, r3, #24
 8004088:	8afb      	ldrh	r3, [r7, #22]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	4413      	add	r3, r2
 800408e:	b2ca      	uxtb	r2, r1
 8004090:	701a      	strb	r2, [r3, #0]
			data[i+1] = (uint8_t)((uint32_t)tmp>>16);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	0c19      	lsrs	r1, r3, #16
 8004096:	8afb      	ldrh	r3, [r7, #22]
 8004098:	3301      	adds	r3, #1
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	4413      	add	r3, r2
 800409e:	b2ca      	uxtb	r2, r1
 80040a0:	701a      	strb	r2, [r3, #0]
			data[i+2] = (uint8_t)((uint32_t)tmp>>8);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	0a19      	lsrs	r1, r3, #8
 80040a6:	8afb      	ldrh	r3, [r7, #22]
 80040a8:	3302      	adds	r3, #2
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	4413      	add	r3, r2
 80040ae:	b2ca      	uxtb	r2, r1
 80040b0:	701a      	strb	r2, [r3, #0]
		}
		else if(lbytes == 1){
			data[i] = (uint8_t)((uint32_t)tmp>>24);
		}
	}
}
 80040b2:	e01c      	b.n	80040ee <Flash_Read+0x106>
		else if(lbytes == 2){
 80040b4:	8a7b      	ldrh	r3, [r7, #18]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d10f      	bne.n	80040da <Flash_Read+0xf2>
			data[i] = (uint8_t)((uint32_t)tmp>>24);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	0e19      	lsrs	r1, r3, #24
 80040be:	8afb      	ldrh	r3, [r7, #22]
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	4413      	add	r3, r2
 80040c4:	b2ca      	uxtb	r2, r1
 80040c6:	701a      	strb	r2, [r3, #0]
			data[i+1] = (uint8_t)((uint32_t)tmp>>16);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	0c19      	lsrs	r1, r3, #16
 80040cc:	8afb      	ldrh	r3, [r7, #22]
 80040ce:	3301      	adds	r3, #1
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	4413      	add	r3, r2
 80040d4:	b2ca      	uxtb	r2, r1
 80040d6:	701a      	strb	r2, [r3, #0]
}
 80040d8:	e009      	b.n	80040ee <Flash_Read+0x106>
		else if(lbytes == 1){
 80040da:	8a7b      	ldrh	r3, [r7, #18]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d106      	bne.n	80040ee <Flash_Read+0x106>
			data[i] = (uint8_t)((uint32_t)tmp>>24);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	0e19      	lsrs	r1, r3, #24
 80040e4:	8afb      	ldrh	r3, [r7, #22]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	4413      	add	r3, r2
 80040ea:	b2ca      	uxtb	r2, r1
 80040ec:	701a      	strb	r2, [r3, #0]
}
 80040ee:	bf00      	nop
 80040f0:	371c      	adds	r7, #28
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bc80      	pop	{r7}
 80040f6:	4770      	bx	lr

080040f8 <Flash_Write>:
uint32_t Flash_Write(uint8_t *data, uint16_t length){
 80040f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80040fc:	b086      	sub	sp, #24
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
 8004102:	460b      	mov	r3, r1
 8004104:	807b      	strh	r3, [r7, #2]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8004106:	4b4e      	ldr	r3, [pc, #312]	; (8004240 <Flash_Write+0x148>)
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = 0x0800C000;
 800410c:	4b4c      	ldr	r3, [pc, #304]	; (8004240 <Flash_Write+0x148>)
 800410e:	4a4d      	ldr	r2, [pc, #308]	; (8004244 <Flash_Write+0x14c>)
 8004110:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages = 1;
 8004112:	4b4b      	ldr	r3, [pc, #300]	; (8004240 <Flash_Write+0x148>)
 8004114:	2201      	movs	r2, #1
 8004116:	60da      	str	r2, [r3, #12]
	uint32_t ErrorCode = 0;
 8004118:	2300      	movs	r3, #0
 800411a:	60bb      	str	r3, [r7, #8]
	HAL_FLASH_Unlock();
 800411c:	f7fc fd64 	bl	8000be8 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInitStruct, &ErrorCode);
 8004120:	f107 0308 	add.w	r3, r7, #8
 8004124:	4619      	mov	r1, r3
 8004126:	4846      	ldr	r0, [pc, #280]	; (8004240 <Flash_Write+0x148>)
 8004128:	f7fc fe46 	bl	8000db8 <HAL_FLASHEx_Erase>

	//4is jeradis mere gadayris
	uint16_t fpages = length/4;
 800412c:	887b      	ldrh	r3, [r7, #2]
 800412e:	089b      	lsrs	r3, r3, #2
 8004130:	81fb      	strh	r3, [r7, #14]
	uint16_t lbytes = length-(fpages*4);
 8004132:	89fb      	ldrh	r3, [r7, #14]
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	b29b      	uxth	r3, r3
 8004138:	887a      	ldrh	r2, [r7, #2]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	81bb      	strh	r3, [r7, #12]
	uint16_t i = 0;
 800413e:	2300      	movs	r3, #0
 8004140:	82fb      	strh	r3, [r7, #22]
	while(i != (fpages*4)){
 8004142:	e02a      	b.n	800419a <Flash_Write+0xa2>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800C000+i, ((uint32_t)data[i]<<24)|((uint32_t)data[i+1]<<16)|((uint32_t)data[i+2]<<8)|(uint32_t)data[i+3]);
 8004144:	8afb      	ldrh	r3, [r7, #22]
 8004146:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800414a:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 800414e:	4618      	mov	r0, r3
 8004150:	8afb      	ldrh	r3, [r7, #22]
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	4413      	add	r3, r2
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	061a      	lsls	r2, r3, #24
 800415a:	8afb      	ldrh	r3, [r7, #22]
 800415c:	3301      	adds	r3, #1
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	440b      	add	r3, r1
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	041b      	lsls	r3, r3, #16
 8004166:	431a      	orrs	r2, r3
 8004168:	8afb      	ldrh	r3, [r7, #22]
 800416a:	3302      	adds	r3, #2
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	440b      	add	r3, r1
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	021b      	lsls	r3, r3, #8
 8004174:	4313      	orrs	r3, r2
 8004176:	8afa      	ldrh	r2, [r7, #22]
 8004178:	3203      	adds	r2, #3
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	440a      	add	r2, r1
 800417e:	7812      	ldrb	r2, [r2, #0]
 8004180:	4313      	orrs	r3, r2
 8004182:	2200      	movs	r2, #0
 8004184:	4698      	mov	r8, r3
 8004186:	4691      	mov	r9, r2
 8004188:	4642      	mov	r2, r8
 800418a:	464b      	mov	r3, r9
 800418c:	4601      	mov	r1, r0
 800418e:	2002      	movs	r0, #2
 8004190:	f7fc fcba 	bl	8000b08 <HAL_FLASH_Program>
		i+=4;
 8004194:	8afb      	ldrh	r3, [r7, #22]
 8004196:	3304      	adds	r3, #4
 8004198:	82fb      	strh	r3, [r7, #22]
	while(i != (fpages*4)){
 800419a:	8afa      	ldrh	r2, [r7, #22]
 800419c:	89fb      	ldrh	r3, [r7, #14]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d1cf      	bne.n	8004144 <Flash_Write+0x4c>
	}
	if(lbytes != 0){
 80041a4:	89bb      	ldrh	r3, [r7, #12]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d042      	beq.n	8004230 <Flash_Write+0x138>
		uint32_t wdata = 0;
 80041aa:	2300      	movs	r3, #0
 80041ac:	613b      	str	r3, [r7, #16]
		if(lbytes == 3){
 80041ae:	89bb      	ldrh	r3, [r7, #12]
 80041b0:	2b03      	cmp	r3, #3
 80041b2:	d114      	bne.n	80041de <Flash_Write+0xe6>
			wdata = ((uint32_t)data[i]<<24)|((uint32_t)data[i+1]<<16)|((uint32_t)data[i+2]<<8);
 80041b4:	8afb      	ldrh	r3, [r7, #22]
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	4413      	add	r3, r2
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	061a      	lsls	r2, r3, #24
 80041be:	8afb      	ldrh	r3, [r7, #22]
 80041c0:	3301      	adds	r3, #1
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	440b      	add	r3, r1
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	041b      	lsls	r3, r3, #16
 80041ca:	431a      	orrs	r2, r3
 80041cc:	8afb      	ldrh	r3, [r7, #22]
 80041ce:	3302      	adds	r3, #2
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	440b      	add	r3, r1
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	021b      	lsls	r3, r3, #8
 80041d8:	4313      	orrs	r3, r2
 80041da:	613b      	str	r3, [r7, #16]
 80041dc:	e019      	b.n	8004212 <Flash_Write+0x11a>
		}
		else if(lbytes == 2){
 80041de:	89bb      	ldrh	r3, [r7, #12]
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d10d      	bne.n	8004200 <Flash_Write+0x108>
			wdata = ((uint32_t)data[i]<<24)|((uint32_t)data[i+1]<<16);
 80041e4:	8afb      	ldrh	r3, [r7, #22]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	4413      	add	r3, r2
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	061a      	lsls	r2, r3, #24
 80041ee:	8afb      	ldrh	r3, [r7, #22]
 80041f0:	3301      	adds	r3, #1
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	440b      	add	r3, r1
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	041b      	lsls	r3, r3, #16
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
 80041fe:	e008      	b.n	8004212 <Flash_Write+0x11a>
		}
		else if(lbytes == 1){
 8004200:	89bb      	ldrh	r3, [r7, #12]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d105      	bne.n	8004212 <Flash_Write+0x11a>
			wdata = ((uint32_t)data[i]<<24);
 8004206:	8afb      	ldrh	r3, [r7, #22]
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	4413      	add	r3, r2
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	061b      	lsls	r3, r3, #24
 8004210:	613b      	str	r3, [r7, #16]
		}
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800C000+i, wdata);
 8004212:	8afb      	ldrh	r3, [r7, #22]
 8004214:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8004218:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 800421c:	4619      	mov	r1, r3
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	2200      	movs	r2, #0
 8004222:	461c      	mov	r4, r3
 8004224:	4615      	mov	r5, r2
 8004226:	4622      	mov	r2, r4
 8004228:	462b      	mov	r3, r5
 800422a:	2002      	movs	r0, #2
 800422c:	f7fc fc6c 	bl	8000b08 <HAL_FLASH_Program>
	}

	HAL_FLASH_Lock();
 8004230:	f7fc fd00 	bl	8000c34 <HAL_FLASH_Lock>
	return ErrorCode;
 8004234:	68bb      	ldr	r3, [r7, #8]
}
 8004236:	4618      	mov	r0, r3
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004240:	20000eec 	.word	0x20000eec
 8004244:	0800c000 	.word	0x0800c000

08004248 <General_Copy>:
#include <stdlib.h>
#include "main.h"

static char general_tmp[3];

void General_Copy(uint8_t *from, uint8_t *to, uint16_t length){
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	4613      	mov	r3, r2
 8004254:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 8004256:	2300      	movs	r3, #0
 8004258:	82fb      	strh	r3, [r7, #22]
	while(i != length){
 800425a:	e00a      	b.n	8004272 <General_Copy+0x2a>
		to[i] = from[i];
 800425c:	8afb      	ldrh	r3, [r7, #22]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	441a      	add	r2, r3
 8004262:	8afb      	ldrh	r3, [r7, #22]
 8004264:	68b9      	ldr	r1, [r7, #8]
 8004266:	440b      	add	r3, r1
 8004268:	7812      	ldrb	r2, [r2, #0]
 800426a:	701a      	strb	r2, [r3, #0]
		i++;
 800426c:	8afb      	ldrh	r3, [r7, #22]
 800426e:	3301      	adds	r3, #1
 8004270:	82fb      	strh	r3, [r7, #22]
	while(i != length){
 8004272:	8afa      	ldrh	r2, [r7, #22]
 8004274:	88fb      	ldrh	r3, [r7, #6]
 8004276:	429a      	cmp	r2, r3
 8004278:	d1f0      	bne.n	800425c <General_Copy+0x14>
	}
}
 800427a:	bf00      	nop
 800427c:	bf00      	nop
 800427e:	371c      	adds	r7, #28
 8004280:	46bd      	mov	sp, r7
 8004282:	bc80      	pop	{r7}
 8004284:	4770      	bx	lr

08004286 <General_Copy_Float>:
void General_Copy_Float(float *from, float *to, uint16_t length){
 8004286:	b480      	push	{r7}
 8004288:	b087      	sub	sp, #28
 800428a:	af00      	add	r7, sp, #0
 800428c:	60f8      	str	r0, [r7, #12]
 800428e:	60b9      	str	r1, [r7, #8]
 8004290:	4613      	mov	r3, r2
 8004292:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 8004294:	2300      	movs	r3, #0
 8004296:	82fb      	strh	r3, [r7, #22]
	while(i != length){
 8004298:	e00c      	b.n	80042b4 <General_Copy_Float+0x2e>
		to[i] = from[i];
 800429a:	8afb      	ldrh	r3, [r7, #22]
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	441a      	add	r2, r3
 80042a2:	8afb      	ldrh	r3, [r7, #22]
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	68b9      	ldr	r1, [r7, #8]
 80042a8:	440b      	add	r3, r1
 80042aa:	6812      	ldr	r2, [r2, #0]
 80042ac:	601a      	str	r2, [r3, #0]
		i++;
 80042ae:	8afb      	ldrh	r3, [r7, #22]
 80042b0:	3301      	adds	r3, #1
 80042b2:	82fb      	strh	r3, [r7, #22]
	while(i != length){
 80042b4:	8afa      	ldrh	r2, [r7, #22]
 80042b6:	88fb      	ldrh	r3, [r7, #6]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d1ee      	bne.n	800429a <General_Copy_Float+0x14>
	}
}
 80042bc:	bf00      	nop
 80042be:	bf00      	nop
 80042c0:	371c      	adds	r7, #28
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bc80      	pop	{r7}
 80042c6:	4770      	bx	lr

080042c8 <Led_Init>:
uint8_t led_current_breathing_light_level_is_rising_or_falling = 0;
uint32_t led_how_much_ms_passed_since_last_direction_change = 0;
uint8_t led_current_breathing_speed = 2;
uint8_t led_current_level_in_breathing_sample = 0;

void Led_Init(){
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80042cc:	2104      	movs	r1, #4
 80042ce:	4802      	ldr	r0, [pc, #8]	; (80042d8 <Led_Init+0x10>)
 80042d0:	f7fd fd28 	bl	8001d24 <HAL_TIM_PWM_Start>
}
 80042d4:	bf00      	nop
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	20000f78 	.word	0x20000f78

080042dc <Led_On>:
void Led_On(){
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
	led_active = 1;
 80042e0:	4b03      	ldr	r3, [pc, #12]	; (80042f0 <Led_On+0x14>)
 80042e2:	2201      	movs	r2, #1
 80042e4:	701a      	strb	r2, [r3, #0]
}
 80042e6:	bf00      	nop
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bc80      	pop	{r7}
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	20000006 	.word	0x20000006

080042f4 <Led_Off>:
void Led_Off(){
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
	led_active = 0;
 80042f8:	4b05      	ldr	r3, [pc, #20]	; (8004310 <Led_Off+0x1c>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	701a      	strb	r2, [r3, #0]
	TIM2 -> CCR2 = 0;
 80042fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004302:	2200      	movs	r2, #0
 8004304:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004306:	bf00      	nop
 8004308:	46bd      	mov	sp, r7
 800430a:	bc80      	pop	{r7}
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	20000006 	.word	0x20000006

08004314 <Led_Breath>:
void Led_Breath(uint8_t is_moving, uint8_t no_settings){
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	4603      	mov	r3, r0
 800431c:	460a      	mov	r2, r1
 800431e:	71fb      	strb	r3, [r7, #7]
 8004320:	4613      	mov	r3, r2
 8004322:	71bb      	strb	r3, [r7, #6]
	if((is_moving > 0)&&(no_settings == 1)){
 8004324:	79fb      	ldrb	r3, [r7, #7]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00d      	beq.n	8004346 <Led_Breath+0x32>
 800432a:	79bb      	ldrb	r3, [r7, #6]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d10a      	bne.n	8004346 <Led_Breath+0x32>
		if(led_how_much_ms_passed_since_last_direction_change < 75999){
 8004330:	4b38      	ldr	r3, [pc, #224]	; (8004414 <Led_Breath+0x100>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a38      	ldr	r2, [pc, #224]	; (8004418 <Led_Breath+0x104>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d817      	bhi.n	800436a <Led_Breath+0x56>
			led_how_much_ms_passed_since_last_direction_change++;
 800433a:	4b36      	ldr	r3, [pc, #216]	; (8004414 <Led_Breath+0x100>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	3301      	adds	r3, #1
 8004340:	4a34      	ldr	r2, [pc, #208]	; (8004414 <Led_Breath+0x100>)
 8004342:	6013      	str	r3, [r2, #0]
		if(led_how_much_ms_passed_since_last_direction_change < 75999){
 8004344:	e011      	b.n	800436a <Led_Breath+0x56>
		}
	}else{
		uint8_t i = 2;//2 times faster cooldown from fast to normal breathing speed
 8004346:	2302      	movs	r3, #2
 8004348:	73fb      	strb	r3, [r7, #15]
		while(i != 0){
 800434a:	e00b      	b.n	8004364 <Led_Breath+0x50>
			if(led_how_much_ms_passed_since_last_direction_change > 0){
 800434c:	4b31      	ldr	r3, [pc, #196]	; (8004414 <Led_Breath+0x100>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d004      	beq.n	800435e <Led_Breath+0x4a>
				led_how_much_ms_passed_since_last_direction_change--;
 8004354:	4b2f      	ldr	r3, [pc, #188]	; (8004414 <Led_Breath+0x100>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3b01      	subs	r3, #1
 800435a:	4a2e      	ldr	r2, [pc, #184]	; (8004414 <Led_Breath+0x100>)
 800435c:	6013      	str	r3, [r2, #0]
			}
			i--;
 800435e:	7bfb      	ldrb	r3, [r7, #15]
 8004360:	3b01      	subs	r3, #1
 8004362:	73fb      	strb	r3, [r7, #15]
		while(i != 0){
 8004364:	7bfb      	ldrb	r3, [r7, #15]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f0      	bne.n	800434c <Led_Breath+0x38>
	}

	//Setting breathing speed, 21 = normal, 2 = fastest
	//Total time for 19step = 76sec
	//One step increase in every 4s and decrease in every 2s if direction is falling
	led_current_breathing_speed = (uint8_t)(((uint32_t)19-(((uint32_t)led_how_much_ms_passed_since_last_direction_change+(uint32_t)1)/(uint32_t)4000))+(uint32_t)2);
 800436a:	4b2a      	ldr	r3, [pc, #168]	; (8004414 <Led_Breath+0x100>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	3301      	adds	r3, #1
 8004370:	4a2a      	ldr	r2, [pc, #168]	; (800441c <Led_Breath+0x108>)
 8004372:	fba2 2303 	umull	r2, r3, r2, r3
 8004376:	0a1b      	lsrs	r3, r3, #8
 8004378:	b2db      	uxtb	r3, r3
 800437a:	f1c3 0315 	rsb	r3, r3, #21
 800437e:	b2da      	uxtb	r2, r3
 8004380:	4b27      	ldr	r3, [pc, #156]	; (8004420 <Led_Breath+0x10c>)
 8004382:	701a      	strb	r2, [r3, #0]

	//Breath
	if(led_active == 1){
 8004384:	4b27      	ldr	r3, [pc, #156]	; (8004424 <Led_Breath+0x110>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d13e      	bne.n	800440a <Led_Breath+0xf6>
		led_current_level_in_breathing_sample++;
 800438c:	4b26      	ldr	r3, [pc, #152]	; (8004428 <Led_Breath+0x114>)
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	3301      	adds	r3, #1
 8004392:	b2da      	uxtb	r2, r3
 8004394:	4b24      	ldr	r3, [pc, #144]	; (8004428 <Led_Breath+0x114>)
 8004396:	701a      	strb	r2, [r3, #0]
		if(led_current_level_in_breathing_sample > led_current_breathing_speed){
 8004398:	4b23      	ldr	r3, [pc, #140]	; (8004428 <Led_Breath+0x114>)
 800439a:	781a      	ldrb	r2, [r3, #0]
 800439c:	4b20      	ldr	r3, [pc, #128]	; (8004420 <Led_Breath+0x10c>)
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d903      	bls.n	80043ac <Led_Breath+0x98>
			led_current_level_in_breathing_sample = led_current_breathing_speed;
 80043a4:	4b1e      	ldr	r3, [pc, #120]	; (8004420 <Led_Breath+0x10c>)
 80043a6:	781a      	ldrb	r2, [r3, #0]
 80043a8:	4b1f      	ldr	r3, [pc, #124]	; (8004428 <Led_Breath+0x114>)
 80043aa:	701a      	strb	r2, [r3, #0]
		}
		if(led_current_level_in_breathing_sample == led_current_breathing_speed){
 80043ac:	4b1e      	ldr	r3, [pc, #120]	; (8004428 <Led_Breath+0x114>)
 80043ae:	781a      	ldrb	r2, [r3, #0]
 80043b0:	4b1b      	ldr	r3, [pc, #108]	; (8004420 <Led_Breath+0x10c>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d128      	bne.n	800440a <Led_Breath+0xf6>
			led_current_level_in_breathing_sample = 0;
 80043b8:	4b1b      	ldr	r3, [pc, #108]	; (8004428 <Led_Breath+0x114>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	701a      	strb	r2, [r3, #0]

			//Breathing from HERE
			TIM2 -> CCR2 = led_current_breathing_light_level;
 80043be:	4b1b      	ldr	r3, [pc, #108]	; (800442c <Led_Breath+0x118>)
 80043c0:	781a      	ldrb	r2, [r3, #0]
 80043c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043c6:	639a      	str	r2, [r3, #56]	; 0x38
			if(led_current_breathing_light_level_is_rising_or_falling == 0){
 80043c8:	4b19      	ldr	r3, [pc, #100]	; (8004430 <Led_Breath+0x11c>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10e      	bne.n	80043ee <Led_Breath+0xda>
				if(led_current_breathing_light_level < 63){
 80043d0:	4b16      	ldr	r3, [pc, #88]	; (800442c <Led_Breath+0x118>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b3e      	cmp	r3, #62	; 0x3e
 80043d6:	d806      	bhi.n	80043e6 <Led_Breath+0xd2>
					led_current_breathing_light_level++;
 80043d8:	4b14      	ldr	r3, [pc, #80]	; (800442c <Led_Breath+0x118>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	3301      	adds	r3, #1
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	4b12      	ldr	r3, [pc, #72]	; (800442c <Led_Breath+0x118>)
 80043e2:	701a      	strb	r2, [r3, #0]
			}
			//To HERE

		}
	}
 80043e4:	e011      	b.n	800440a <Led_Breath+0xf6>
					led_current_breathing_light_level_is_rising_or_falling = 1;
 80043e6:	4b12      	ldr	r3, [pc, #72]	; (8004430 <Led_Breath+0x11c>)
 80043e8:	2201      	movs	r2, #1
 80043ea:	701a      	strb	r2, [r3, #0]
 80043ec:	e00d      	b.n	800440a <Led_Breath+0xf6>
				if(led_current_breathing_light_level > 2){
 80043ee:	4b0f      	ldr	r3, [pc, #60]	; (800442c <Led_Breath+0x118>)
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d906      	bls.n	8004404 <Led_Breath+0xf0>
					led_current_breathing_light_level--;
 80043f6:	4b0d      	ldr	r3, [pc, #52]	; (800442c <Led_Breath+0x118>)
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	4b0b      	ldr	r3, [pc, #44]	; (800442c <Led_Breath+0x118>)
 8004400:	701a      	strb	r2, [r3, #0]
 8004402:	e002      	b.n	800440a <Led_Breath+0xf6>
					led_current_breathing_light_level_is_rising_or_falling = 0;
 8004404:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <Led_Breath+0x11c>)
 8004406:	2200      	movs	r2, #0
 8004408:	701a      	strb	r2, [r3, #0]
 800440a:	bf00      	nop
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr
 8004414:	20000f00 	.word	0x20000f00
 8004418:	000128de 	.word	0x000128de
 800441c:	10624dd3 	.word	0x10624dd3
 8004420:	20000007 	.word	0x20000007
 8004424:	20000006 	.word	0x20000006
 8004428:	20000f04 	.word	0x20000f04
 800442c:	20000efc 	.word	0x20000efc
 8004430:	20000efd 	.word	0x20000efd

08004434 <Servo_Set>:
int8_t servo_calibration_values[8] = {
	0,0,0,0,0,0,0,0
};

//Base
void Servo_Set(float *values){
 8004434:	b590      	push	{r4, r7, lr}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
	TIM3 -> CCR1 = servo_min_pwm + (servo_calibration_values[0]*servo_calibration_step_pwm) + (values[0]*servo_movement_step_pwm);
 800443c:	4ba1      	ldr	r3, [pc, #644]	; (80046c4 <Servo_Set+0x290>)
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	461a      	mov	r2, r3
 8004442:	4ba1      	ldr	r3, [pc, #644]	; (80046c8 <Servo_Set+0x294>)
 8004444:	f993 3000 	ldrsb.w	r3, [r3]
 8004448:	4619      	mov	r1, r3
 800444a:	4ba0      	ldr	r3, [pc, #640]	; (80046cc <Servo_Set+0x298>)
 800444c:	881b      	ldrh	r3, [r3, #0]
 800444e:	fb01 f303 	mul.w	r3, r1, r3
 8004452:	4413      	add	r3, r2
 8004454:	4618      	mov	r0, r3
 8004456:	f7fb ff33 	bl	80002c0 <__aeabi_i2f>
 800445a:	4604      	mov	r4, r0
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a9b      	ldr	r2, [pc, #620]	; (80046d0 <Servo_Set+0x29c>)
 8004462:	6812      	ldr	r2, [r2, #0]
 8004464:	4611      	mov	r1, r2
 8004466:	4618      	mov	r0, r3
 8004468:	f7fb ff7e 	bl	8000368 <__aeabi_fmul>
 800446c:	4603      	mov	r3, r0
 800446e:	4619      	mov	r1, r3
 8004470:	4620      	mov	r0, r4
 8004472:	f7fb fe71 	bl	8000158 <__addsf3>
 8004476:	4603      	mov	r3, r0
 8004478:	4c96      	ldr	r4, [pc, #600]	; (80046d4 <Servo_Set+0x2a0>)
 800447a:	4618      	mov	r0, r3
 800447c:	f7fc f8c4 	bl	8000608 <__aeabi_f2uiz>
 8004480:	4603      	mov	r3, r0
 8004482:	6363      	str	r3, [r4, #52]	; 0x34
	TIM3 -> CCR2 = servo_min_pwm + (servo_calibration_values[1]*servo_calibration_step_pwm) + ((100-values[1])*servo_movement_step_pwm);
 8004484:	4b8f      	ldr	r3, [pc, #572]	; (80046c4 <Servo_Set+0x290>)
 8004486:	881b      	ldrh	r3, [r3, #0]
 8004488:	461a      	mov	r2, r3
 800448a:	4b8f      	ldr	r3, [pc, #572]	; (80046c8 <Servo_Set+0x294>)
 800448c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004490:	4619      	mov	r1, r3
 8004492:	4b8e      	ldr	r3, [pc, #568]	; (80046cc <Servo_Set+0x298>)
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	fb01 f303 	mul.w	r3, r1, r3
 800449a:	4413      	add	r3, r2
 800449c:	4618      	mov	r0, r3
 800449e:	f7fb ff0f 	bl	80002c0 <__aeabi_i2f>
 80044a2:	4604      	mov	r4, r0
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3304      	adds	r3, #4
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4619      	mov	r1, r3
 80044ac:	488a      	ldr	r0, [pc, #552]	; (80046d8 <Servo_Set+0x2a4>)
 80044ae:	f7fb fe51 	bl	8000154 <__aeabi_fsub>
 80044b2:	4603      	mov	r3, r0
 80044b4:	461a      	mov	r2, r3
 80044b6:	4b86      	ldr	r3, [pc, #536]	; (80046d0 <Servo_Set+0x29c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4619      	mov	r1, r3
 80044bc:	4610      	mov	r0, r2
 80044be:	f7fb ff53 	bl	8000368 <__aeabi_fmul>
 80044c2:	4603      	mov	r3, r0
 80044c4:	4619      	mov	r1, r3
 80044c6:	4620      	mov	r0, r4
 80044c8:	f7fb fe46 	bl	8000158 <__addsf3>
 80044cc:	4603      	mov	r3, r0
 80044ce:	4c81      	ldr	r4, [pc, #516]	; (80046d4 <Servo_Set+0x2a0>)
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7fc f899 	bl	8000608 <__aeabi_f2uiz>
 80044d6:	4603      	mov	r3, r0
 80044d8:	63a3      	str	r3, [r4, #56]	; 0x38
	TIM3 -> CCR3 = servo_min_pwm + (servo_calibration_values[2]*servo_calibration_step_pwm) + (values[2]*servo_movement_step_pwm);
 80044da:	4b7a      	ldr	r3, [pc, #488]	; (80046c4 <Servo_Set+0x290>)
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	461a      	mov	r2, r3
 80044e0:	4b79      	ldr	r3, [pc, #484]	; (80046c8 <Servo_Set+0x294>)
 80044e2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80044e6:	4619      	mov	r1, r3
 80044e8:	4b78      	ldr	r3, [pc, #480]	; (80046cc <Servo_Set+0x298>)
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	fb01 f303 	mul.w	r3, r1, r3
 80044f0:	4413      	add	r3, r2
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fb fee4 	bl	80002c0 <__aeabi_i2f>
 80044f8:	4604      	mov	r4, r0
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	3308      	adds	r3, #8
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a73      	ldr	r2, [pc, #460]	; (80046d0 <Servo_Set+0x29c>)
 8004502:	6812      	ldr	r2, [r2, #0]
 8004504:	4611      	mov	r1, r2
 8004506:	4618      	mov	r0, r3
 8004508:	f7fb ff2e 	bl	8000368 <__aeabi_fmul>
 800450c:	4603      	mov	r3, r0
 800450e:	4619      	mov	r1, r3
 8004510:	4620      	mov	r0, r4
 8004512:	f7fb fe21 	bl	8000158 <__addsf3>
 8004516:	4603      	mov	r3, r0
 8004518:	4c6e      	ldr	r4, [pc, #440]	; (80046d4 <Servo_Set+0x2a0>)
 800451a:	4618      	mov	r0, r3
 800451c:	f7fc f874 	bl	8000608 <__aeabi_f2uiz>
 8004520:	4603      	mov	r3, r0
 8004522:	63e3      	str	r3, [r4, #60]	; 0x3c
	TIM3 -> CCR4 = servo_min_pwm + (servo_calibration_values[3]*servo_calibration_step_pwm) + ((100-values[3])*servo_movement_step_pwm);
 8004524:	4b67      	ldr	r3, [pc, #412]	; (80046c4 <Servo_Set+0x290>)
 8004526:	881b      	ldrh	r3, [r3, #0]
 8004528:	461a      	mov	r2, r3
 800452a:	4b67      	ldr	r3, [pc, #412]	; (80046c8 <Servo_Set+0x294>)
 800452c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8004530:	4619      	mov	r1, r3
 8004532:	4b66      	ldr	r3, [pc, #408]	; (80046cc <Servo_Set+0x298>)
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	fb01 f303 	mul.w	r3, r1, r3
 800453a:	4413      	add	r3, r2
 800453c:	4618      	mov	r0, r3
 800453e:	f7fb febf 	bl	80002c0 <__aeabi_i2f>
 8004542:	4604      	mov	r4, r0
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	330c      	adds	r3, #12
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4619      	mov	r1, r3
 800454c:	4862      	ldr	r0, [pc, #392]	; (80046d8 <Servo_Set+0x2a4>)
 800454e:	f7fb fe01 	bl	8000154 <__aeabi_fsub>
 8004552:	4603      	mov	r3, r0
 8004554:	461a      	mov	r2, r3
 8004556:	4b5e      	ldr	r3, [pc, #376]	; (80046d0 <Servo_Set+0x29c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4619      	mov	r1, r3
 800455c:	4610      	mov	r0, r2
 800455e:	f7fb ff03 	bl	8000368 <__aeabi_fmul>
 8004562:	4603      	mov	r3, r0
 8004564:	4619      	mov	r1, r3
 8004566:	4620      	mov	r0, r4
 8004568:	f7fb fdf6 	bl	8000158 <__addsf3>
 800456c:	4603      	mov	r3, r0
 800456e:	4c59      	ldr	r4, [pc, #356]	; (80046d4 <Servo_Set+0x2a0>)
 8004570:	4618      	mov	r0, r3
 8004572:	f7fc f849 	bl	8000608 <__aeabi_f2uiz>
 8004576:	4603      	mov	r3, r0
 8004578:	6423      	str	r3, [r4, #64]	; 0x40

	TIM4 -> CCR1 = servo_min_pwm + (servo_calibration_values[4]*servo_calibration_step_pwm) + (values[4]*servo_movement_step_pwm);
 800457a:	4b52      	ldr	r3, [pc, #328]	; (80046c4 <Servo_Set+0x290>)
 800457c:	881b      	ldrh	r3, [r3, #0]
 800457e:	461a      	mov	r2, r3
 8004580:	4b51      	ldr	r3, [pc, #324]	; (80046c8 <Servo_Set+0x294>)
 8004582:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8004586:	4619      	mov	r1, r3
 8004588:	4b50      	ldr	r3, [pc, #320]	; (80046cc <Servo_Set+0x298>)
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	fb01 f303 	mul.w	r3, r1, r3
 8004590:	4413      	add	r3, r2
 8004592:	4618      	mov	r0, r3
 8004594:	f7fb fe94 	bl	80002c0 <__aeabi_i2f>
 8004598:	4604      	mov	r4, r0
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	3310      	adds	r3, #16
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a4b      	ldr	r2, [pc, #300]	; (80046d0 <Servo_Set+0x29c>)
 80045a2:	6812      	ldr	r2, [r2, #0]
 80045a4:	4611      	mov	r1, r2
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fb fede 	bl	8000368 <__aeabi_fmul>
 80045ac:	4603      	mov	r3, r0
 80045ae:	4619      	mov	r1, r3
 80045b0:	4620      	mov	r0, r4
 80045b2:	f7fb fdd1 	bl	8000158 <__addsf3>
 80045b6:	4603      	mov	r3, r0
 80045b8:	4c48      	ldr	r4, [pc, #288]	; (80046dc <Servo_Set+0x2a8>)
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fc f824 	bl	8000608 <__aeabi_f2uiz>
 80045c0:	4603      	mov	r3, r0
 80045c2:	6363      	str	r3, [r4, #52]	; 0x34
	TIM4 -> CCR2 = servo_min_pwm + (servo_calibration_values[5]*servo_calibration_step_pwm) + ((100-values[5])*servo_movement_step_pwm);
 80045c4:	4b3f      	ldr	r3, [pc, #252]	; (80046c4 <Servo_Set+0x290>)
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	461a      	mov	r2, r3
 80045ca:	4b3f      	ldr	r3, [pc, #252]	; (80046c8 <Servo_Set+0x294>)
 80045cc:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80045d0:	4619      	mov	r1, r3
 80045d2:	4b3e      	ldr	r3, [pc, #248]	; (80046cc <Servo_Set+0x298>)
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	fb01 f303 	mul.w	r3, r1, r3
 80045da:	4413      	add	r3, r2
 80045dc:	4618      	mov	r0, r3
 80045de:	f7fb fe6f 	bl	80002c0 <__aeabi_i2f>
 80045e2:	4604      	mov	r4, r0
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3314      	adds	r3, #20
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4619      	mov	r1, r3
 80045ec:	483a      	ldr	r0, [pc, #232]	; (80046d8 <Servo_Set+0x2a4>)
 80045ee:	f7fb fdb1 	bl	8000154 <__aeabi_fsub>
 80045f2:	4603      	mov	r3, r0
 80045f4:	461a      	mov	r2, r3
 80045f6:	4b36      	ldr	r3, [pc, #216]	; (80046d0 <Servo_Set+0x29c>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4619      	mov	r1, r3
 80045fc:	4610      	mov	r0, r2
 80045fe:	f7fb feb3 	bl	8000368 <__aeabi_fmul>
 8004602:	4603      	mov	r3, r0
 8004604:	4619      	mov	r1, r3
 8004606:	4620      	mov	r0, r4
 8004608:	f7fb fda6 	bl	8000158 <__addsf3>
 800460c:	4603      	mov	r3, r0
 800460e:	4c33      	ldr	r4, [pc, #204]	; (80046dc <Servo_Set+0x2a8>)
 8004610:	4618      	mov	r0, r3
 8004612:	f7fb fff9 	bl	8000608 <__aeabi_f2uiz>
 8004616:	4603      	mov	r3, r0
 8004618:	63a3      	str	r3, [r4, #56]	; 0x38
	TIM4 -> CCR3 = servo_min_pwm + (servo_calibration_values[6]*servo_calibration_step_pwm) + (values[6]*servo_movement_step_pwm);
 800461a:	4b2a      	ldr	r3, [pc, #168]	; (80046c4 <Servo_Set+0x290>)
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	461a      	mov	r2, r3
 8004620:	4b29      	ldr	r3, [pc, #164]	; (80046c8 <Servo_Set+0x294>)
 8004622:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8004626:	4619      	mov	r1, r3
 8004628:	4b28      	ldr	r3, [pc, #160]	; (80046cc <Servo_Set+0x298>)
 800462a:	881b      	ldrh	r3, [r3, #0]
 800462c:	fb01 f303 	mul.w	r3, r1, r3
 8004630:	4413      	add	r3, r2
 8004632:	4618      	mov	r0, r3
 8004634:	f7fb fe44 	bl	80002c0 <__aeabi_i2f>
 8004638:	4604      	mov	r4, r0
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3318      	adds	r3, #24
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a23      	ldr	r2, [pc, #140]	; (80046d0 <Servo_Set+0x29c>)
 8004642:	6812      	ldr	r2, [r2, #0]
 8004644:	4611      	mov	r1, r2
 8004646:	4618      	mov	r0, r3
 8004648:	f7fb fe8e 	bl	8000368 <__aeabi_fmul>
 800464c:	4603      	mov	r3, r0
 800464e:	4619      	mov	r1, r3
 8004650:	4620      	mov	r0, r4
 8004652:	f7fb fd81 	bl	8000158 <__addsf3>
 8004656:	4603      	mov	r3, r0
 8004658:	4c20      	ldr	r4, [pc, #128]	; (80046dc <Servo_Set+0x2a8>)
 800465a:	4618      	mov	r0, r3
 800465c:	f7fb ffd4 	bl	8000608 <__aeabi_f2uiz>
 8004660:	4603      	mov	r3, r0
 8004662:	63e3      	str	r3, [r4, #60]	; 0x3c
	TIM4 -> CCR4 = servo_min_pwm + (servo_calibration_values[7]*servo_calibration_step_pwm) + ((100-values[7])*servo_movement_step_pwm);
 8004664:	4b17      	ldr	r3, [pc, #92]	; (80046c4 <Servo_Set+0x290>)
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	461a      	mov	r2, r3
 800466a:	4b17      	ldr	r3, [pc, #92]	; (80046c8 <Servo_Set+0x294>)
 800466c:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8004670:	4619      	mov	r1, r3
 8004672:	4b16      	ldr	r3, [pc, #88]	; (80046cc <Servo_Set+0x298>)
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	fb01 f303 	mul.w	r3, r1, r3
 800467a:	4413      	add	r3, r2
 800467c:	4618      	mov	r0, r3
 800467e:	f7fb fe1f 	bl	80002c0 <__aeabi_i2f>
 8004682:	4604      	mov	r4, r0
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	331c      	adds	r3, #28
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4619      	mov	r1, r3
 800468c:	4812      	ldr	r0, [pc, #72]	; (80046d8 <Servo_Set+0x2a4>)
 800468e:	f7fb fd61 	bl	8000154 <__aeabi_fsub>
 8004692:	4603      	mov	r3, r0
 8004694:	461a      	mov	r2, r3
 8004696:	4b0e      	ldr	r3, [pc, #56]	; (80046d0 <Servo_Set+0x29c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4619      	mov	r1, r3
 800469c:	4610      	mov	r0, r2
 800469e:	f7fb fe63 	bl	8000368 <__aeabi_fmul>
 80046a2:	4603      	mov	r3, r0
 80046a4:	4619      	mov	r1, r3
 80046a6:	4620      	mov	r0, r4
 80046a8:	f7fb fd56 	bl	8000158 <__addsf3>
 80046ac:	4603      	mov	r3, r0
 80046ae:	4c0b      	ldr	r4, [pc, #44]	; (80046dc <Servo_Set+0x2a8>)
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7fb ffa9 	bl	8000608 <__aeabi_f2uiz>
 80046b6:	4603      	mov	r3, r0
 80046b8:	6423      	str	r3, [r4, #64]	; 0x40
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd90      	pop	{r4, r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20000b88 	.word	0x20000b88
 80046c8:	20000f0c 	.word	0x20000f0c
 80046cc:	20000b8c 	.word	0x20000b8c
 80046d0:	20000f08 	.word	0x20000f08
 80046d4:	40000400 	.word	0x40000400
 80046d8:	42c80000 	.word	0x42c80000
 80046dc:	40000800 	.word	0x40000800

080046e0 <Servo_Init>:
void Servo_Init(){
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
	servo_max_pwm -= servo_calibration_step_pwm * 9;
 80046e4:	4b26      	ldr	r3, [pc, #152]	; (8004780 <Servo_Init+0xa0>)
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	461a      	mov	r2, r3
 80046ea:	0352      	lsls	r2, r2, #13
 80046ec:	1ad2      	subs	r2, r2, r3
 80046ee:	00d2      	lsls	r2, r2, #3
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	4b23      	ldr	r3, [pc, #140]	; (8004784 <Servo_Init+0xa4>)
 80046f6:	881b      	ldrh	r3, [r3, #0]
 80046f8:	4413      	add	r3, r2
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	4b21      	ldr	r3, [pc, #132]	; (8004784 <Servo_Init+0xa4>)
 80046fe:	801a      	strh	r2, [r3, #0]
	servo_min_pwm += servo_calibration_step_pwm * 9;
 8004700:	4b1f      	ldr	r3, [pc, #124]	; (8004780 <Servo_Init+0xa0>)
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	461a      	mov	r2, r3
 8004706:	00d2      	lsls	r2, r2, #3
 8004708:	4413      	add	r3, r2
 800470a:	b29a      	uxth	r2, r3
 800470c:	4b1e      	ldr	r3, [pc, #120]	; (8004788 <Servo_Init+0xa8>)
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	4413      	add	r3, r2
 8004712:	b29a      	uxth	r2, r3
 8004714:	4b1c      	ldr	r3, [pc, #112]	; (8004788 <Servo_Init+0xa8>)
 8004716:	801a      	strh	r2, [r3, #0]
	servo_movement_step_pwm = (servo_max_pwm - servo_min_pwm)/100.0f;
 8004718:	4b1a      	ldr	r3, [pc, #104]	; (8004784 <Servo_Init+0xa4>)
 800471a:	881b      	ldrh	r3, [r3, #0]
 800471c:	461a      	mov	r2, r3
 800471e:	4b1a      	ldr	r3, [pc, #104]	; (8004788 <Servo_Init+0xa8>)
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	4618      	mov	r0, r3
 8004726:	f7fb fdcb 	bl	80002c0 <__aeabi_i2f>
 800472a:	4603      	mov	r3, r0
 800472c:	4917      	ldr	r1, [pc, #92]	; (800478c <Servo_Init+0xac>)
 800472e:	4618      	mov	r0, r3
 8004730:	f7fb fece 	bl	80004d0 <__aeabi_fdiv>
 8004734:	4603      	mov	r3, r0
 8004736:	461a      	mov	r2, r3
 8004738:	4b15      	ldr	r3, [pc, #84]	; (8004790 <Servo_Init+0xb0>)
 800473a:	601a      	str	r2, [r3, #0]

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800473c:	2100      	movs	r1, #0
 800473e:	4815      	ldr	r0, [pc, #84]	; (8004794 <Servo_Init+0xb4>)
 8004740:	f7fd faf0 	bl	8001d24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8004744:	2104      	movs	r1, #4
 8004746:	4813      	ldr	r0, [pc, #76]	; (8004794 <Servo_Init+0xb4>)
 8004748:	f7fd faec 	bl	8001d24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800474c:	2108      	movs	r1, #8
 800474e:	4811      	ldr	r0, [pc, #68]	; (8004794 <Servo_Init+0xb4>)
 8004750:	f7fd fae8 	bl	8001d24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8004754:	210c      	movs	r1, #12
 8004756:	480f      	ldr	r0, [pc, #60]	; (8004794 <Servo_Init+0xb4>)
 8004758:	f7fd fae4 	bl	8001d24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800475c:	2100      	movs	r1, #0
 800475e:	480e      	ldr	r0, [pc, #56]	; (8004798 <Servo_Init+0xb8>)
 8004760:	f7fd fae0 	bl	8001d24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8004764:	2104      	movs	r1, #4
 8004766:	480c      	ldr	r0, [pc, #48]	; (8004798 <Servo_Init+0xb8>)
 8004768:	f7fd fadc 	bl	8001d24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800476c:	2108      	movs	r1, #8
 800476e:	480a      	ldr	r0, [pc, #40]	; (8004798 <Servo_Init+0xb8>)
 8004770:	f7fd fad8 	bl	8001d24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004774:	210c      	movs	r1, #12
 8004776:	4808      	ldr	r0, [pc, #32]	; (8004798 <Servo_Init+0xb8>)
 8004778:	f7fd fad4 	bl	8001d24 <HAL_TIM_PWM_Start>
}
 800477c:	bf00      	nop
 800477e:	bd80      	pop	{r7, pc}
 8004780:	20000b8c 	.word	0x20000b8c
 8004784:	20000b8a 	.word	0x20000b8a
 8004788:	20000b88 	.word	0x20000b88
 800478c:	42c80000 	.word	0x42c80000
 8004790:	20000f08 	.word	0x20000f08
 8004794:	20000fc0 	.word	0x20000fc0
 8004798:	20001008 	.word	0x20001008

0800479c <Servo_Move>:

//Animation
float servo_current_values[8] = {//Store here current calculated angles, same as standby pose at start
	MOV_SRV_ST_V, MOV_SRV_ST_H, MOV_SRV_ST_H, MOV_SRV_ST_V, MOV_SRV_ST_V, MOV_SRV_ST_H, MOV_SRV_ST_H, MOV_SRV_ST_V
};
void Servo_Move(float *state_from_values, float *state_to_values, uint16_t total_steps, uint8_t delay, uint8_t no_int){
 800479c:	b590      	push	{r4, r7, lr}
 800479e:	b087      	sub	sp, #28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	4611      	mov	r1, r2
 80047a8:	461a      	mov	r2, r3
 80047aa:	460b      	mov	r3, r1
 80047ac:	80fb      	strh	r3, [r7, #6]
 80047ae:	4613      	mov	r3, r2
 80047b0:	717b      	strb	r3, [r7, #5]
	uint16_t current_step = 0;
 80047b2:	2300      	movs	r3, #0
 80047b4:	82fb      	strh	r3, [r7, #22]
	uint8_t i = 0;
 80047b6:	2300      	movs	r3, #0
 80047b8:	757b      	strb	r3, [r7, #21]
	while(current_step < total_steps){
 80047ba:	e04f      	b.n	800485c <Servo_Move+0xc0>
		i = 0;
 80047bc:	2300      	movs	r3, #0
 80047be:	757b      	strb	r3, [r7, #21]
		current_step++;
 80047c0:	8afb      	ldrh	r3, [r7, #22]
 80047c2:	3301      	adds	r3, #1
 80047c4:	82fb      	strh	r3, [r7, #22]
		while(i != 8){
 80047c6:	e035      	b.n	8004834 <Servo_Move+0x98>
			servo_current_values[i] = ((float)(((float)state_to_values[i] - (float)state_from_values[i])/total_steps)*current_step)+state_from_values[i];
 80047c8:	7d7b      	ldrb	r3, [r7, #21]
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	4413      	add	r3, r2
 80047d0:	6818      	ldr	r0, [r3, #0]
 80047d2:	7d7b      	ldrb	r3, [r7, #21]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	4413      	add	r3, r2
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4619      	mov	r1, r3
 80047de:	f7fb fcb9 	bl	8000154 <__aeabi_fsub>
 80047e2:	4603      	mov	r3, r0
 80047e4:	461c      	mov	r4, r3
 80047e6:	88fb      	ldrh	r3, [r7, #6]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fb fd69 	bl	80002c0 <__aeabi_i2f>
 80047ee:	4603      	mov	r3, r0
 80047f0:	4619      	mov	r1, r3
 80047f2:	4620      	mov	r0, r4
 80047f4:	f7fb fe6c 	bl	80004d0 <__aeabi_fdiv>
 80047f8:	4603      	mov	r3, r0
 80047fa:	461c      	mov	r4, r3
 80047fc:	8afb      	ldrh	r3, [r7, #22]
 80047fe:	4618      	mov	r0, r3
 8004800:	f7fb fd5e 	bl	80002c0 <__aeabi_i2f>
 8004804:	4603      	mov	r3, r0
 8004806:	4619      	mov	r1, r3
 8004808:	4620      	mov	r0, r4
 800480a:	f7fb fdad 	bl	8000368 <__aeabi_fmul>
 800480e:	4603      	mov	r3, r0
 8004810:	4618      	mov	r0, r3
 8004812:	7d7b      	ldrb	r3, [r7, #21]
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	4413      	add	r3, r2
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	7d7c      	ldrb	r4, [r7, #21]
 800481e:	4619      	mov	r1, r3
 8004820:	f7fb fc9a 	bl	8000158 <__addsf3>
 8004824:	4603      	mov	r3, r0
 8004826:	461a      	mov	r2, r3
 8004828:	4b11      	ldr	r3, [pc, #68]	; (8004870 <Servo_Move+0xd4>)
 800482a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			i++;
 800482e:	7d7b      	ldrb	r3, [r7, #21]
 8004830:	3301      	adds	r3, #1
 8004832:	757b      	strb	r3, [r7, #21]
		while(i != 8){
 8004834:	7d7b      	ldrb	r3, [r7, #21]
 8004836:	2b08      	cmp	r3, #8
 8004838:	d1c6      	bne.n	80047c8 <Servo_Move+0x2c>
		}
		Servo_Set(&servo_current_values[0]);
 800483a:	480d      	ldr	r0, [pc, #52]	; (8004870 <Servo_Move+0xd4>)
 800483c:	f7ff fdfa 	bl	8004434 <Servo_Set>
		HAL_Delay(delay);
 8004840:	797b      	ldrb	r3, [r7, #5]
 8004842:	4618      	mov	r0, r3
 8004844:	f7fb ff62 	bl	800070c <HAL_Delay>
		if((app_action == 0)&&(no_int == 0)){
 8004848:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <Servo_Move+0xd8>)
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d105      	bne.n	800485c <Servo_Move+0xc0>
 8004850:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <Servo_Move+0xc0>
			current_step = total_steps;
 8004858:	88fb      	ldrh	r3, [r7, #6]
 800485a:	82fb      	strh	r3, [r7, #22]
	while(current_step < total_steps){
 800485c:	8afa      	ldrh	r2, [r7, #22]
 800485e:	88fb      	ldrh	r3, [r7, #6]
 8004860:	429a      	cmp	r2, r3
 8004862:	d3ab      	bcc.n	80047bc <Servo_Move+0x20>
		}
	}
}
 8004864:	bf00      	nop
 8004866:	bf00      	nop
 8004868:	371c      	adds	r7, #28
 800486a:	46bd      	mov	sp, r7
 800486c:	bd90      	pop	{r4, r7, pc}
 800486e:	bf00      	nop
 8004870:	20000b90 	.word	0x20000b90
 8004874:	20000ce0 	.word	0x20000ce0

08004878 <Servo_Play_Pattern>:
void Servo_Play_Pattern(float *values, uint16_t poses, uint16_t total_steps, uint8_t delay, uint8_t no_int){
 8004878:	b590      	push	{r4, r7, lr}
 800487a:	b089      	sub	sp, #36	; 0x24
 800487c:	af02      	add	r7, sp, #8
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	4608      	mov	r0, r1
 8004882:	4611      	mov	r1, r2
 8004884:	461a      	mov	r2, r3
 8004886:	4603      	mov	r3, r0
 8004888:	817b      	strh	r3, [r7, #10]
 800488a:	460b      	mov	r3, r1
 800488c:	813b      	strh	r3, [r7, #8]
 800488e:	4613      	mov	r3, r2
 8004890:	71fb      	strb	r3, [r7, #7]
	uint16_t i = 0;
 8004892:	2300      	movs	r3, #0
 8004894:	82fb      	strh	r3, [r7, #22]
	while(i != poses){
 8004896:	e02c      	b.n	80048f2 <Servo_Play_Pattern+0x7a>
		if((i+1) == poses){
 8004898:	8afb      	ldrh	r3, [r7, #22]
 800489a:	1c5a      	adds	r2, r3, #1
 800489c:	897b      	ldrh	r3, [r7, #10]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d10d      	bne.n	80048be <Servo_Play_Pattern+0x46>
			//If this is last movement for current function call, move from last to first pose (and not from last to unavailable next pose)
			Servo_Move(&values[i*8], &values[0], total_steps, delay, no_int);
 80048a2:	8afb      	ldrh	r3, [r7, #22]
 80048a4:	015b      	lsls	r3, r3, #5
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	18d0      	adds	r0, r2, r3
 80048aa:	79f9      	ldrb	r1, [r7, #7]
 80048ac:	893a      	ldrh	r2, [r7, #8]
 80048ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	460b      	mov	r3, r1
 80048b6:	68f9      	ldr	r1, [r7, #12]
 80048b8:	f7ff ff70 	bl	800479c <Servo_Move>
 80048bc:	e010      	b.n	80048e0 <Servo_Play_Pattern+0x68>
		}
		else{
			Servo_Move(&values[i*8], &values[(i+1)*8], total_steps, delay, no_int);
 80048be:	8afb      	ldrh	r3, [r7, #22]
 80048c0:	015b      	lsls	r3, r3, #5
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	18d0      	adds	r0, r2, r3
 80048c6:	8afb      	ldrh	r3, [r7, #22]
 80048c8:	3301      	adds	r3, #1
 80048ca:	015b      	lsls	r3, r3, #5
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	18d1      	adds	r1, r2, r3
 80048d0:	79fc      	ldrb	r4, [r7, #7]
 80048d2:	893a      	ldrh	r2, [r7, #8]
 80048d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	4623      	mov	r3, r4
 80048dc:	f7ff ff5e 	bl	800479c <Servo_Move>
		}
		i++;
 80048e0:	8afb      	ldrh	r3, [r7, #22]
 80048e2:	3301      	adds	r3, #1
 80048e4:	82fb      	strh	r3, [r7, #22]
		if(app_action == 0){
 80048e6:	4b07      	ldr	r3, [pc, #28]	; (8004904 <Servo_Play_Pattern+0x8c>)
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <Servo_Play_Pattern+0x7a>
			i = poses;
 80048ee:	897b      	ldrh	r3, [r7, #10]
 80048f0:	82fb      	strh	r3, [r7, #22]
	while(i != poses){
 80048f2:	8afa      	ldrh	r2, [r7, #22]
 80048f4:	897b      	ldrh	r3, [r7, #10]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d1ce      	bne.n	8004898 <Servo_Play_Pattern+0x20>
		}
	}
}
 80048fa:	bf00      	nop
 80048fc:	bf00      	nop
 80048fe:	371c      	adds	r7, #28
 8004900:	46bd      	mov	sp, r7
 8004902:	bd90      	pop	{r4, r7, pc}
 8004904:	20000ce0 	.word	0x20000ce0

08004908 <Servo_Play_Trick_Pattern>:
void Servo_Play_Trick_Pattern(float *start_values, float *trick_values, uint16_t poses, uint16_t total_steps, uint8_t delay, uint8_t no_int){
 8004908:	b590      	push	{r4, r7, lr}
 800490a:	b089      	sub	sp, #36	; 0x24
 800490c:	af02      	add	r7, sp, #8
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	4611      	mov	r1, r2
 8004914:	461a      	mov	r2, r3
 8004916:	460b      	mov	r3, r1
 8004918:	80fb      	strh	r3, [r7, #6]
 800491a:	4613      	mov	r3, r2
 800491c:	80bb      	strh	r3, [r7, #4]
	Servo_Move(start_values, trick_values, total_steps, delay, no_int);
 800491e:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8004922:	88ba      	ldrh	r2, [r7, #4]
 8004924:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	460b      	mov	r3, r1
 800492c:	68b9      	ldr	r1, [r7, #8]
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f7ff ff34 	bl	800479c <Servo_Move>
	if(app_action != 0){
 8004934:	4b14      	ldr	r3, [pc, #80]	; (8004988 <Servo_Play_Trick_Pattern+0x80>)
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d021      	beq.n	8004980 <Servo_Play_Trick_Pattern+0x78>
		uint16_t i = 0;
 800493c:	2300      	movs	r3, #0
 800493e:	82fb      	strh	r3, [r7, #22]
		while(i != poses){
 8004940:	e01a      	b.n	8004978 <Servo_Play_Trick_Pattern+0x70>
			Servo_Move(&trick_values[i*8], &trick_values[(i+1)*8], total_steps, delay, no_int);
 8004942:	8afb      	ldrh	r3, [r7, #22]
 8004944:	015b      	lsls	r3, r3, #5
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	18d0      	adds	r0, r2, r3
 800494a:	8afb      	ldrh	r3, [r7, #22]
 800494c:	3301      	adds	r3, #1
 800494e:	015b      	lsls	r3, r3, #5
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	18d1      	adds	r1, r2, r3
 8004954:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8004958:	88ba      	ldrh	r2, [r7, #4]
 800495a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	4623      	mov	r3, r4
 8004962:	f7ff ff1b 	bl	800479c <Servo_Move>
			i++;
 8004966:	8afb      	ldrh	r3, [r7, #22]
 8004968:	3301      	adds	r3, #1
 800496a:	82fb      	strh	r3, [r7, #22]
			if(app_action == 0){
 800496c:	4b06      	ldr	r3, [pc, #24]	; (8004988 <Servo_Play_Trick_Pattern+0x80>)
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <Servo_Play_Trick_Pattern+0x70>
				i = poses;
 8004974:	88fb      	ldrh	r3, [r7, #6]
 8004976:	82fb      	strh	r3, [r7, #22]
		while(i != poses){
 8004978:	8afa      	ldrh	r2, [r7, #22]
 800497a:	88fb      	ldrh	r3, [r7, #6]
 800497c:	429a      	cmp	r2, r3
 800497e:	d1e0      	bne.n	8004942 <Servo_Play_Trick_Pattern+0x3a>
			}
		}
	}
}
 8004980:	bf00      	nop
 8004982:	371c      	adds	r7, #28
 8004984:	46bd      	mov	sp, r7
 8004986:	bd90      	pop	{r4, r7, pc}
 8004988:	20000ce0 	.word	0x20000ce0

0800498c <Servo_Set_Kick>:

extern float movements_kick_pose[8];
void Servo_Set_Kick(uint8_t direction, uint8_t strength, uint8_t kick){
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	4603      	mov	r3, r0
 8004994:	71fb      	strb	r3, [r7, #7]
 8004996:	460b      	mov	r3, r1
 8004998:	71bb      	strb	r3, [r7, #6]
 800499a:	4613      	mov	r3, r2
 800499c:	717b      	strb	r3, [r7, #5]
	//^<50-75 | _20-95 / Kick ^>50-15
	if(kick == SERVO_KICK_NO_KICK){
 800499e:	797b      	ldrb	r3, [r7, #5]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d127      	bne.n	80049f4 <Servo_Set_Kick+0x68>
		movements_kick_pose[4] = (((75.0f - 50.0f)/80.0f)*(float)strength) + 50.0f;
 80049a4:	79bb      	ldrb	r3, [r7, #6]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fb fc86 	bl	80002b8 <__aeabi_ui2f>
 80049ac:	4603      	mov	r3, r0
 80049ae:	4928      	ldr	r1, [pc, #160]	; (8004a50 <Servo_Set_Kick+0xc4>)
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7fb fcd9 	bl	8000368 <__aeabi_fmul>
 80049b6:	4603      	mov	r3, r0
 80049b8:	4926      	ldr	r1, [pc, #152]	; (8004a54 <Servo_Set_Kick+0xc8>)
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fb fbcc 	bl	8000158 <__addsf3>
 80049c0:	4603      	mov	r3, r0
 80049c2:	461a      	mov	r2, r3
 80049c4:	4b24      	ldr	r3, [pc, #144]	; (8004a58 <Servo_Set_Kick+0xcc>)
 80049c6:	611a      	str	r2, [r3, #16]
		movements_kick_pose[5] = (((95.0f - 20.0f)/90.0f)*(float)direction) + 20.0f;
 80049c8:	79fb      	ldrb	r3, [r7, #7]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fb fc74 	bl	80002b8 <__aeabi_ui2f>
 80049d0:	4603      	mov	r3, r0
 80049d2:	4922      	ldr	r1, [pc, #136]	; (8004a5c <Servo_Set_Kick+0xd0>)
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fb fcc7 	bl	8000368 <__aeabi_fmul>
 80049da:	4603      	mov	r3, r0
 80049dc:	4920      	ldr	r1, [pc, #128]	; (8004a60 <Servo_Set_Kick+0xd4>)
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fb fbba 	bl	8000158 <__addsf3>
 80049e4:	4603      	mov	r3, r0
 80049e6:	461a      	mov	r2, r3
 80049e8:	4b1b      	ldr	r3, [pc, #108]	; (8004a58 <Servo_Set_Kick+0xcc>)
 80049ea:	615a      	str	r2, [r3, #20]
		Servo_Set(movements_kick_pose);
 80049ec:	481a      	ldr	r0, [pc, #104]	; (8004a58 <Servo_Set_Kick+0xcc>)
 80049ee:	f7ff fd21 	bl	8004434 <Servo_Set>
		HAL_Delay(500);//TBD
		movements_kick_pose[4] = 60;
		movements_kick_pose[5] = 50;
		Servo_Set(movements_kick_pose);
	}
}
 80049f2:	e028      	b.n	8004a46 <Servo_Set_Kick+0xba>
		if(strength >= 78){
 80049f4:	79bb      	ldrb	r3, [r7, #6]
 80049f6:	2b4d      	cmp	r3, #77	; 0x4d
 80049f8:	d903      	bls.n	8004a02 <Servo_Set_Kick+0x76>
			movements_kick_pose[4] = 15;
 80049fa:	4b17      	ldr	r3, [pc, #92]	; (8004a58 <Servo_Set_Kick+0xcc>)
 80049fc:	4a19      	ldr	r2, [pc, #100]	; (8004a64 <Servo_Set_Kick+0xd8>)
 80049fe:	611a      	str	r2, [r3, #16]
 8004a00:	e011      	b.n	8004a26 <Servo_Set_Kick+0x9a>
			movements_kick_pose[4] = (((50.0f - 15.0f)/80.0f)*(float)strength) + 50.0f;
 8004a02:	79bb      	ldrb	r3, [r7, #6]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fb fc57 	bl	80002b8 <__aeabi_ui2f>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	4916      	ldr	r1, [pc, #88]	; (8004a68 <Servo_Set_Kick+0xdc>)
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fb fcaa 	bl	8000368 <__aeabi_fmul>
 8004a14:	4603      	mov	r3, r0
 8004a16:	490f      	ldr	r1, [pc, #60]	; (8004a54 <Servo_Set_Kick+0xc8>)
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7fb fb9d 	bl	8000158 <__addsf3>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	461a      	mov	r2, r3
 8004a22:	4b0d      	ldr	r3, [pc, #52]	; (8004a58 <Servo_Set_Kick+0xcc>)
 8004a24:	611a      	str	r2, [r3, #16]
		Servo_Set(movements_kick_pose);
 8004a26:	480c      	ldr	r0, [pc, #48]	; (8004a58 <Servo_Set_Kick+0xcc>)
 8004a28:	f7ff fd04 	bl	8004434 <Servo_Set>
		HAL_Delay(500);//TBD
 8004a2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a30:	f7fb fe6c 	bl	800070c <HAL_Delay>
		movements_kick_pose[4] = 60;
 8004a34:	4b08      	ldr	r3, [pc, #32]	; (8004a58 <Servo_Set_Kick+0xcc>)
 8004a36:	4a0d      	ldr	r2, [pc, #52]	; (8004a6c <Servo_Set_Kick+0xe0>)
 8004a38:	611a      	str	r2, [r3, #16]
		movements_kick_pose[5] = 50;
 8004a3a:	4b07      	ldr	r3, [pc, #28]	; (8004a58 <Servo_Set_Kick+0xcc>)
 8004a3c:	4a05      	ldr	r2, [pc, #20]	; (8004a54 <Servo_Set_Kick+0xc8>)
 8004a3e:	615a      	str	r2, [r3, #20]
		Servo_Set(movements_kick_pose);
 8004a40:	4805      	ldr	r0, [pc, #20]	; (8004a58 <Servo_Set_Kick+0xcc>)
 8004a42:	f7ff fcf7 	bl	8004434 <Servo_Set>
}
 8004a46:	bf00      	nop
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	3ea00000 	.word	0x3ea00000
 8004a54:	42480000 	.word	0x42480000
 8004a58:	20000b68 	.word	0x20000b68
 8004a5c:	3f555555 	.word	0x3f555555
 8004a60:	41a00000 	.word	0x41a00000
 8004a64:	41700000 	.word	0x41700000
 8004a68:	3ee00000 	.word	0x3ee00000
 8004a6c:	42700000 	.word	0x42700000

08004a70 <Servo_Drive>:
	MOV_DRIVE_V_DW, MOV_DRIVE_H_BW, MOV_DRIVE_H_BW, MOV_DRIVE_V_DW, MOV_DRIVE_V_DW, MOV_DRIVE_H_FW, MOV_DRIVE_H_FW, MOV_DRIVE_V_DW,
	MOV_DRIVE_V_UP, MOV_DRIVE_H_FW, MOV_DRIVE_H_FW, MOV_DRIVE_V_DW, MOV_DRIVE_V_UP, MOV_DRIVE_H_BW, MOV_DRIVE_H_BW, MOV_DRIVE_V_DW,
	MOV_DRIVE_V_DW, MOV_DRIVE_H_FW, MOV_DRIVE_H_FW, MOV_DRIVE_V_DW, MOV_DRIVE_V_DW, MOV_DRIVE_H_BW, MOV_DRIVE_H_BW, MOV_DRIVE_V_DW,
	MOV_DRIVE_V_DW, MOV_DRIVE_H_BW, MOV_DRIVE_H_BW, MOV_DRIVE_V_UP, MOV_DRIVE_V_DW, MOV_DRIVE_H_FW, MOV_DRIVE_H_FW, MOV_DRIVE_V_UP
};
void Servo_Drive(uint16_t direction, uint16_t speed){
 8004a70:	b590      	push	{r4, r7, lr}
 8004a72:	b089      	sub	sp, #36	; 0x24
 8004a74:	af02      	add	r7, sp, #8
 8004a76:	4603      	mov	r3, r0
 8004a78:	460a      	mov	r2, r1
 8004a7a:	80fb      	strh	r3, [r7, #6]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	80bb      	strh	r3, [r7, #4]
	/*
		Direction 0-180, speed 0-80. Servos 1,2,5,6
	*/
	//Scale speed
	float scale = ((MOV_DRIVE_H_BW - MOV_DRIVE_H_FW)/160.0f) * (80-speed);//2*80 by this value should be decreased every servo, pointing to center
 8004a80:	88bb      	ldrh	r3, [r7, #4]
 8004a82:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fb fc1a 	bl	80002c0 <__aeabi_i2f>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	498f      	ldr	r1, [pc, #572]	; (8004ccc <Servo_Drive+0x25c>)
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7fb fc69 	bl	8000368 <__aeabi_fmul>
 8004a96:	4603      	mov	r3, r0
 8004a98:	617b      	str	r3, [r7, #20]
	servo_drive_calculated_values[1] = movements_drive_pattern[1] - scale;
 8004a9a:	4b8d      	ldr	r3, [pc, #564]	; (8004cd0 <Servo_Drive+0x260>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	6979      	ldr	r1, [r7, #20]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7fb fb57 	bl	8000154 <__aeabi_fsub>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	4b8a      	ldr	r3, [pc, #552]	; (8004cd4 <Servo_Drive+0x264>)
 8004aac:	605a      	str	r2, [r3, #4]
	servo_drive_calculated_values[2] = movements_drive_pattern[2] - scale;
 8004aae:	4b88      	ldr	r3, [pc, #544]	; (8004cd0 <Servo_Drive+0x260>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	6979      	ldr	r1, [r7, #20]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7fb fb4d 	bl	8000154 <__aeabi_fsub>
 8004aba:	4603      	mov	r3, r0
 8004abc:	461a      	mov	r2, r3
 8004abe:	4b85      	ldr	r3, [pc, #532]	; (8004cd4 <Servo_Drive+0x264>)
 8004ac0:	609a      	str	r2, [r3, #8]
	servo_drive_calculated_values[5] = movements_drive_pattern[5] + scale;
 8004ac2:	4b83      	ldr	r3, [pc, #524]	; (8004cd0 <Servo_Drive+0x260>)
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	6979      	ldr	r1, [r7, #20]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7fb fb45 	bl	8000158 <__addsf3>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	4b80      	ldr	r3, [pc, #512]	; (8004cd4 <Servo_Drive+0x264>)
 8004ad4:	615a      	str	r2, [r3, #20]
	servo_drive_calculated_values[6] = movements_drive_pattern[6] + scale;
 8004ad6:	4b7e      	ldr	r3, [pc, #504]	; (8004cd0 <Servo_Drive+0x260>)
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	6979      	ldr	r1, [r7, #20]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7fb fb3b 	bl	8000158 <__addsf3>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	4b7b      	ldr	r3, [pc, #492]	; (8004cd4 <Servo_Drive+0x264>)
 8004ae8:	619a      	str	r2, [r3, #24]

	servo_drive_calculated_values[9] = movements_drive_pattern[9] + scale;
 8004aea:	4b79      	ldr	r3, [pc, #484]	; (8004cd0 <Servo_Drive+0x260>)
 8004aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aee:	6979      	ldr	r1, [r7, #20]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7fb fb31 	bl	8000158 <__addsf3>
 8004af6:	4603      	mov	r3, r0
 8004af8:	461a      	mov	r2, r3
 8004afa:	4b76      	ldr	r3, [pc, #472]	; (8004cd4 <Servo_Drive+0x264>)
 8004afc:	625a      	str	r2, [r3, #36]	; 0x24
	servo_drive_calculated_values[10] = movements_drive_pattern[10] + scale;
 8004afe:	4b74      	ldr	r3, [pc, #464]	; (8004cd0 <Servo_Drive+0x260>)
 8004b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b02:	6979      	ldr	r1, [r7, #20]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7fb fb27 	bl	8000158 <__addsf3>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	4b71      	ldr	r3, [pc, #452]	; (8004cd4 <Servo_Drive+0x264>)
 8004b10:	629a      	str	r2, [r3, #40]	; 0x28
	servo_drive_calculated_values[13] = movements_drive_pattern[13] - scale;
 8004b12:	4b6f      	ldr	r3, [pc, #444]	; (8004cd0 <Servo_Drive+0x260>)
 8004b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b16:	6979      	ldr	r1, [r7, #20]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7fb fb1b 	bl	8000154 <__aeabi_fsub>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	461a      	mov	r2, r3
 8004b22:	4b6c      	ldr	r3, [pc, #432]	; (8004cd4 <Servo_Drive+0x264>)
 8004b24:	635a      	str	r2, [r3, #52]	; 0x34
	servo_drive_calculated_values[14] = movements_drive_pattern[14] - scale;
 8004b26:	4b6a      	ldr	r3, [pc, #424]	; (8004cd0 <Servo_Drive+0x260>)
 8004b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2a:	6979      	ldr	r1, [r7, #20]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7fb fb11 	bl	8000154 <__aeabi_fsub>
 8004b32:	4603      	mov	r3, r0
 8004b34:	461a      	mov	r2, r3
 8004b36:	4b67      	ldr	r3, [pc, #412]	; (8004cd4 <Servo_Drive+0x264>)
 8004b38:	639a      	str	r2, [r3, #56]	; 0x38

	servo_drive_calculated_values[17] = movements_drive_pattern[17] + scale;
 8004b3a:	4b65      	ldr	r3, [pc, #404]	; (8004cd0 <Servo_Drive+0x260>)
 8004b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3e:	6979      	ldr	r1, [r7, #20]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7fb fb09 	bl	8000158 <__addsf3>
 8004b46:	4603      	mov	r3, r0
 8004b48:	461a      	mov	r2, r3
 8004b4a:	4b62      	ldr	r3, [pc, #392]	; (8004cd4 <Servo_Drive+0x264>)
 8004b4c:	645a      	str	r2, [r3, #68]	; 0x44
	servo_drive_calculated_values[18] = movements_drive_pattern[18] + scale;
 8004b4e:	4b60      	ldr	r3, [pc, #384]	; (8004cd0 <Servo_Drive+0x260>)
 8004b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b52:	6979      	ldr	r1, [r7, #20]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fb faff 	bl	8000158 <__addsf3>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4b5d      	ldr	r3, [pc, #372]	; (8004cd4 <Servo_Drive+0x264>)
 8004b60:	649a      	str	r2, [r3, #72]	; 0x48
	servo_drive_calculated_values[21] = movements_drive_pattern[21] - scale;
 8004b62:	4b5b      	ldr	r3, [pc, #364]	; (8004cd0 <Servo_Drive+0x260>)
 8004b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b66:	6979      	ldr	r1, [r7, #20]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7fb faf3 	bl	8000154 <__aeabi_fsub>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	461a      	mov	r2, r3
 8004b72:	4b58      	ldr	r3, [pc, #352]	; (8004cd4 <Servo_Drive+0x264>)
 8004b74:	655a      	str	r2, [r3, #84]	; 0x54
	servo_drive_calculated_values[22] = movements_drive_pattern[22] - scale;
 8004b76:	4b56      	ldr	r3, [pc, #344]	; (8004cd0 <Servo_Drive+0x260>)
 8004b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b7a:	6979      	ldr	r1, [r7, #20]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7fb fae9 	bl	8000154 <__aeabi_fsub>
 8004b82:	4603      	mov	r3, r0
 8004b84:	461a      	mov	r2, r3
 8004b86:	4b53      	ldr	r3, [pc, #332]	; (8004cd4 <Servo_Drive+0x264>)
 8004b88:	659a      	str	r2, [r3, #88]	; 0x58

	servo_drive_calculated_values[25] = movements_drive_pattern[25] - scale;
 8004b8a:	4b51      	ldr	r3, [pc, #324]	; (8004cd0 <Servo_Drive+0x260>)
 8004b8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b8e:	6979      	ldr	r1, [r7, #20]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7fb fadf 	bl	8000154 <__aeabi_fsub>
 8004b96:	4603      	mov	r3, r0
 8004b98:	461a      	mov	r2, r3
 8004b9a:	4b4e      	ldr	r3, [pc, #312]	; (8004cd4 <Servo_Drive+0x264>)
 8004b9c:	665a      	str	r2, [r3, #100]	; 0x64
	servo_drive_calculated_values[26] = movements_drive_pattern[26] - scale;
 8004b9e:	4b4c      	ldr	r3, [pc, #304]	; (8004cd0 <Servo_Drive+0x260>)
 8004ba0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ba2:	6979      	ldr	r1, [r7, #20]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7fb fad5 	bl	8000154 <__aeabi_fsub>
 8004baa:	4603      	mov	r3, r0
 8004bac:	461a      	mov	r2, r3
 8004bae:	4b49      	ldr	r3, [pc, #292]	; (8004cd4 <Servo_Drive+0x264>)
 8004bb0:	669a      	str	r2, [r3, #104]	; 0x68
	servo_drive_calculated_values[29] = movements_drive_pattern[29] + scale;
 8004bb2:	4b47      	ldr	r3, [pc, #284]	; (8004cd0 <Servo_Drive+0x260>)
 8004bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bb6:	6979      	ldr	r1, [r7, #20]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7fb facd 	bl	8000158 <__addsf3>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	4b44      	ldr	r3, [pc, #272]	; (8004cd4 <Servo_Drive+0x264>)
 8004bc4:	675a      	str	r2, [r3, #116]	; 0x74
	servo_drive_calculated_values[30] = movements_drive_pattern[30] + scale;
 8004bc6:	4b42      	ldr	r3, [pc, #264]	; (8004cd0 <Servo_Drive+0x260>)
 8004bc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bca:	6979      	ldr	r1, [r7, #20]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7fb fac3 	bl	8000158 <__addsf3>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	4b3f      	ldr	r3, [pc, #252]	; (8004cd4 <Servo_Drive+0x264>)
 8004bd8:	679a      	str	r2, [r3, #120]	; 0x78

	//Proportionally decrease apporiate side
	float directional_scale = 0;
 8004bda:	f04f 0300 	mov.w	r3, #0
 8004bde:	613b      	str	r3, [r7, #16]
	float directional_scale_max = ((MOV_DRIVE_H_BW - scale) - (MOV_DRIVE_H_FW + scale))/3.0f;
 8004be0:	6979      	ldr	r1, [r7, #20]
 8004be2:	483d      	ldr	r0, [pc, #244]	; (8004cd8 <Servo_Drive+0x268>)
 8004be4:	f7fb fab6 	bl	8000154 <__aeabi_fsub>
 8004be8:	4603      	mov	r3, r0
 8004bea:	461c      	mov	r4, r3
 8004bec:	493b      	ldr	r1, [pc, #236]	; (8004cdc <Servo_Drive+0x26c>)
 8004bee:	6978      	ldr	r0, [r7, #20]
 8004bf0:	f7fb fab2 	bl	8000158 <__addsf3>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	f7fb faab 	bl	8000154 <__aeabi_fsub>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	4936      	ldr	r1, [pc, #216]	; (8004cdc <Servo_Drive+0x26c>)
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fb fc64 	bl	80004d0 <__aeabi_fdiv>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	60fb      	str	r3, [r7, #12]
	if(direction < 90){
 8004c0c:	88fb      	ldrh	r3, [r7, #6]
 8004c0e:	2b59      	cmp	r3, #89	; 0x59
 8004c10:	d873      	bhi.n	8004cfa <Servo_Drive+0x28a>
		directional_scale = (directional_scale_max/90.0f) * (90.0f - direction);
 8004c12:	4933      	ldr	r1, [pc, #204]	; (8004ce0 <Servo_Drive+0x270>)
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f7fb fc5b 	bl	80004d0 <__aeabi_fdiv>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	461c      	mov	r4, r3
 8004c1e:	88fb      	ldrh	r3, [r7, #6]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7fb fb4d 	bl	80002c0 <__aeabi_i2f>
 8004c26:	4603      	mov	r3, r0
 8004c28:	4619      	mov	r1, r3
 8004c2a:	482d      	ldr	r0, [pc, #180]	; (8004ce0 <Servo_Drive+0x270>)
 8004c2c:	f7fb fa92 	bl	8000154 <__aeabi_fsub>
 8004c30:	4603      	mov	r3, r0
 8004c32:	4619      	mov	r1, r3
 8004c34:	4620      	mov	r0, r4
 8004c36:	f7fb fb97 	bl	8000368 <__aeabi_fmul>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	613b      	str	r3, [r7, #16]
		servo_drive_calculated_values[1] -= directional_scale;
 8004c3e:	4b25      	ldr	r3, [pc, #148]	; (8004cd4 <Servo_Drive+0x264>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	6939      	ldr	r1, [r7, #16]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7fb fa85 	bl	8000154 <__aeabi_fsub>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	4b21      	ldr	r3, [pc, #132]	; (8004cd4 <Servo_Drive+0x264>)
 8004c50:	605a      	str	r2, [r3, #4]
		servo_drive_calculated_values[2] -= directional_scale;
 8004c52:	4b20      	ldr	r3, [pc, #128]	; (8004cd4 <Servo_Drive+0x264>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	6939      	ldr	r1, [r7, #16]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fb fa7b 	bl	8000154 <__aeabi_fsub>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	461a      	mov	r2, r3
 8004c62:	4b1c      	ldr	r3, [pc, #112]	; (8004cd4 <Servo_Drive+0x264>)
 8004c64:	609a      	str	r2, [r3, #8]

		servo_drive_calculated_values[9] += directional_scale;
 8004c66:	4b1b      	ldr	r3, [pc, #108]	; (8004cd4 <Servo_Drive+0x264>)
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	6939      	ldr	r1, [r7, #16]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7fb fa73 	bl	8000158 <__addsf3>
 8004c72:	4603      	mov	r3, r0
 8004c74:	461a      	mov	r2, r3
 8004c76:	4b17      	ldr	r3, [pc, #92]	; (8004cd4 <Servo_Drive+0x264>)
 8004c78:	625a      	str	r2, [r3, #36]	; 0x24
		servo_drive_calculated_values[10] += directional_scale;
 8004c7a:	4b16      	ldr	r3, [pc, #88]	; (8004cd4 <Servo_Drive+0x264>)
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7e:	6939      	ldr	r1, [r7, #16]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7fb fa69 	bl	8000158 <__addsf3>
 8004c86:	4603      	mov	r3, r0
 8004c88:	461a      	mov	r2, r3
 8004c8a:	4b12      	ldr	r3, [pc, #72]	; (8004cd4 <Servo_Drive+0x264>)
 8004c8c:	629a      	str	r2, [r3, #40]	; 0x28

		servo_drive_calculated_values[17] += directional_scale;
 8004c8e:	4b11      	ldr	r3, [pc, #68]	; (8004cd4 <Servo_Drive+0x264>)
 8004c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c92:	6939      	ldr	r1, [r7, #16]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7fb fa5f 	bl	8000158 <__addsf3>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	4b0d      	ldr	r3, [pc, #52]	; (8004cd4 <Servo_Drive+0x264>)
 8004ca0:	645a      	str	r2, [r3, #68]	; 0x44
		servo_drive_calculated_values[18] += directional_scale;
 8004ca2:	4b0c      	ldr	r3, [pc, #48]	; (8004cd4 <Servo_Drive+0x264>)
 8004ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ca6:	6939      	ldr	r1, [r7, #16]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fb fa55 	bl	8000158 <__addsf3>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	4b08      	ldr	r3, [pc, #32]	; (8004cd4 <Servo_Drive+0x264>)
 8004cb4:	649a      	str	r2, [r3, #72]	; 0x48

		servo_drive_calculated_values[25] -= directional_scale;
 8004cb6:	4b07      	ldr	r3, [pc, #28]	; (8004cd4 <Servo_Drive+0x264>)
 8004cb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cba:	6939      	ldr	r1, [r7, #16]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fb fa49 	bl	8000154 <__aeabi_fsub>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	4b03      	ldr	r3, [pc, #12]	; (8004cd4 <Servo_Drive+0x264>)
 8004cc8:	665a      	str	r2, [r3, #100]	; 0x64
 8004cca:	e00b      	b.n	8004ce4 <Servo_Drive+0x274>
 8004ccc:	3eb66666 	.word	0x3eb66666
 8004cd0:	20000948 	.word	0x20000948
 8004cd4:	20000bb0 	.word	0x20000bb0
 8004cd8:	42700000 	.word	0x42700000
 8004cdc:	40400000 	.word	0x40400000
 8004ce0:	42b40000 	.word	0x42b40000
		servo_drive_calculated_values[26] -= directional_scale;
 8004ce4:	4b3f      	ldr	r3, [pc, #252]	; (8004de4 <Servo_Drive+0x374>)
 8004ce6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ce8:	6939      	ldr	r1, [r7, #16]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7fb fa32 	bl	8000154 <__aeabi_fsub>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	4b3b      	ldr	r3, [pc, #236]	; (8004de4 <Servo_Drive+0x374>)
 8004cf6:	669a      	str	r2, [r3, #104]	; 0x68
 8004cf8:	e068      	b.n	8004dcc <Servo_Drive+0x35c>

	}else if(direction > 90){
 8004cfa:	88fb      	ldrh	r3, [r7, #6]
 8004cfc:	2b5a      	cmp	r3, #90	; 0x5a
 8004cfe:	d965      	bls.n	8004dcc <Servo_Drive+0x35c>
		directional_scale = (directional_scale_max/90.0f) * (direction - 90.0f);
 8004d00:	4939      	ldr	r1, [pc, #228]	; (8004de8 <Servo_Drive+0x378>)
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f7fb fbe4 	bl	80004d0 <__aeabi_fdiv>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	461c      	mov	r4, r3
 8004d0c:	88fb      	ldrh	r3, [r7, #6]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fb fad6 	bl	80002c0 <__aeabi_i2f>
 8004d14:	4603      	mov	r3, r0
 8004d16:	4934      	ldr	r1, [pc, #208]	; (8004de8 <Servo_Drive+0x378>)
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7fb fa1b 	bl	8000154 <__aeabi_fsub>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	4619      	mov	r1, r3
 8004d22:	4620      	mov	r0, r4
 8004d24:	f7fb fb20 	bl	8000368 <__aeabi_fmul>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	613b      	str	r3, [r7, #16]
		servo_drive_calculated_values[5] += directional_scale;
 8004d2c:	4b2d      	ldr	r3, [pc, #180]	; (8004de4 <Servo_Drive+0x374>)
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	6939      	ldr	r1, [r7, #16]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fb fa10 	bl	8000158 <__addsf3>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	4b29      	ldr	r3, [pc, #164]	; (8004de4 <Servo_Drive+0x374>)
 8004d3e:	615a      	str	r2, [r3, #20]
		servo_drive_calculated_values[6] += directional_scale;
 8004d40:	4b28      	ldr	r3, [pc, #160]	; (8004de4 <Servo_Drive+0x374>)
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	6939      	ldr	r1, [r7, #16]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fb fa06 	bl	8000158 <__addsf3>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	461a      	mov	r2, r3
 8004d50:	4b24      	ldr	r3, [pc, #144]	; (8004de4 <Servo_Drive+0x374>)
 8004d52:	619a      	str	r2, [r3, #24]

		servo_drive_calculated_values[13] -= directional_scale;
 8004d54:	4b23      	ldr	r3, [pc, #140]	; (8004de4 <Servo_Drive+0x374>)
 8004d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d58:	6939      	ldr	r1, [r7, #16]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fb f9fa 	bl	8000154 <__aeabi_fsub>
 8004d60:	4603      	mov	r3, r0
 8004d62:	461a      	mov	r2, r3
 8004d64:	4b1f      	ldr	r3, [pc, #124]	; (8004de4 <Servo_Drive+0x374>)
 8004d66:	635a      	str	r2, [r3, #52]	; 0x34
		servo_drive_calculated_values[14] -= directional_scale;
 8004d68:	4b1e      	ldr	r3, [pc, #120]	; (8004de4 <Servo_Drive+0x374>)
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6c:	6939      	ldr	r1, [r7, #16]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fb f9f0 	bl	8000154 <__aeabi_fsub>
 8004d74:	4603      	mov	r3, r0
 8004d76:	461a      	mov	r2, r3
 8004d78:	4b1a      	ldr	r3, [pc, #104]	; (8004de4 <Servo_Drive+0x374>)
 8004d7a:	639a      	str	r2, [r3, #56]	; 0x38

		servo_drive_calculated_values[21] -= directional_scale;
 8004d7c:	4b19      	ldr	r3, [pc, #100]	; (8004de4 <Servo_Drive+0x374>)
 8004d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d80:	6939      	ldr	r1, [r7, #16]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fb f9e6 	bl	8000154 <__aeabi_fsub>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	4b15      	ldr	r3, [pc, #84]	; (8004de4 <Servo_Drive+0x374>)
 8004d8e:	655a      	str	r2, [r3, #84]	; 0x54
		servo_drive_calculated_values[22] -= directional_scale;
 8004d90:	4b14      	ldr	r3, [pc, #80]	; (8004de4 <Servo_Drive+0x374>)
 8004d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d94:	6939      	ldr	r1, [r7, #16]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fb f9dc 	bl	8000154 <__aeabi_fsub>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	461a      	mov	r2, r3
 8004da0:	4b10      	ldr	r3, [pc, #64]	; (8004de4 <Servo_Drive+0x374>)
 8004da2:	659a      	str	r2, [r3, #88]	; 0x58

		servo_drive_calculated_values[29] += directional_scale;
 8004da4:	4b0f      	ldr	r3, [pc, #60]	; (8004de4 <Servo_Drive+0x374>)
 8004da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004da8:	6939      	ldr	r1, [r7, #16]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fb f9d4 	bl	8000158 <__addsf3>
 8004db0:	4603      	mov	r3, r0
 8004db2:	461a      	mov	r2, r3
 8004db4:	4b0b      	ldr	r3, [pc, #44]	; (8004de4 <Servo_Drive+0x374>)
 8004db6:	675a      	str	r2, [r3, #116]	; 0x74
		servo_drive_calculated_values[30] += directional_scale;
 8004db8:	4b0a      	ldr	r3, [pc, #40]	; (8004de4 <Servo_Drive+0x374>)
 8004dba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dbc:	6939      	ldr	r1, [r7, #16]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fb f9ca 	bl	8000158 <__addsf3>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <Servo_Drive+0x374>)
 8004dca:	679a      	str	r2, [r3, #120]	; 0x78
	}
	
	Servo_Play_Pattern(servo_drive_calculated_values, 4, MOV_DRIVE_SAMPLES, MOV_DRIVE_DELAY, SERVO_INT);
 8004dcc:	2300      	movs	r3, #0
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	2104      	movs	r1, #4
 8004dd6:	4803      	ldr	r0, [pc, #12]	; (8004de4 <Servo_Drive+0x374>)
 8004dd8:	f7ff fd4e 	bl	8004878 <Servo_Play_Pattern>
}
 8004ddc:	bf00      	nop
 8004dde:	371c      	adds	r7, #28
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd90      	pop	{r4, r7, pc}
 8004de4:	20000bb0 	.word	0x20000bb0
 8004de8:	42b40000 	.word	0x42b40000

08004dec <Settings_Bluetooth_Change>:
static uint8_t settings_default[35] = "#C+0+0+0+0+0+0+0+01234Quadruped 1\n";
static uint8_t settings_bt_name_default[19] = "AT+NAMEQuadruped\r\n";
static uint8_t settings_bt_password_default[13] = "AT+PIN1234\r\n";
static uint8_t settings_bt_tmp[20];

void Settings_Bluetooth_Change(uint8_t *name, uint8_t *password){
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
	//Reset Bluetooth
	HAL_GPIO_WritePin(BT_RESET_GPIO_Port, BT_RESET_Pin, GPIO_PIN_RESET);
 8004df6:	2200      	movs	r2, #0
 8004df8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004dfc:	4850      	ldr	r0, [pc, #320]	; (8004f40 <Settings_Bluetooth_Change+0x154>)
 8004dfe:	f7fc fa1e 	bl	800123e <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8004e02:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004e06:	f7fb fc81 	bl	800070c <HAL_Delay>
	HAL_GPIO_WritePin(BT_RESET_GPIO_Port, BT_RESET_Pin, GPIO_PIN_SET);
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e10:	484b      	ldr	r0, [pc, #300]	; (8004f40 <Settings_Bluetooth_Change+0x154>)
 8004e12:	f7fc fa14 	bl	800123e <HAL_GPIO_WritePin>
	HAL_Delay(500);//Wait for Bluetooth to start and reset it's name and password also
 8004e16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004e1a:	f7fb fc77 	bl	800070c <HAL_Delay>
	while(HAL_GPIO_ReadPin(BT_STAT_GPIO_Port, BT_STAT_Pin) != GPIO_PIN_RESET);//Wait for Bluetooth disconnect
 8004e1e:	bf00      	nop
 8004e20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e24:	4846      	ldr	r0, [pc, #280]	; (8004f40 <Settings_Bluetooth_Change+0x154>)
 8004e26:	f7fc f9f3 	bl	8001210 <HAL_GPIO_ReadPin>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1f7      	bne.n	8004e20 <Settings_Bluetooth_Change+0x34>
	HAL_Delay(300);
 8004e30:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004e34:	f7fb fc6a 	bl	800070c <HAL_Delay>

	//Copy "AT+NAME"
	General_Copy(&settings_bt_name_default[0], &settings_bt_tmp[0],7);
 8004e38:	2207      	movs	r2, #7
 8004e3a:	4942      	ldr	r1, [pc, #264]	; (8004f44 <Settings_Bluetooth_Change+0x158>)
 8004e3c:	4842      	ldr	r0, [pc, #264]	; (8004f48 <Settings_Bluetooth_Change+0x15c>)
 8004e3e:	f7ff fa03 	bl	8004248 <General_Copy>
	//Copy name
	uint8_t i = 0;
 8004e42:	2300      	movs	r3, #0
 8004e44:	73fb      	strb	r3, [r7, #15]
	while(i != 10){
 8004e46:	e010      	b.n	8004e6a <Settings_Bluetooth_Change+0x7e>
		if(name[i] != ' '){
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b20      	cmp	r3, #32
 8004e52:	d00e      	beq.n	8004e72 <Settings_Bluetooth_Change+0x86>
			settings_bt_tmp[i+7] = name[i];
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	441a      	add	r2, r3
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
 8004e5c:	3307      	adds	r3, #7
 8004e5e:	7811      	ldrb	r1, [r2, #0]
 8004e60:	4a38      	ldr	r2, [pc, #224]	; (8004f44 <Settings_Bluetooth_Change+0x158>)
 8004e62:	54d1      	strb	r1, [r2, r3]
			i++;
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
 8004e66:	3301      	adds	r3, #1
 8004e68:	73fb      	strb	r3, [r7, #15]
	while(i != 10){
 8004e6a:	7bfb      	ldrb	r3, [r7, #15]
 8004e6c:	2b0a      	cmp	r3, #10
 8004e6e:	d1eb      	bne.n	8004e48 <Settings_Bluetooth_Change+0x5c>
 8004e70:	e000      	b.n	8004e74 <Settings_Bluetooth_Change+0x88>
		}else{
			break;
 8004e72:	bf00      	nop
		}
	}
	//Fill /r/n
	settings_bt_tmp[i] = '\r';
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
 8004e76:	4a33      	ldr	r2, [pc, #204]	; (8004f44 <Settings_Bluetooth_Change+0x158>)
 8004e78:	210d      	movs	r1, #13
 8004e7a:	54d1      	strb	r1, [r2, r3]
	settings_bt_tmp[i+1] = '\n';
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	4a30      	ldr	r2, [pc, #192]	; (8004f44 <Settings_Bluetooth_Change+0x158>)
 8004e82:	210a      	movs	r1, #10
 8004e84:	54d1      	strb	r1, [r2, r3]
	//Send
	HAL_UART_Transmit(&huart1, settings_bt_tmp, i+9, 2500);
 8004e86:	7bfb      	ldrb	r3, [r7, #15]
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	3309      	adds	r3, #9
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8004e92:	492c      	ldr	r1, [pc, #176]	; (8004f44 <Settings_Bluetooth_Change+0x158>)
 8004e94:	482d      	ldr	r0, [pc, #180]	; (8004f4c <Settings_Bluetooth_Change+0x160>)
 8004e96:	f7fd fe50 	bl	8002b3a <HAL_UART_Transmit>
	HAL_Delay(200);
 8004e9a:	20c8      	movs	r0, #200	; 0xc8
 8004e9c:	f7fb fc36 	bl	800070c <HAL_Delay>


	//Copy "AT+PIN"
	General_Copy(&settings_bt_password_default[0], &settings_bt_tmp[0],6);
 8004ea0:	2206      	movs	r2, #6
 8004ea2:	4928      	ldr	r1, [pc, #160]	; (8004f44 <Settings_Bluetooth_Change+0x158>)
 8004ea4:	482a      	ldr	r0, [pc, #168]	; (8004f50 <Settings_Bluetooth_Change+0x164>)
 8004ea6:	f7ff f9cf 	bl	8004248 <General_Copy>
	//Copy password
	i = 0;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	73fb      	strb	r3, [r7, #15]
	while(i != 4){
 8004eae:	e010      	b.n	8004ed2 <Settings_Bluetooth_Change+0xe6>
		if(password[i] != ' '){
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	2b20      	cmp	r3, #32
 8004eba:	d00e      	beq.n	8004eda <Settings_Bluetooth_Change+0xee>
			settings_bt_tmp[i+6] = password[i];
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	441a      	add	r2, r3
 8004ec2:	7bfb      	ldrb	r3, [r7, #15]
 8004ec4:	3306      	adds	r3, #6
 8004ec6:	7811      	ldrb	r1, [r2, #0]
 8004ec8:	4a1e      	ldr	r2, [pc, #120]	; (8004f44 <Settings_Bluetooth_Change+0x158>)
 8004eca:	54d1      	strb	r1, [r2, r3]
			i++;
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	73fb      	strb	r3, [r7, #15]
	while(i != 4){
 8004ed2:	7bfb      	ldrb	r3, [r7, #15]
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d1eb      	bne.n	8004eb0 <Settings_Bluetooth_Change+0xc4>
 8004ed8:	e000      	b.n	8004edc <Settings_Bluetooth_Change+0xf0>
		}else{
			break;
 8004eda:	bf00      	nop
		}
	}
	//Fill /r/n
	settings_bt_tmp[i] = '\r';
 8004edc:	7bfb      	ldrb	r3, [r7, #15]
 8004ede:	4a19      	ldr	r2, [pc, #100]	; (8004f44 <Settings_Bluetooth_Change+0x158>)
 8004ee0:	210d      	movs	r1, #13
 8004ee2:	54d1      	strb	r1, [r2, r3]
	settings_bt_tmp[i+1] = '\n';
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	4a16      	ldr	r2, [pc, #88]	; (8004f44 <Settings_Bluetooth_Change+0x158>)
 8004eea:	210a      	movs	r1, #10
 8004eec:	54d1      	strb	r1, [r2, r3]
	//Send
	HAL_UART_Transmit(&huart1, settings_bt_tmp, i+8, 2500);
 8004eee:	7bfb      	ldrb	r3, [r7, #15]
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	3308      	adds	r3, #8
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8004efa:	4912      	ldr	r1, [pc, #72]	; (8004f44 <Settings_Bluetooth_Change+0x158>)
 8004efc:	4813      	ldr	r0, [pc, #76]	; (8004f4c <Settings_Bluetooth_Change+0x160>)
 8004efe:	f7fd fe1c 	bl	8002b3a <HAL_UART_Transmit>
	HAL_Delay(200);
 8004f02:	20c8      	movs	r0, #200	; 0xc8
 8004f04:	f7fb fc02 	bl	800070c <HAL_Delay>


	//Reset Bluetooth
	HAL_Delay(800);
 8004f08:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004f0c:	f7fb fbfe 	bl	800070c <HAL_Delay>
	HAL_GPIO_WritePin(BT_RESET_GPIO_Port, BT_RESET_Pin, GPIO_PIN_RESET);
 8004f10:	2200      	movs	r2, #0
 8004f12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f16:	480a      	ldr	r0, [pc, #40]	; (8004f40 <Settings_Bluetooth_Change+0x154>)
 8004f18:	f7fc f991 	bl	800123e <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8004f1c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004f20:	f7fb fbf4 	bl	800070c <HAL_Delay>
	HAL_GPIO_WritePin(BT_RESET_GPIO_Port, BT_RESET_Pin, GPIO_PIN_SET);
 8004f24:	2201      	movs	r2, #1
 8004f26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f2a:	4805      	ldr	r0, [pc, #20]	; (8004f40 <Settings_Bluetooth_Change+0x154>)
 8004f2c:	f7fc f987 	bl	800123e <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8004f30:	2064      	movs	r0, #100	; 0x64
 8004f32:	f7fb fbeb 	bl	800070c <HAL_Delay>
}
 8004f36:	bf00      	nop
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	40010800 	.word	0x40010800
 8004f44:	20000f14 	.word	0x20000f14
 8004f48:	20000c78 	.word	0x20000c78
 8004f4c:	20001050 	.word	0x20001050
 8004f50:	20000c8c 	.word	0x20000c8c

08004f54 <Settings_Reset>:
void Settings_Reset(){
 8004f54:	b580      	push	{r7, lr}
 8004f56:	af00      	add	r7, sp, #0
	Flash_Write(settings_default,35);
 8004f58:	2123      	movs	r1, #35	; 0x23
 8004f5a:	4829      	ldr	r0, [pc, #164]	; (8005000 <Settings_Reset+0xac>)
 8004f5c:	f7ff f8cc 	bl	80040f8 <Flash_Write>
	General_Copy(&settings_default[0], &settings[0],35);
 8004f60:	2223      	movs	r2, #35	; 0x23
 8004f62:	4928      	ldr	r1, [pc, #160]	; (8005004 <Settings_Reset+0xb0>)
 8004f64:	4826      	ldr	r0, [pc, #152]	; (8005000 <Settings_Reset+0xac>)
 8004f66:	f7ff f96f 	bl	8004248 <General_Copy>

	//Reset Bluetooth name and password to defaults
	HAL_GPIO_WritePin(BT_RESET_GPIO_Port, BT_RESET_Pin, GPIO_PIN_RESET);
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f70:	4825      	ldr	r0, [pc, #148]	; (8005008 <Settings_Reset+0xb4>)
 8004f72:	f7fc f964 	bl	800123e <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8004f76:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004f7a:	f7fb fbc7 	bl	800070c <HAL_Delay>
	HAL_GPIO_WritePin(BT_RESET_GPIO_Port, BT_RESET_Pin, GPIO_PIN_SET);
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f84:	4820      	ldr	r0, [pc, #128]	; (8005008 <Settings_Reset+0xb4>)
 8004f86:	f7fc f95a 	bl	800123e <HAL_GPIO_WritePin>
	HAL_Delay(500);//Wait for Bluetooth to start and reset it's name and password also
 8004f8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004f8e:	f7fb fbbd 	bl	800070c <HAL_Delay>
	while(HAL_GPIO_ReadPin(BT_STAT_GPIO_Port, BT_STAT_Pin) != GPIO_PIN_RESET);//Wait for Bluetooth disconnect
 8004f92:	bf00      	nop
 8004f94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f98:	481b      	ldr	r0, [pc, #108]	; (8005008 <Settings_Reset+0xb4>)
 8004f9a:	f7fc f939 	bl	8001210 <HAL_GPIO_ReadPin>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1f7      	bne.n	8004f94 <Settings_Reset+0x40>
	HAL_Delay(300);
 8004fa4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004fa8:	f7fb fbb0 	bl	800070c <HAL_Delay>
	HAL_UART_Transmit(&huart1, settings_bt_name_default, 18, 2500);
 8004fac:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8004fb0:	2212      	movs	r2, #18
 8004fb2:	4916      	ldr	r1, [pc, #88]	; (800500c <Settings_Reset+0xb8>)
 8004fb4:	4816      	ldr	r0, [pc, #88]	; (8005010 <Settings_Reset+0xbc>)
 8004fb6:	f7fd fdc0 	bl	8002b3a <HAL_UART_Transmit>
	HAL_Delay(50);
 8004fba:	2032      	movs	r0, #50	; 0x32
 8004fbc:	f7fb fba6 	bl	800070c <HAL_Delay>
	HAL_UART_Transmit(&huart1, settings_bt_password_default, 12, 2500);
 8004fc0:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8004fc4:	220c      	movs	r2, #12
 8004fc6:	4913      	ldr	r1, [pc, #76]	; (8005014 <Settings_Reset+0xc0>)
 8004fc8:	4811      	ldr	r0, [pc, #68]	; (8005010 <Settings_Reset+0xbc>)
 8004fca:	f7fd fdb6 	bl	8002b3a <HAL_UART_Transmit>

	//Reset Bluetooth
	HAL_Delay(800);
 8004fce:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004fd2:	f7fb fb9b 	bl	800070c <HAL_Delay>
	HAL_GPIO_WritePin(BT_RESET_GPIO_Port, BT_RESET_Pin, GPIO_PIN_RESET);
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004fdc:	480a      	ldr	r0, [pc, #40]	; (8005008 <Settings_Reset+0xb4>)
 8004fde:	f7fc f92e 	bl	800123e <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8004fe2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004fe6:	f7fb fb91 	bl	800070c <HAL_Delay>
	HAL_GPIO_WritePin(BT_RESET_GPIO_Port, BT_RESET_Pin, GPIO_PIN_SET);
 8004fea:	2201      	movs	r2, #1
 8004fec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ff0:	4805      	ldr	r0, [pc, #20]	; (8005008 <Settings_Reset+0xb4>)
 8004ff2:	f7fc f924 	bl	800123e <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8004ff6:	2064      	movs	r0, #100	; 0x64
 8004ff8:	f7fb fb88 	bl	800070c <HAL_Delay>
}
 8004ffc:	bf00      	nop
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	20000c54 	.word	0x20000c54
 8005004:	20000c30 	.word	0x20000c30
 8005008:	40010800 	.word	0x40010800
 800500c:	20000c78 	.word	0x20000c78
 8005010:	20001050 	.word	0x20001050
 8005014:	20000c8c 	.word	0x20000c8c

08005018 <Settings_Read>:
void Settings_Read(int8_t *calib, uint8_t *led){
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
	//Read settings from flash
	Flash_Read(settings, 35);
 8005022:	2123      	movs	r1, #35	; 0x23
 8005024:	4823      	ldr	r0, [pc, #140]	; (80050b4 <Settings_Read+0x9c>)
 8005026:	f7fe ffdf 	bl	8003fe8 <Flash_Read>
	if(settings[0] != '#'){//Wrong data, reset
 800502a:	4b22      	ldr	r3, [pc, #136]	; (80050b4 <Settings_Read+0x9c>)
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	2b23      	cmp	r3, #35	; 0x23
 8005030:	d001      	beq.n	8005036 <Settings_Read+0x1e>
		Settings_Reset();
 8005032:	f7ff ff8f 	bl	8004f54 <Settings_Reset>
	}

	//Read LED status from string
	if(settings[32] == '1'){
 8005036:	4b1f      	ldr	r3, [pc, #124]	; (80050b4 <Settings_Read+0x9c>)
 8005038:	f893 3020 	ldrb.w	r3, [r3, #32]
 800503c:	2b31      	cmp	r3, #49	; 0x31
 800503e:	d102      	bne.n	8005046 <Settings_Read+0x2e>
		led = (uint8_t *)((uint8_t)1);
 8005040:	2301      	movs	r3, #1
 8005042:	603b      	str	r3, [r7, #0]
 8005044:	e005      	b.n	8005052 <Settings_Read+0x3a>
	}else{
		led = (uint8_t *)((uint8_t)0);
 8005046:	2300      	movs	r3, #0
 8005048:	603b      	str	r3, [r7, #0]
		TIM2 -> CCR2 = 0;
 800504a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800504e:	2200      	movs	r2, #0
 8005050:	639a      	str	r2, [r3, #56]	; 0x38
	}
	
	//Read calibration from string
	uint8_t i = 0;
 8005052:	2300      	movs	r3, #0
 8005054:	73fb      	strb	r3, [r7, #15]
	while(i != 8){
 8005056:	e024      	b.n	80050a2 <Settings_Read+0x8a>
		i++;
 8005058:	7bfb      	ldrb	r3, [r7, #15]
 800505a:	3301      	adds	r3, #1
 800505c:	73fb      	strb	r3, [r7, #15]
		if(settings[(2*i)] == '-'){
 800505e:	7bfb      	ldrb	r3, [r7, #15]
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	4a14      	ldr	r2, [pc, #80]	; (80050b4 <Settings_Read+0x9c>)
 8005064:	5cd3      	ldrb	r3, [r2, r3]
 8005066:	2b2d      	cmp	r3, #45	; 0x2d
 8005068:	d10e      	bne.n	8005088 <Settings_Read+0x70>
			calib[i-1] = (settings[(2*i)+1]-48)-(2*(settings[(2*i)+1]-48));
 800506a:	7bfb      	ldrb	r3, [r7, #15]
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	3301      	adds	r3, #1
 8005070:	4a10      	ldr	r2, [pc, #64]	; (80050b4 <Settings_Read+0x9c>)
 8005072:	5cd3      	ldrb	r3, [r2, r3]
 8005074:	f1c3 0330 	rsb	r3, r3, #48	; 0x30
 8005078:	b2d9      	uxtb	r1, r3
 800507a:	7bfb      	ldrb	r3, [r7, #15]
 800507c:	3b01      	subs	r3, #1
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	4413      	add	r3, r2
 8005082:	b24a      	sxtb	r2, r1
 8005084:	701a      	strb	r2, [r3, #0]
 8005086:	e00c      	b.n	80050a2 <Settings_Read+0x8a>
		}else{
			calib[i-1] = settings[(2*i)+1]-48;
 8005088:	7bfb      	ldrb	r3, [r7, #15]
 800508a:	005b      	lsls	r3, r3, #1
 800508c:	3301      	adds	r3, #1
 800508e:	4a09      	ldr	r2, [pc, #36]	; (80050b4 <Settings_Read+0x9c>)
 8005090:	5cd3      	ldrb	r3, [r2, r3]
 8005092:	3b30      	subs	r3, #48	; 0x30
 8005094:	b2d9      	uxtb	r1, r3
 8005096:	7bfb      	ldrb	r3, [r7, #15]
 8005098:	3b01      	subs	r3, #1
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	4413      	add	r3, r2
 800509e:	b24a      	sxtb	r2, r1
 80050a0:	701a      	strb	r2, [r3, #0]
	while(i != 8){
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d1d7      	bne.n	8005058 <Settings_Read+0x40>
		}
	}
}
 80050a8:	bf00      	nop
 80050aa:	bf00      	nop
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	20000c30 	.word	0x20000c30

080050b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80050bc:	f7fb fac4 	bl	8000648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80050c0:	f000 f813 	bl	80050ea <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80050c4:	f000 fa8e 	bl	80055e4 <MX_GPIO_Init>
  MX_CRC_Init();
 80050c8:	f000 f850 	bl	800516c <MX_CRC_Init>
  MX_TIM1_Init();
 80050cc:	f000 f862 	bl	8005194 <MX_TIM1_Init>
  MX_TIM2_Init();
 80050d0:	f000 f8ba 	bl	8005248 <MX_TIM2_Init>
  MX_TIM3_Init();
 80050d4:	f000 f92c 	bl	8005330 <MX_TIM3_Init>
  MX_TIM4_Init();
 80050d8:	f000 f9c2 	bl	8005460 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80050dc:	f000 fa58 	bl	8005590 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  App_Init();
 80050e0:	f7fe fd3c 	bl	8003b5c <App_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    App_Loop();
 80050e4:	f7fe fd52 	bl	8003b8c <App_Loop>
 80050e8:	e7fc      	b.n	80050e4 <main+0x2c>

080050ea <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b090      	sub	sp, #64	; 0x40
 80050ee:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80050f0:	f107 0318 	add.w	r3, r7, #24
 80050f4:	2228      	movs	r2, #40	; 0x28
 80050f6:	2100      	movs	r1, #0
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 fd31 	bl	8005b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80050fe:	1d3b      	adds	r3, r7, #4
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	605a      	str	r2, [r3, #4]
 8005106:	609a      	str	r2, [r3, #8]
 8005108:	60da      	str	r2, [r3, #12]
 800510a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800510c:	2302      	movs	r3, #2
 800510e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005110:	2301      	movs	r3, #1
 8005112:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005114:	2310      	movs	r3, #16
 8005116:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005118:	2302      	movs	r3, #2
 800511a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800511c:	2300      	movs	r3, #0
 800511e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8005120:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8005124:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005126:	f107 0318 	add.w	r3, r7, #24
 800512a:	4618      	mov	r0, r3
 800512c:	f7fc f8b8 	bl	80012a0 <HAL_RCC_OscConfig>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <SystemClock_Config+0x50>
  {
    Error_Handler();
 8005136:	f000 fab3 	bl	80056a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800513a:	230f      	movs	r3, #15
 800513c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800513e:	2302      	movs	r3, #2
 8005140:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005142:	2300      	movs	r3, #0
 8005144:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800514a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800514c:	2300      	movs	r3, #0
 800514e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005150:	1d3b      	adds	r3, r7, #4
 8005152:	2102      	movs	r1, #2
 8005154:	4618      	mov	r0, r3
 8005156:	f7fc fb25 	bl	80017a4 <HAL_RCC_ClockConfig>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d001      	beq.n	8005164 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8005160:	f000 fa9e 	bl	80056a0 <Error_Handler>
  }
}
 8005164:	bf00      	nop
 8005166:	3740      	adds	r7, #64	; 0x40
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8005170:	4b06      	ldr	r3, [pc, #24]	; (800518c <MX_CRC_Init+0x20>)
 8005172:	4a07      	ldr	r2, [pc, #28]	; (8005190 <MX_CRC_Init+0x24>)
 8005174:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8005176:	4805      	ldr	r0, [pc, #20]	; (800518c <MX_CRC_Init+0x20>)
 8005178:	f7fb fbf9 	bl	800096e <HAL_CRC_Init>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8005182:	f000 fa8d 	bl	80056a0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8005186:	bf00      	nop
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	20000f28 	.word	0x20000f28
 8005190:	40023000 	.word	0x40023000

08005194 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800519a:	f107 0308 	add.w	r3, r7, #8
 800519e:	2200      	movs	r2, #0
 80051a0:	601a      	str	r2, [r3, #0]
 80051a2:	605a      	str	r2, [r3, #4]
 80051a4:	609a      	str	r2, [r3, #8]
 80051a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051a8:	463b      	mov	r3, r7
 80051aa:	2200      	movs	r2, #0
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80051b0:	4b23      	ldr	r3, [pc, #140]	; (8005240 <MX_TIM1_Init+0xac>)
 80051b2:	4a24      	ldr	r2, [pc, #144]	; (8005244 <MX_TIM1_Init+0xb0>)
 80051b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 80051b6:	4b22      	ldr	r3, [pc, #136]	; (8005240 <MX_TIM1_Init+0xac>)
 80051b8:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80051bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051be:	4b20      	ldr	r3, [pc, #128]	; (8005240 <MX_TIM1_Init+0xac>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80051c4:	4b1e      	ldr	r3, [pc, #120]	; (8005240 <MX_TIM1_Init+0xac>)
 80051c6:	2263      	movs	r2, #99	; 0x63
 80051c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051ca:	4b1d      	ldr	r3, [pc, #116]	; (8005240 <MX_TIM1_Init+0xac>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80051d0:	4b1b      	ldr	r3, [pc, #108]	; (8005240 <MX_TIM1_Init+0xac>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051d6:	4b1a      	ldr	r3, [pc, #104]	; (8005240 <MX_TIM1_Init+0xac>)
 80051d8:	2200      	movs	r2, #0
 80051da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80051dc:	4818      	ldr	r0, [pc, #96]	; (8005240 <MX_TIM1_Init+0xac>)
 80051de:	f7fc fc79 	bl	8001ad4 <HAL_TIM_Base_Init>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80051e8:	f000 fa5a 	bl	80056a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80051f2:	f107 0308 	add.w	r3, r7, #8
 80051f6:	4619      	mov	r1, r3
 80051f8:	4811      	ldr	r0, [pc, #68]	; (8005240 <MX_TIM1_Init+0xac>)
 80051fa:	f7fd f855 	bl	80022a8 <HAL_TIM_ConfigClockSource>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8005204:	f000 fa4c 	bl	80056a0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8005208:	2108      	movs	r1, #8
 800520a:	480d      	ldr	r0, [pc, #52]	; (8005240 <MX_TIM1_Init+0xac>)
 800520c:	f7fc fe2c 	bl	8001e68 <HAL_TIM_OnePulse_Init>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 8005216:	f000 fa43 	bl	80056a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800521a:	2300      	movs	r3, #0
 800521c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800521e:	2300      	movs	r3, #0
 8005220:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005222:	463b      	mov	r3, r7
 8005224:	4619      	mov	r1, r3
 8005226:	4806      	ldr	r0, [pc, #24]	; (8005240 <MX_TIM1_Init+0xac>)
 8005228:	f7fd fbca 	bl	80029c0 <HAL_TIMEx_MasterConfigSynchronization>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8005232:	f000 fa35 	bl	80056a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8005236:	bf00      	nop
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	20000f30 	.word	0x20000f30
 8005244:	40012c00 	.word	0x40012c00

08005248 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b08e      	sub	sp, #56	; 0x38
 800524c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800524e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005252:	2200      	movs	r2, #0
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	605a      	str	r2, [r3, #4]
 8005258:	609a      	str	r2, [r3, #8]
 800525a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800525c:	f107 0320 	add.w	r3, r7, #32
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005266:	1d3b      	adds	r3, r7, #4
 8005268:	2200      	movs	r2, #0
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	605a      	str	r2, [r3, #4]
 800526e:	609a      	str	r2, [r3, #8]
 8005270:	60da      	str	r2, [r3, #12]
 8005272:	611a      	str	r2, [r3, #16]
 8005274:	615a      	str	r2, [r3, #20]
 8005276:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005278:	4b2c      	ldr	r3, [pc, #176]	; (800532c <MX_TIM2_Init+0xe4>)
 800527a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800527e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8005280:	4b2a      	ldr	r3, [pc, #168]	; (800532c <MX_TIM2_Init+0xe4>)
 8005282:	221f      	movs	r2, #31
 8005284:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005286:	4b29      	ldr	r3, [pc, #164]	; (800532c <MX_TIM2_Init+0xe4>)
 8005288:	2200      	movs	r2, #0
 800528a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 800528c:	4b27      	ldr	r3, [pc, #156]	; (800532c <MX_TIM2_Init+0xe4>)
 800528e:	223f      	movs	r2, #63	; 0x3f
 8005290:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005292:	4b26      	ldr	r3, [pc, #152]	; (800532c <MX_TIM2_Init+0xe4>)
 8005294:	2200      	movs	r2, #0
 8005296:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005298:	4b24      	ldr	r3, [pc, #144]	; (800532c <MX_TIM2_Init+0xe4>)
 800529a:	2200      	movs	r2, #0
 800529c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800529e:	4823      	ldr	r0, [pc, #140]	; (800532c <MX_TIM2_Init+0xe4>)
 80052a0:	f7fc fc18 	bl	8001ad4 <HAL_TIM_Base_Init>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80052aa:	f000 f9f9 	bl	80056a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80052ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80052b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052b8:	4619      	mov	r1, r3
 80052ba:	481c      	ldr	r0, [pc, #112]	; (800532c <MX_TIM2_Init+0xe4>)
 80052bc:	f7fc fff4 	bl	80022a8 <HAL_TIM_ConfigClockSource>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80052c6:	f000 f9eb 	bl	80056a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80052ca:	4818      	ldr	r0, [pc, #96]	; (800532c <MX_TIM2_Init+0xe4>)
 80052cc:	f7fc fcd2 	bl	8001c74 <HAL_TIM_PWM_Init>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80052d6:	f000 f9e3 	bl	80056a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052da:	2300      	movs	r3, #0
 80052dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052de:	2300      	movs	r3, #0
 80052e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80052e2:	f107 0320 	add.w	r3, r7, #32
 80052e6:	4619      	mov	r1, r3
 80052e8:	4810      	ldr	r0, [pc, #64]	; (800532c <MX_TIM2_Init+0xe4>)
 80052ea:	f7fd fb69 	bl	80029c0 <HAL_TIMEx_MasterConfigSynchronization>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d001      	beq.n	80052f8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80052f4:	f000 f9d4 	bl	80056a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80052f8:	2360      	movs	r3, #96	; 0x60
 80052fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80052fc:	2300      	movs	r3, #0
 80052fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005300:	2300      	movs	r3, #0
 8005302:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005304:	2300      	movs	r3, #0
 8005306:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005308:	1d3b      	adds	r3, r7, #4
 800530a:	2204      	movs	r2, #4
 800530c:	4619      	mov	r1, r3
 800530e:	4807      	ldr	r0, [pc, #28]	; (800532c <MX_TIM2_Init+0xe4>)
 8005310:	f7fc ff0c 	bl	800212c <HAL_TIM_PWM_ConfigChannel>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d001      	beq.n	800531e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800531a:	f000 f9c1 	bl	80056a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800531e:	4803      	ldr	r0, [pc, #12]	; (800532c <MX_TIM2_Init+0xe4>)
 8005320:	f000 fa74 	bl	800580c <HAL_TIM_MspPostInit>

}
 8005324:	bf00      	nop
 8005326:	3738      	adds	r7, #56	; 0x38
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	20000f78 	.word	0x20000f78

08005330 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b08e      	sub	sp, #56	; 0x38
 8005334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005336:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800533a:	2200      	movs	r2, #0
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	605a      	str	r2, [r3, #4]
 8005340:	609a      	str	r2, [r3, #8]
 8005342:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005344:	f107 0320 	add.w	r3, r7, #32
 8005348:	2200      	movs	r2, #0
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800534e:	1d3b      	adds	r3, r7, #4
 8005350:	2200      	movs	r2, #0
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	605a      	str	r2, [r3, #4]
 8005356:	609a      	str	r2, [r3, #8]
 8005358:	60da      	str	r2, [r3, #12]
 800535a:	611a      	str	r2, [r3, #16]
 800535c:	615a      	str	r2, [r3, #20]
 800535e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005360:	4b3d      	ldr	r3, [pc, #244]	; (8005458 <MX_TIM3_Init+0x128>)
 8005362:	4a3e      	ldr	r2, [pc, #248]	; (800545c <MX_TIM3_Init+0x12c>)
 8005364:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8005366:	4b3c      	ldr	r3, [pc, #240]	; (8005458 <MX_TIM3_Init+0x128>)
 8005368:	223f      	movs	r2, #63	; 0x3f
 800536a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800536c:	4b3a      	ldr	r3, [pc, #232]	; (8005458 <MX_TIM3_Init+0x128>)
 800536e:	2200      	movs	r2, #0
 8005370:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8005372:	4b39      	ldr	r3, [pc, #228]	; (8005458 <MX_TIM3_Init+0x128>)
 8005374:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005378:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800537a:	4b37      	ldr	r3, [pc, #220]	; (8005458 <MX_TIM3_Init+0x128>)
 800537c:	2200      	movs	r2, #0
 800537e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005380:	4b35      	ldr	r3, [pc, #212]	; (8005458 <MX_TIM3_Init+0x128>)
 8005382:	2200      	movs	r2, #0
 8005384:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005386:	4834      	ldr	r0, [pc, #208]	; (8005458 <MX_TIM3_Init+0x128>)
 8005388:	f7fc fba4 	bl	8001ad4 <HAL_TIM_Base_Init>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8005392:	f000 f985 	bl	80056a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800539a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800539c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053a0:	4619      	mov	r1, r3
 80053a2:	482d      	ldr	r0, [pc, #180]	; (8005458 <MX_TIM3_Init+0x128>)
 80053a4:	f7fc ff80 	bl	80022a8 <HAL_TIM_ConfigClockSource>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80053ae:	f000 f977 	bl	80056a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80053b2:	4829      	ldr	r0, [pc, #164]	; (8005458 <MX_TIM3_Init+0x128>)
 80053b4:	f7fc fc5e 	bl	8001c74 <HAL_TIM_PWM_Init>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80053be:	f000 f96f 	bl	80056a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053c2:	2300      	movs	r3, #0
 80053c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053c6:	2300      	movs	r3, #0
 80053c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80053ca:	f107 0320 	add.w	r3, r7, #32
 80053ce:	4619      	mov	r1, r3
 80053d0:	4821      	ldr	r0, [pc, #132]	; (8005458 <MX_TIM3_Init+0x128>)
 80053d2:	f7fd faf5 	bl	80029c0 <HAL_TIMEx_MasterConfigSynchronization>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80053dc:	f000 f960 	bl	80056a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80053e0:	2360      	movs	r3, #96	; 0x60
 80053e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80053e4:	2300      	movs	r3, #0
 80053e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80053e8:	2300      	movs	r3, #0
 80053ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80053ec:	2300      	movs	r3, #0
 80053ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80053f0:	1d3b      	adds	r3, r7, #4
 80053f2:	2200      	movs	r2, #0
 80053f4:	4619      	mov	r1, r3
 80053f6:	4818      	ldr	r0, [pc, #96]	; (8005458 <MX_TIM3_Init+0x128>)
 80053f8:	f7fc fe98 	bl	800212c <HAL_TIM_PWM_ConfigChannel>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8005402:	f000 f94d 	bl	80056a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005406:	1d3b      	adds	r3, r7, #4
 8005408:	2204      	movs	r2, #4
 800540a:	4619      	mov	r1, r3
 800540c:	4812      	ldr	r0, [pc, #72]	; (8005458 <MX_TIM3_Init+0x128>)
 800540e:	f7fc fe8d 	bl	800212c <HAL_TIM_PWM_ConfigChannel>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8005418:	f000 f942 	bl	80056a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800541c:	1d3b      	adds	r3, r7, #4
 800541e:	2208      	movs	r2, #8
 8005420:	4619      	mov	r1, r3
 8005422:	480d      	ldr	r0, [pc, #52]	; (8005458 <MX_TIM3_Init+0x128>)
 8005424:	f7fc fe82 	bl	800212c <HAL_TIM_PWM_ConfigChannel>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800542e:	f000 f937 	bl	80056a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005432:	1d3b      	adds	r3, r7, #4
 8005434:	220c      	movs	r2, #12
 8005436:	4619      	mov	r1, r3
 8005438:	4807      	ldr	r0, [pc, #28]	; (8005458 <MX_TIM3_Init+0x128>)
 800543a:	f7fc fe77 	bl	800212c <HAL_TIM_PWM_ConfigChannel>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d001      	beq.n	8005448 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8005444:	f000 f92c 	bl	80056a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005448:	4803      	ldr	r0, [pc, #12]	; (8005458 <MX_TIM3_Init+0x128>)
 800544a:	f000 f9df 	bl	800580c <HAL_TIM_MspPostInit>

}
 800544e:	bf00      	nop
 8005450:	3738      	adds	r7, #56	; 0x38
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	20000fc0 	.word	0x20000fc0
 800545c:	40000400 	.word	0x40000400

08005460 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b08e      	sub	sp, #56	; 0x38
 8005464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005466:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800546a:	2200      	movs	r2, #0
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	605a      	str	r2, [r3, #4]
 8005470:	609a      	str	r2, [r3, #8]
 8005472:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005474:	f107 0320 	add.w	r3, r7, #32
 8005478:	2200      	movs	r2, #0
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800547e:	1d3b      	adds	r3, r7, #4
 8005480:	2200      	movs	r2, #0
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	605a      	str	r2, [r3, #4]
 8005486:	609a      	str	r2, [r3, #8]
 8005488:	60da      	str	r2, [r3, #12]
 800548a:	611a      	str	r2, [r3, #16]
 800548c:	615a      	str	r2, [r3, #20]
 800548e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005490:	4b3d      	ldr	r3, [pc, #244]	; (8005588 <MX_TIM4_Init+0x128>)
 8005492:	4a3e      	ldr	r2, [pc, #248]	; (800558c <MX_TIM4_Init+0x12c>)
 8005494:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63;
 8005496:	4b3c      	ldr	r3, [pc, #240]	; (8005588 <MX_TIM4_Init+0x128>)
 8005498:	223f      	movs	r2, #63	; 0x3f
 800549a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800549c:	4b3a      	ldr	r3, [pc, #232]	; (8005588 <MX_TIM4_Init+0x128>)
 800549e:	2200      	movs	r2, #0
 80054a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80054a2:	4b39      	ldr	r3, [pc, #228]	; (8005588 <MX_TIM4_Init+0x128>)
 80054a4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80054a8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054aa:	4b37      	ldr	r3, [pc, #220]	; (8005588 <MX_TIM4_Init+0x128>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054b0:	4b35      	ldr	r3, [pc, #212]	; (8005588 <MX_TIM4_Init+0x128>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80054b6:	4834      	ldr	r0, [pc, #208]	; (8005588 <MX_TIM4_Init+0x128>)
 80054b8:	f7fc fb0c 	bl	8001ad4 <HAL_TIM_Base_Init>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80054c2:	f000 f8ed 	bl	80056a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80054c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054ca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80054cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054d0:	4619      	mov	r1, r3
 80054d2:	482d      	ldr	r0, [pc, #180]	; (8005588 <MX_TIM4_Init+0x128>)
 80054d4:	f7fc fee8 	bl	80022a8 <HAL_TIM_ConfigClockSource>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80054de:	f000 f8df 	bl	80056a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80054e2:	4829      	ldr	r0, [pc, #164]	; (8005588 <MX_TIM4_Init+0x128>)
 80054e4:	f7fc fbc6 	bl	8001c74 <HAL_TIM_PWM_Init>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80054ee:	f000 f8d7 	bl	80056a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054f2:	2300      	movs	r3, #0
 80054f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054f6:	2300      	movs	r3, #0
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80054fa:	f107 0320 	add.w	r3, r7, #32
 80054fe:	4619      	mov	r1, r3
 8005500:	4821      	ldr	r0, [pc, #132]	; (8005588 <MX_TIM4_Init+0x128>)
 8005502:	f7fd fa5d 	bl	80029c0 <HAL_TIMEx_MasterConfigSynchronization>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800550c:	f000 f8c8 	bl	80056a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005510:	2360      	movs	r3, #96	; 0x60
 8005512:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005514:	2300      	movs	r3, #0
 8005516:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005518:	2300      	movs	r3, #0
 800551a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800551c:	2300      	movs	r3, #0
 800551e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005520:	1d3b      	adds	r3, r7, #4
 8005522:	2200      	movs	r2, #0
 8005524:	4619      	mov	r1, r3
 8005526:	4818      	ldr	r0, [pc, #96]	; (8005588 <MX_TIM4_Init+0x128>)
 8005528:	f7fc fe00 	bl	800212c <HAL_TIM_PWM_ConfigChannel>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8005532:	f000 f8b5 	bl	80056a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005536:	1d3b      	adds	r3, r7, #4
 8005538:	2204      	movs	r2, #4
 800553a:	4619      	mov	r1, r3
 800553c:	4812      	ldr	r0, [pc, #72]	; (8005588 <MX_TIM4_Init+0x128>)
 800553e:	f7fc fdf5 	bl	800212c <HAL_TIM_PWM_ConfigChannel>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8005548:	f000 f8aa 	bl	80056a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800554c:	1d3b      	adds	r3, r7, #4
 800554e:	2208      	movs	r2, #8
 8005550:	4619      	mov	r1, r3
 8005552:	480d      	ldr	r0, [pc, #52]	; (8005588 <MX_TIM4_Init+0x128>)
 8005554:	f7fc fdea 	bl	800212c <HAL_TIM_PWM_ConfigChannel>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800555e:	f000 f89f 	bl	80056a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005562:	1d3b      	adds	r3, r7, #4
 8005564:	220c      	movs	r2, #12
 8005566:	4619      	mov	r1, r3
 8005568:	4807      	ldr	r0, [pc, #28]	; (8005588 <MX_TIM4_Init+0x128>)
 800556a:	f7fc fddf 	bl	800212c <HAL_TIM_PWM_ConfigChannel>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8005574:	f000 f894 	bl	80056a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005578:	4803      	ldr	r0, [pc, #12]	; (8005588 <MX_TIM4_Init+0x128>)
 800557a:	f000 f947 	bl	800580c <HAL_TIM_MspPostInit>

}
 800557e:	bf00      	nop
 8005580:	3738      	adds	r7, #56	; 0x38
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	20001008 	.word	0x20001008
 800558c:	40000800 	.word	0x40000800

08005590 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005594:	4b11      	ldr	r3, [pc, #68]	; (80055dc <MX_USART1_UART_Init+0x4c>)
 8005596:	4a12      	ldr	r2, [pc, #72]	; (80055e0 <MX_USART1_UART_Init+0x50>)
 8005598:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800559a:	4b10      	ldr	r3, [pc, #64]	; (80055dc <MX_USART1_UART_Init+0x4c>)
 800559c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80055a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80055a2:	4b0e      	ldr	r3, [pc, #56]	; (80055dc <MX_USART1_UART_Init+0x4c>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80055a8:	4b0c      	ldr	r3, [pc, #48]	; (80055dc <MX_USART1_UART_Init+0x4c>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80055ae:	4b0b      	ldr	r3, [pc, #44]	; (80055dc <MX_USART1_UART_Init+0x4c>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80055b4:	4b09      	ldr	r3, [pc, #36]	; (80055dc <MX_USART1_UART_Init+0x4c>)
 80055b6:	220c      	movs	r2, #12
 80055b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80055ba:	4b08      	ldr	r3, [pc, #32]	; (80055dc <MX_USART1_UART_Init+0x4c>)
 80055bc:	2200      	movs	r2, #0
 80055be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80055c0:	4b06      	ldr	r3, [pc, #24]	; (80055dc <MX_USART1_UART_Init+0x4c>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80055c6:	4805      	ldr	r0, [pc, #20]	; (80055dc <MX_USART1_UART_Init+0x4c>)
 80055c8:	f7fd fa6a 	bl	8002aa0 <HAL_UART_Init>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d001      	beq.n	80055d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80055d2:	f000 f865 	bl	80056a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80055d6:	bf00      	nop
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	20001050 	.word	0x20001050
 80055e0:	40013800 	.word	0x40013800

080055e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055ea:	f107 0308 	add.w	r3, r7, #8
 80055ee:	2200      	movs	r2, #0
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	605a      	str	r2, [r3, #4]
 80055f4:	609a      	str	r2, [r3, #8]
 80055f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80055f8:	4b26      	ldr	r3, [pc, #152]	; (8005694 <MX_GPIO_Init+0xb0>)
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	4a25      	ldr	r2, [pc, #148]	; (8005694 <MX_GPIO_Init+0xb0>)
 80055fe:	f043 0304 	orr.w	r3, r3, #4
 8005602:	6193      	str	r3, [r2, #24]
 8005604:	4b23      	ldr	r3, [pc, #140]	; (8005694 <MX_GPIO_Init+0xb0>)
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	f003 0304 	and.w	r3, r3, #4
 800560c:	607b      	str	r3, [r7, #4]
 800560e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005610:	4b20      	ldr	r3, [pc, #128]	; (8005694 <MX_GPIO_Init+0xb0>)
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	4a1f      	ldr	r2, [pc, #124]	; (8005694 <MX_GPIO_Init+0xb0>)
 8005616:	f043 0308 	orr.w	r3, r3, #8
 800561a:	6193      	str	r3, [r2, #24]
 800561c:	4b1d      	ldr	r3, [pc, #116]	; (8005694 <MX_GPIO_Init+0xb0>)
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	f003 0308 	and.w	r3, r3, #8
 8005624:	603b      	str	r3, [r7, #0]
 8005626:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BT_RESET_GPIO_Port, BT_RESET_Pin, GPIO_PIN_SET);
 8005628:	2201      	movs	r2, #1
 800562a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800562e:	481a      	ldr	r0, [pc, #104]	; (8005698 <MX_GPIO_Init+0xb4>)
 8005630:	f7fb fe05 	bl	800123e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_SET_RESET_Pin BT_STAT_Pin */
  GPIO_InitStruct.Pin = BUTTON_SET_RESET_Pin|BT_STAT_Pin;
 8005634:	f44f 7384 	mov.w	r3, #264	; 0x108
 8005638:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800563a:	4b18      	ldr	r3, [pc, #96]	; (800569c <MX_GPIO_Init+0xb8>)
 800563c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800563e:	2301      	movs	r3, #1
 8005640:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005642:	f107 0308 	add.w	r3, r7, #8
 8005646:	4619      	mov	r1, r3
 8005648:	4813      	ldr	r0, [pc, #76]	; (8005698 <MX_GPIO_Init+0xb4>)
 800564a:	f7fb fc5d 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_RESET_Pin */
  GPIO_InitStruct.Pin = BT_RESET_Pin;
 800564e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005652:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005654:	2301      	movs	r3, #1
 8005656:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005658:	2301      	movs	r3, #1
 800565a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800565c:	2303      	movs	r3, #3
 800565e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BT_RESET_GPIO_Port, &GPIO_InitStruct);
 8005660:	f107 0308 	add.w	r3, r7, #8
 8005664:	4619      	mov	r1, r3
 8005666:	480c      	ldr	r0, [pc, #48]	; (8005698 <MX_GPIO_Init+0xb4>)
 8005668:	f7fb fc4e 	bl	8000f08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800566c:	2200      	movs	r2, #0
 800566e:	2100      	movs	r1, #0
 8005670:	2009      	movs	r0, #9
 8005672:	f7fb f946 	bl	8000902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8005676:	2009      	movs	r0, #9
 8005678:	f7fb f95f 	bl	800093a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800567c:	2200      	movs	r2, #0
 800567e:	2100      	movs	r1, #0
 8005680:	2017      	movs	r0, #23
 8005682:	f7fb f93e 	bl	8000902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005686:	2017      	movs	r0, #23
 8005688:	f7fb f957 	bl	800093a <HAL_NVIC_EnableIRQ>

}
 800568c:	bf00      	nop
 800568e:	3718      	adds	r7, #24
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	40021000 	.word	0x40021000
 8005698:	40010800 	.word	0x40010800
 800569c:	10310000 	.word	0x10310000

080056a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80056a0:	b480      	push	{r7}
 80056a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80056a4:	bf00      	nop
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bc80      	pop	{r7}
 80056aa:	4770      	bx	lr

080056ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80056b2:	4b15      	ldr	r3, [pc, #84]	; (8005708 <HAL_MspInit+0x5c>)
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	4a14      	ldr	r2, [pc, #80]	; (8005708 <HAL_MspInit+0x5c>)
 80056b8:	f043 0301 	orr.w	r3, r3, #1
 80056bc:	6193      	str	r3, [r2, #24]
 80056be:	4b12      	ldr	r3, [pc, #72]	; (8005708 <HAL_MspInit+0x5c>)
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	60bb      	str	r3, [r7, #8]
 80056c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80056ca:	4b0f      	ldr	r3, [pc, #60]	; (8005708 <HAL_MspInit+0x5c>)
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	4a0e      	ldr	r2, [pc, #56]	; (8005708 <HAL_MspInit+0x5c>)
 80056d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056d4:	61d3      	str	r3, [r2, #28]
 80056d6:	4b0c      	ldr	r3, [pc, #48]	; (8005708 <HAL_MspInit+0x5c>)
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056de:	607b      	str	r3, [r7, #4]
 80056e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80056e2:	4b0a      	ldr	r3, [pc, #40]	; (800570c <HAL_MspInit+0x60>)
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	60fb      	str	r3, [r7, #12]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	4a04      	ldr	r2, [pc, #16]	; (800570c <HAL_MspInit+0x60>)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80056fe:	bf00      	nop
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	bc80      	pop	{r7}
 8005706:	4770      	bx	lr
 8005708:	40021000 	.word	0x40021000
 800570c:	40010000 	.word	0x40010000

08005710 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a09      	ldr	r2, [pc, #36]	; (8005744 <HAL_CRC_MspInit+0x34>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d10b      	bne.n	800573a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8005722:	4b09      	ldr	r3, [pc, #36]	; (8005748 <HAL_CRC_MspInit+0x38>)
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	4a08      	ldr	r2, [pc, #32]	; (8005748 <HAL_CRC_MspInit+0x38>)
 8005728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800572c:	6153      	str	r3, [r2, #20]
 800572e:	4b06      	ldr	r3, [pc, #24]	; (8005748 <HAL_CRC_MspInit+0x38>)
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800573a:	bf00      	nop
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	bc80      	pop	{r7}
 8005742:	4770      	bx	lr
 8005744:	40023000 	.word	0x40023000
 8005748:	40021000 	.word	0x40021000

0800574c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a28      	ldr	r2, [pc, #160]	; (80057fc <HAL_TIM_Base_MspInit+0xb0>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d114      	bne.n	8005788 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800575e:	4b28      	ldr	r3, [pc, #160]	; (8005800 <HAL_TIM_Base_MspInit+0xb4>)
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	4a27      	ldr	r2, [pc, #156]	; (8005800 <HAL_TIM_Base_MspInit+0xb4>)
 8005764:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005768:	6193      	str	r3, [r2, #24]
 800576a:	4b25      	ldr	r3, [pc, #148]	; (8005800 <HAL_TIM_Base_MspInit+0xb4>)
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8005776:	2200      	movs	r2, #0
 8005778:	2100      	movs	r1, #0
 800577a:	2019      	movs	r0, #25
 800577c:	f7fb f8c1 	bl	8000902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8005780:	2019      	movs	r0, #25
 8005782:	f7fb f8da 	bl	800093a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005786:	e034      	b.n	80057f2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005790:	d10c      	bne.n	80057ac <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005792:	4b1b      	ldr	r3, [pc, #108]	; (8005800 <HAL_TIM_Base_MspInit+0xb4>)
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	4a1a      	ldr	r2, [pc, #104]	; (8005800 <HAL_TIM_Base_MspInit+0xb4>)
 8005798:	f043 0301 	orr.w	r3, r3, #1
 800579c:	61d3      	str	r3, [r2, #28]
 800579e:	4b18      	ldr	r3, [pc, #96]	; (8005800 <HAL_TIM_Base_MspInit+0xb4>)
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	613b      	str	r3, [r7, #16]
 80057a8:	693b      	ldr	r3, [r7, #16]
}
 80057aa:	e022      	b.n	80057f2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a14      	ldr	r2, [pc, #80]	; (8005804 <HAL_TIM_Base_MspInit+0xb8>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d10c      	bne.n	80057d0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80057b6:	4b12      	ldr	r3, [pc, #72]	; (8005800 <HAL_TIM_Base_MspInit+0xb4>)
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	4a11      	ldr	r2, [pc, #68]	; (8005800 <HAL_TIM_Base_MspInit+0xb4>)
 80057bc:	f043 0302 	orr.w	r3, r3, #2
 80057c0:	61d3      	str	r3, [r2, #28]
 80057c2:	4b0f      	ldr	r3, [pc, #60]	; (8005800 <HAL_TIM_Base_MspInit+0xb4>)
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	68fb      	ldr	r3, [r7, #12]
}
 80057ce:	e010      	b.n	80057f2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a0c      	ldr	r2, [pc, #48]	; (8005808 <HAL_TIM_Base_MspInit+0xbc>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d10b      	bne.n	80057f2 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80057da:	4b09      	ldr	r3, [pc, #36]	; (8005800 <HAL_TIM_Base_MspInit+0xb4>)
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	4a08      	ldr	r2, [pc, #32]	; (8005800 <HAL_TIM_Base_MspInit+0xb4>)
 80057e0:	f043 0304 	orr.w	r3, r3, #4
 80057e4:	61d3      	str	r3, [r2, #28]
 80057e6:	4b06      	ldr	r3, [pc, #24]	; (8005800 <HAL_TIM_Base_MspInit+0xb4>)
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	f003 0304 	and.w	r3, r3, #4
 80057ee:	60bb      	str	r3, [r7, #8]
 80057f0:	68bb      	ldr	r3, [r7, #8]
}
 80057f2:	bf00      	nop
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	40012c00 	.word	0x40012c00
 8005800:	40021000 	.word	0x40021000
 8005804:	40000400 	.word	0x40000400
 8005808:	40000800 	.word	0x40000800

0800580c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b08a      	sub	sp, #40	; 0x28
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005814:	f107 0314 	add.w	r3, r7, #20
 8005818:	2200      	movs	r2, #0
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	605a      	str	r2, [r3, #4]
 800581e:	609a      	str	r2, [r3, #8]
 8005820:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800582a:	d118      	bne.n	800585e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800582c:	4b35      	ldr	r3, [pc, #212]	; (8005904 <HAL_TIM_MspPostInit+0xf8>)
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	4a34      	ldr	r2, [pc, #208]	; (8005904 <HAL_TIM_MspPostInit+0xf8>)
 8005832:	f043 0304 	orr.w	r3, r3, #4
 8005836:	6193      	str	r3, [r2, #24]
 8005838:	4b32      	ldr	r3, [pc, #200]	; (8005904 <HAL_TIM_MspPostInit+0xf8>)
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	f003 0304 	and.w	r3, r3, #4
 8005840:	613b      	str	r3, [r7, #16]
 8005842:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LED_STATUS_Pin;
 8005844:	2302      	movs	r3, #2
 8005846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005848:	2302      	movs	r3, #2
 800584a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800584c:	2302      	movs	r3, #2
 800584e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LED_STATUS_GPIO_Port, &GPIO_InitStruct);
 8005850:	f107 0314 	add.w	r3, r7, #20
 8005854:	4619      	mov	r1, r3
 8005856:	482c      	ldr	r0, [pc, #176]	; (8005908 <HAL_TIM_MspPostInit+0xfc>)
 8005858:	f7fb fb56 	bl	8000f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800585c:	e04d      	b.n	80058fa <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a2a      	ldr	r2, [pc, #168]	; (800590c <HAL_TIM_MspPostInit+0x100>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d12a      	bne.n	80058be <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005868:	4b26      	ldr	r3, [pc, #152]	; (8005904 <HAL_TIM_MspPostInit+0xf8>)
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	4a25      	ldr	r2, [pc, #148]	; (8005904 <HAL_TIM_MspPostInit+0xf8>)
 800586e:	f043 0308 	orr.w	r3, r3, #8
 8005872:	6193      	str	r3, [r2, #24]
 8005874:	4b23      	ldr	r3, [pc, #140]	; (8005904 <HAL_TIM_MspPostInit+0xf8>)
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	f003 0308 	and.w	r3, r3, #8
 800587c:	60fb      	str	r3, [r7, #12]
 800587e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERV_3_Pin|SERV_4_Pin|SERV_1_Pin|SERV_2_Pin;
 8005880:	2333      	movs	r3, #51	; 0x33
 8005882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005884:	2302      	movs	r3, #2
 8005886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005888:	2302      	movs	r3, #2
 800588a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800588c:	f107 0314 	add.w	r3, r7, #20
 8005890:	4619      	mov	r1, r3
 8005892:	481f      	ldr	r0, [pc, #124]	; (8005910 <HAL_TIM_MspPostInit+0x104>)
 8005894:	f7fb fb38 	bl	8000f08 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8005898:	4b1e      	ldr	r3, [pc, #120]	; (8005914 <HAL_TIM_MspPostInit+0x108>)
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	627b      	str	r3, [r7, #36]	; 0x24
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80058a4:	627b      	str	r3, [r7, #36]	; 0x24
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80058b4:	627b      	str	r3, [r7, #36]	; 0x24
 80058b6:	4a17      	ldr	r2, [pc, #92]	; (8005914 <HAL_TIM_MspPostInit+0x108>)
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	6053      	str	r3, [r2, #4]
}
 80058bc:	e01d      	b.n	80058fa <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM4)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a15      	ldr	r2, [pc, #84]	; (8005918 <HAL_TIM_MspPostInit+0x10c>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d118      	bne.n	80058fa <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058c8:	4b0e      	ldr	r3, [pc, #56]	; (8005904 <HAL_TIM_MspPostInit+0xf8>)
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	4a0d      	ldr	r2, [pc, #52]	; (8005904 <HAL_TIM_MspPostInit+0xf8>)
 80058ce:	f043 0308 	orr.w	r3, r3, #8
 80058d2:	6193      	str	r3, [r2, #24]
 80058d4:	4b0b      	ldr	r3, [pc, #44]	; (8005904 <HAL_TIM_MspPostInit+0xf8>)
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	f003 0308 	and.w	r3, r3, #8
 80058dc:	60bb      	str	r3, [r7, #8]
 80058de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SERV_5_Pin|SERV_6_Pin|SERV_7_Pin|SERV_8_Pin;
 80058e0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80058e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058e6:	2302      	movs	r3, #2
 80058e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058ea:	2302      	movs	r3, #2
 80058ec:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058ee:	f107 0314 	add.w	r3, r7, #20
 80058f2:	4619      	mov	r1, r3
 80058f4:	4806      	ldr	r0, [pc, #24]	; (8005910 <HAL_TIM_MspPostInit+0x104>)
 80058f6:	f7fb fb07 	bl	8000f08 <HAL_GPIO_Init>
}
 80058fa:	bf00      	nop
 80058fc:	3728      	adds	r7, #40	; 0x28
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	40021000 	.word	0x40021000
 8005908:	40010800 	.word	0x40010800
 800590c:	40000400 	.word	0x40000400
 8005910:	40010c00 	.word	0x40010c00
 8005914:	40010000 	.word	0x40010000
 8005918:	40000800 	.word	0x40000800

0800591c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b088      	sub	sp, #32
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005924:	f107 0310 	add.w	r3, r7, #16
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	605a      	str	r2, [r3, #4]
 800592e:	609a      	str	r2, [r3, #8]
 8005930:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a20      	ldr	r2, [pc, #128]	; (80059b8 <HAL_UART_MspInit+0x9c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d139      	bne.n	80059b0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800593c:	4b1f      	ldr	r3, [pc, #124]	; (80059bc <HAL_UART_MspInit+0xa0>)
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	4a1e      	ldr	r2, [pc, #120]	; (80059bc <HAL_UART_MspInit+0xa0>)
 8005942:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005946:	6193      	str	r3, [r2, #24]
 8005948:	4b1c      	ldr	r3, [pc, #112]	; (80059bc <HAL_UART_MspInit+0xa0>)
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005950:	60fb      	str	r3, [r7, #12]
 8005952:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005954:	4b19      	ldr	r3, [pc, #100]	; (80059bc <HAL_UART_MspInit+0xa0>)
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	4a18      	ldr	r2, [pc, #96]	; (80059bc <HAL_UART_MspInit+0xa0>)
 800595a:	f043 0304 	orr.w	r3, r3, #4
 800595e:	6193      	str	r3, [r2, #24]
 8005960:	4b16      	ldr	r3, [pc, #88]	; (80059bc <HAL_UART_MspInit+0xa0>)
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	f003 0304 	and.w	r3, r3, #4
 8005968:	60bb      	str	r3, [r7, #8]
 800596a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BT_TX_Pin;
 800596c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005970:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005972:	2302      	movs	r3, #2
 8005974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005976:	2303      	movs	r3, #3
 8005978:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BT_TX_GPIO_Port, &GPIO_InitStruct);
 800597a:	f107 0310 	add.w	r3, r7, #16
 800597e:	4619      	mov	r1, r3
 8005980:	480f      	ldr	r0, [pc, #60]	; (80059c0 <HAL_UART_MspInit+0xa4>)
 8005982:	f7fb fac1 	bl	8000f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BT_RX_Pin;
 8005986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800598a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800598c:	2300      	movs	r3, #0
 800598e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005990:	2301      	movs	r3, #1
 8005992:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BT_RX_GPIO_Port, &GPIO_InitStruct);
 8005994:	f107 0310 	add.w	r3, r7, #16
 8005998:	4619      	mov	r1, r3
 800599a:	4809      	ldr	r0, [pc, #36]	; (80059c0 <HAL_UART_MspInit+0xa4>)
 800599c:	f7fb fab4 	bl	8000f08 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80059a0:	2200      	movs	r2, #0
 80059a2:	2100      	movs	r1, #0
 80059a4:	2025      	movs	r0, #37	; 0x25
 80059a6:	f7fa ffac 	bl	8000902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80059aa:	2025      	movs	r0, #37	; 0x25
 80059ac:	f7fa ffc5 	bl	800093a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80059b0:	bf00      	nop
 80059b2:	3720      	adds	r7, #32
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	40013800 	.word	0x40013800
 80059bc:	40021000 	.word	0x40021000
 80059c0:	40010800 	.word	0x40010800

080059c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80059c4:	b480      	push	{r7}
 80059c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80059c8:	bf00      	nop
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bc80      	pop	{r7}
 80059ce:	4770      	bx	lr

080059d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80059d0:	b480      	push	{r7}
 80059d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80059d4:	e7fe      	b.n	80059d4 <HardFault_Handler+0x4>

080059d6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80059d6:	b480      	push	{r7}
 80059d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80059da:	e7fe      	b.n	80059da <MemManage_Handler+0x4>

080059dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80059dc:	b480      	push	{r7}
 80059de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80059e0:	e7fe      	b.n	80059e0 <BusFault_Handler+0x4>

080059e2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80059e2:	b480      	push	{r7}
 80059e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80059e6:	e7fe      	b.n	80059e6 <UsageFault_Handler+0x4>

080059e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80059e8:	b480      	push	{r7}
 80059ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80059ec:	bf00      	nop
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bc80      	pop	{r7}
 80059f2:	4770      	bx	lr

080059f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80059f8:	bf00      	nop
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bc80      	pop	{r7}
 80059fe:	4770      	bx	lr

08005a00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005a00:	b480      	push	{r7}
 8005a02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005a04:	bf00      	nop
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bc80      	pop	{r7}
 8005a0a:	4770      	bx	lr

08005a0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a10:	f7fa fe60 	bl	80006d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
App_SysTick_Call();
 8005a14:	f7fd fe90 	bl	8003738 <App_SysTick_Call>
  /* USER CODE END SysTick_IRQn 1 */
}
 8005a18:	bf00      	nop
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SET_RESET_Pin);
 8005a20:	2008      	movs	r0, #8
 8005a22:	f7fb fc25 	bl	8001270 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005a26:	bf00      	nop
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT_STAT_Pin);
 8005a2e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005a32:	f7fb fc1d 	bl	8001270 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005a36:	bf00      	nop
 8005a38:	bd80      	pop	{r7, pc}
	...

08005a3c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005a40:	4802      	ldr	r0, [pc, #8]	; (8005a4c <TIM1_UP_IRQHandler+0x10>)
 8005a42:	f7fc fa6a 	bl	8001f1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8005a46:	bf00      	nop
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	20000f30 	.word	0x20000f30

08005a50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005a54:	4802      	ldr	r0, [pc, #8]	; (8005a60 <USART1_IRQHandler+0x10>)
 8005a56:	f7fd f9d5 	bl	8002e04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005a5a:	bf00      	nop
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	20001050 	.word	0x20001050

08005a64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005a64:	b480      	push	{r7}
 8005a66:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005a68:	4b15      	ldr	r3, [pc, #84]	; (8005ac0 <SystemInit+0x5c>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a14      	ldr	r2, [pc, #80]	; (8005ac0 <SystemInit+0x5c>)
 8005a6e:	f043 0301 	orr.w	r3, r3, #1
 8005a72:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005a74:	4b12      	ldr	r3, [pc, #72]	; (8005ac0 <SystemInit+0x5c>)
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	4911      	ldr	r1, [pc, #68]	; (8005ac0 <SystemInit+0x5c>)
 8005a7a:	4b12      	ldr	r3, [pc, #72]	; (8005ac4 <SystemInit+0x60>)
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005a80:	4b0f      	ldr	r3, [pc, #60]	; (8005ac0 <SystemInit+0x5c>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a0e      	ldr	r2, [pc, #56]	; (8005ac0 <SystemInit+0x5c>)
 8005a86:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a8e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005a90:	4b0b      	ldr	r3, [pc, #44]	; (8005ac0 <SystemInit+0x5c>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a0a      	ldr	r2, [pc, #40]	; (8005ac0 <SystemInit+0x5c>)
 8005a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a9a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005a9c:	4b08      	ldr	r3, [pc, #32]	; (8005ac0 <SystemInit+0x5c>)
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	4a07      	ldr	r2, [pc, #28]	; (8005ac0 <SystemInit+0x5c>)
 8005aa2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005aa6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005aa8:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <SystemInit+0x5c>)
 8005aaa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005aae:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005ab0:	4b05      	ldr	r3, [pc, #20]	; (8005ac8 <SystemInit+0x64>)
 8005ab2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ab6:	609a      	str	r2, [r3, #8]
#endif 
}
 8005ab8:	bf00      	nop
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bc80      	pop	{r7}
 8005abe:	4770      	bx	lr
 8005ac0:	40021000 	.word	0x40021000
 8005ac4:	f8ff0000 	.word	0xf8ff0000
 8005ac8:	e000ed00 	.word	0xe000ed00

08005acc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005acc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005ace:	e003      	b.n	8005ad8 <LoopCopyDataInit>

08005ad0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005ad0:	4b0b      	ldr	r3, [pc, #44]	; (8005b00 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005ad2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005ad4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005ad6:	3104      	adds	r1, #4

08005ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005ad8:	480a      	ldr	r0, [pc, #40]	; (8005b04 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005ada:	4b0b      	ldr	r3, [pc, #44]	; (8005b08 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005adc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005ade:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005ae0:	d3f6      	bcc.n	8005ad0 <CopyDataInit>
  ldr r2, =_sbss
 8005ae2:	4a0a      	ldr	r2, [pc, #40]	; (8005b0c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005ae4:	e002      	b.n	8005aec <LoopFillZerobss>

08005ae6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005ae6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005ae8:	f842 3b04 	str.w	r3, [r2], #4

08005aec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005aec:	4b08      	ldr	r3, [pc, #32]	; (8005b10 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005aee:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005af0:	d3f9      	bcc.n	8005ae6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005af2:	f7ff ffb7 	bl	8005a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005af6:	f000 f80f 	bl	8005b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005afa:	f7ff fadd 	bl	80050b8 <main>
  bx lr
 8005afe:	4770      	bx	lr
  ldr r3, =_sidata
 8005b00:	08005bb8 	.word	0x08005bb8
  ldr r0, =_sdata
 8005b04:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005b08:	20000ca0 	.word	0x20000ca0
  ldr r2, =_sbss
 8005b0c:	20000ca0 	.word	0x20000ca0
  ldr r3, = _ebss
 8005b10:	20001094 	.word	0x20001094

08005b14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005b14:	e7fe      	b.n	8005b14 <ADC1_2_IRQHandler>
	...

08005b18 <__libc_init_array>:
 8005b18:	b570      	push	{r4, r5, r6, lr}
 8005b1a:	2600      	movs	r6, #0
 8005b1c:	4d0c      	ldr	r5, [pc, #48]	; (8005b50 <__libc_init_array+0x38>)
 8005b1e:	4c0d      	ldr	r4, [pc, #52]	; (8005b54 <__libc_init_array+0x3c>)
 8005b20:	1b64      	subs	r4, r4, r5
 8005b22:	10a4      	asrs	r4, r4, #2
 8005b24:	42a6      	cmp	r6, r4
 8005b26:	d109      	bne.n	8005b3c <__libc_init_array+0x24>
 8005b28:	f000 f822 	bl	8005b70 <_init>
 8005b2c:	2600      	movs	r6, #0
 8005b2e:	4d0a      	ldr	r5, [pc, #40]	; (8005b58 <__libc_init_array+0x40>)
 8005b30:	4c0a      	ldr	r4, [pc, #40]	; (8005b5c <__libc_init_array+0x44>)
 8005b32:	1b64      	subs	r4, r4, r5
 8005b34:	10a4      	asrs	r4, r4, #2
 8005b36:	42a6      	cmp	r6, r4
 8005b38:	d105      	bne.n	8005b46 <__libc_init_array+0x2e>
 8005b3a:	bd70      	pop	{r4, r5, r6, pc}
 8005b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b40:	4798      	blx	r3
 8005b42:	3601      	adds	r6, #1
 8005b44:	e7ee      	b.n	8005b24 <__libc_init_array+0xc>
 8005b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b4a:	4798      	blx	r3
 8005b4c:	3601      	adds	r6, #1
 8005b4e:	e7f2      	b.n	8005b36 <__libc_init_array+0x1e>
 8005b50:	08005bb0 	.word	0x08005bb0
 8005b54:	08005bb0 	.word	0x08005bb0
 8005b58:	08005bb0 	.word	0x08005bb0
 8005b5c:	08005bb4 	.word	0x08005bb4

08005b60 <memset>:
 8005b60:	4603      	mov	r3, r0
 8005b62:	4402      	add	r2, r0
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d100      	bne.n	8005b6a <memset+0xa>
 8005b68:	4770      	bx	lr
 8005b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b6e:	e7f9      	b.n	8005b64 <memset+0x4>

08005b70 <_init>:
 8005b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b72:	bf00      	nop
 8005b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b76:	bc08      	pop	{r3}
 8005b78:	469e      	mov	lr, r3
 8005b7a:	4770      	bx	lr

08005b7c <_fini>:
 8005b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7e:	bf00      	nop
 8005b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b82:	bc08      	pop	{r3}
 8005b84:	469e      	mov	lr, r3
 8005b86:	4770      	bx	lr
