
Quadruped.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006900  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a80  08006a0c  08006a0c  00016a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800748c  0800748c  0002086c  2**0
                  CONTENTS
  4 .ARM          00000000  0800748c  0800748c  0002086c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800748c  0800748c  0002086c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800748c  0800748c  0001748c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007494  08007494  00017494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000086c  20000000  08007498  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  20000870  08007d04  00020870  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000c40  08007d04  00020c40  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002086c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f12e  00000000  00000000  00020895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003229  00000000  00000000  0002f9c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  00032bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e98  00000000  00000000  00033c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f4b  00000000  00000000  00034a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a94  00000000  00000000  0004d9e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c618  00000000  00000000  00061477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eda8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004570  00000000  00000000  000edae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000870 	.word	0x20000870
 8000128:	00000000 	.word	0x00000000
 800012c:	080069f4 	.word	0x080069f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000874 	.word	0x20000874
 8000148:	080069f4 	.word	0x080069f4

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__gedf2>:
 80004c4:	f04f 3cff 	mov.w	ip, #4294967295
 80004c8:	e006      	b.n	80004d8 <__cmpdf2+0x4>
 80004ca:	bf00      	nop

080004cc <__ledf2>:
 80004cc:	f04f 0c01 	mov.w	ip, #1
 80004d0:	e002      	b.n	80004d8 <__cmpdf2+0x4>
 80004d2:	bf00      	nop

080004d4 <__cmpdf2>:
 80004d4:	f04f 0c01 	mov.w	ip, #1
 80004d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004e8:	bf18      	it	ne
 80004ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004ee:	d01b      	beq.n	8000528 <__cmpdf2+0x54>
 80004f0:	b001      	add	sp, #4
 80004f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004f6:	bf0c      	ite	eq
 80004f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80004fc:	ea91 0f03 	teqne	r1, r3
 8000500:	bf02      	ittt	eq
 8000502:	ea90 0f02 	teqeq	r0, r2
 8000506:	2000      	moveq	r0, #0
 8000508:	4770      	bxeq	lr
 800050a:	f110 0f00 	cmn.w	r0, #0
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf58      	it	pl
 8000514:	4299      	cmppl	r1, r3
 8000516:	bf08      	it	eq
 8000518:	4290      	cmpeq	r0, r2
 800051a:	bf2c      	ite	cs
 800051c:	17d8      	asrcs	r0, r3, #31
 800051e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000522:	f040 0001 	orr.w	r0, r0, #1
 8000526:	4770      	bx	lr
 8000528:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800052c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000530:	d102      	bne.n	8000538 <__cmpdf2+0x64>
 8000532:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000536:	d107      	bne.n	8000548 <__cmpdf2+0x74>
 8000538:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800053c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000540:	d1d6      	bne.n	80004f0 <__cmpdf2+0x1c>
 8000542:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000546:	d0d3      	beq.n	80004f0 <__cmpdf2+0x1c>
 8000548:	f85d 0b04 	ldr.w	r0, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <__aeabi_cdrcmple>:
 8000550:	4684      	mov	ip, r0
 8000552:	4610      	mov	r0, r2
 8000554:	4662      	mov	r2, ip
 8000556:	468c      	mov	ip, r1
 8000558:	4619      	mov	r1, r3
 800055a:	4663      	mov	r3, ip
 800055c:	e000      	b.n	8000560 <__aeabi_cdcmpeq>
 800055e:	bf00      	nop

08000560 <__aeabi_cdcmpeq>:
 8000560:	b501      	push	{r0, lr}
 8000562:	f7ff ffb7 	bl	80004d4 <__cmpdf2>
 8000566:	2800      	cmp	r0, #0
 8000568:	bf48      	it	mi
 800056a:	f110 0f00 	cmnmi.w	r0, #0
 800056e:	bd01      	pop	{r0, pc}

08000570 <__aeabi_dcmpeq>:
 8000570:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000574:	f7ff fff4 	bl	8000560 <__aeabi_cdcmpeq>
 8000578:	bf0c      	ite	eq
 800057a:	2001      	moveq	r0, #1
 800057c:	2000      	movne	r0, #0
 800057e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000582:	bf00      	nop

08000584 <__aeabi_dcmplt>:
 8000584:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000588:	f7ff ffea 	bl	8000560 <__aeabi_cdcmpeq>
 800058c:	bf34      	ite	cc
 800058e:	2001      	movcc	r0, #1
 8000590:	2000      	movcs	r0, #0
 8000592:	f85d fb08 	ldr.w	pc, [sp], #8
 8000596:	bf00      	nop

08000598 <__aeabi_dcmple>:
 8000598:	f84d ed08 	str.w	lr, [sp, #-8]!
 800059c:	f7ff ffe0 	bl	8000560 <__aeabi_cdcmpeq>
 80005a0:	bf94      	ite	ls
 80005a2:	2001      	movls	r0, #1
 80005a4:	2000      	movhi	r0, #0
 80005a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005aa:	bf00      	nop

080005ac <__aeabi_dcmpge>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff ffce 	bl	8000550 <__aeabi_cdrcmple>
 80005b4:	bf94      	ite	ls
 80005b6:	2001      	movls	r0, #1
 80005b8:	2000      	movhi	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmpgt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffc4 	bl	8000550 <__aeabi_cdrcmple>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_frsub>:
 80005d4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80005d8:	e002      	b.n	80005e0 <__addsf3>
 80005da:	bf00      	nop

080005dc <__aeabi_fsub>:
 80005dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080005e0 <__addsf3>:
 80005e0:	0042      	lsls	r2, r0, #1
 80005e2:	bf1f      	itttt	ne
 80005e4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80005e8:	ea92 0f03 	teqne	r2, r3
 80005ec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80005f0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005f4:	d06a      	beq.n	80006cc <__addsf3+0xec>
 80005f6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80005fa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80005fe:	bfc1      	itttt	gt
 8000600:	18d2      	addgt	r2, r2, r3
 8000602:	4041      	eorgt	r1, r0
 8000604:	4048      	eorgt	r0, r1
 8000606:	4041      	eorgt	r1, r0
 8000608:	bfb8      	it	lt
 800060a:	425b      	neglt	r3, r3
 800060c:	2b19      	cmp	r3, #25
 800060e:	bf88      	it	hi
 8000610:	4770      	bxhi	lr
 8000612:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000616:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800061a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800061e:	bf18      	it	ne
 8000620:	4240      	negne	r0, r0
 8000622:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000626:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800062a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800062e:	bf18      	it	ne
 8000630:	4249      	negne	r1, r1
 8000632:	ea92 0f03 	teq	r2, r3
 8000636:	d03f      	beq.n	80006b8 <__addsf3+0xd8>
 8000638:	f1a2 0201 	sub.w	r2, r2, #1
 800063c:	fa41 fc03 	asr.w	ip, r1, r3
 8000640:	eb10 000c 	adds.w	r0, r0, ip
 8000644:	f1c3 0320 	rsb	r3, r3, #32
 8000648:	fa01 f103 	lsl.w	r1, r1, r3
 800064c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000650:	d502      	bpl.n	8000658 <__addsf3+0x78>
 8000652:	4249      	negs	r1, r1
 8000654:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000658:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800065c:	d313      	bcc.n	8000686 <__addsf3+0xa6>
 800065e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000662:	d306      	bcc.n	8000672 <__addsf3+0x92>
 8000664:	0840      	lsrs	r0, r0, #1
 8000666:	ea4f 0131 	mov.w	r1, r1, rrx
 800066a:	f102 0201 	add.w	r2, r2, #1
 800066e:	2afe      	cmp	r2, #254	; 0xfe
 8000670:	d251      	bcs.n	8000716 <__addsf3+0x136>
 8000672:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000676:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800067a:	bf08      	it	eq
 800067c:	f020 0001 	biceq.w	r0, r0, #1
 8000680:	ea40 0003 	orr.w	r0, r0, r3
 8000684:	4770      	bx	lr
 8000686:	0049      	lsls	r1, r1, #1
 8000688:	eb40 0000 	adc.w	r0, r0, r0
 800068c:	3a01      	subs	r2, #1
 800068e:	bf28      	it	cs
 8000690:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000694:	d2ed      	bcs.n	8000672 <__addsf3+0x92>
 8000696:	fab0 fc80 	clz	ip, r0
 800069a:	f1ac 0c08 	sub.w	ip, ip, #8
 800069e:	ebb2 020c 	subs.w	r2, r2, ip
 80006a2:	fa00 f00c 	lsl.w	r0, r0, ip
 80006a6:	bfaa      	itet	ge
 80006a8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006ac:	4252      	neglt	r2, r2
 80006ae:	4318      	orrge	r0, r3
 80006b0:	bfbc      	itt	lt
 80006b2:	40d0      	lsrlt	r0, r2
 80006b4:	4318      	orrlt	r0, r3
 80006b6:	4770      	bx	lr
 80006b8:	f092 0f00 	teq	r2, #0
 80006bc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80006c0:	bf06      	itte	eq
 80006c2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80006c6:	3201      	addeq	r2, #1
 80006c8:	3b01      	subne	r3, #1
 80006ca:	e7b5      	b.n	8000638 <__addsf3+0x58>
 80006cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006d4:	bf18      	it	ne
 80006d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006da:	d021      	beq.n	8000720 <__addsf3+0x140>
 80006dc:	ea92 0f03 	teq	r2, r3
 80006e0:	d004      	beq.n	80006ec <__addsf3+0x10c>
 80006e2:	f092 0f00 	teq	r2, #0
 80006e6:	bf08      	it	eq
 80006e8:	4608      	moveq	r0, r1
 80006ea:	4770      	bx	lr
 80006ec:	ea90 0f01 	teq	r0, r1
 80006f0:	bf1c      	itt	ne
 80006f2:	2000      	movne	r0, #0
 80006f4:	4770      	bxne	lr
 80006f6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80006fa:	d104      	bne.n	8000706 <__addsf3+0x126>
 80006fc:	0040      	lsls	r0, r0, #1
 80006fe:	bf28      	it	cs
 8000700:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000704:	4770      	bx	lr
 8000706:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800070a:	bf3c      	itt	cc
 800070c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000710:	4770      	bxcc	lr
 8000712:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000716:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800071a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800071e:	4770      	bx	lr
 8000720:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000724:	bf16      	itet	ne
 8000726:	4608      	movne	r0, r1
 8000728:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800072c:	4601      	movne	r1, r0
 800072e:	0242      	lsls	r2, r0, #9
 8000730:	bf06      	itte	eq
 8000732:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000736:	ea90 0f01 	teqeq	r0, r1
 800073a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800073e:	4770      	bx	lr

08000740 <__aeabi_ui2f>:
 8000740:	f04f 0300 	mov.w	r3, #0
 8000744:	e004      	b.n	8000750 <__aeabi_i2f+0x8>
 8000746:	bf00      	nop

08000748 <__aeabi_i2f>:
 8000748:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800074c:	bf48      	it	mi
 800074e:	4240      	negmi	r0, r0
 8000750:	ea5f 0c00 	movs.w	ip, r0
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800075c:	4601      	mov	r1, r0
 800075e:	f04f 0000 	mov.w	r0, #0
 8000762:	e01c      	b.n	800079e <__aeabi_l2f+0x2a>

08000764 <__aeabi_ul2f>:
 8000764:	ea50 0201 	orrs.w	r2, r0, r1
 8000768:	bf08      	it	eq
 800076a:	4770      	bxeq	lr
 800076c:	f04f 0300 	mov.w	r3, #0
 8000770:	e00a      	b.n	8000788 <__aeabi_l2f+0x14>
 8000772:	bf00      	nop

08000774 <__aeabi_l2f>:
 8000774:	ea50 0201 	orrs.w	r2, r0, r1
 8000778:	bf08      	it	eq
 800077a:	4770      	bxeq	lr
 800077c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000780:	d502      	bpl.n	8000788 <__aeabi_l2f+0x14>
 8000782:	4240      	negs	r0, r0
 8000784:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000788:	ea5f 0c01 	movs.w	ip, r1
 800078c:	bf02      	ittt	eq
 800078e:	4684      	moveq	ip, r0
 8000790:	4601      	moveq	r1, r0
 8000792:	2000      	moveq	r0, #0
 8000794:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000798:	bf08      	it	eq
 800079a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800079e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007a2:	fabc f28c 	clz	r2, ip
 80007a6:	3a08      	subs	r2, #8
 80007a8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007ac:	db10      	blt.n	80007d0 <__aeabi_l2f+0x5c>
 80007ae:	fa01 fc02 	lsl.w	ip, r1, r2
 80007b2:	4463      	add	r3, ip
 80007b4:	fa00 fc02 	lsl.w	ip, r0, r2
 80007b8:	f1c2 0220 	rsb	r2, r2, #32
 80007bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80007c0:	fa20 f202 	lsr.w	r2, r0, r2
 80007c4:	eb43 0002 	adc.w	r0, r3, r2
 80007c8:	bf08      	it	eq
 80007ca:	f020 0001 	biceq.w	r0, r0, #1
 80007ce:	4770      	bx	lr
 80007d0:	f102 0220 	add.w	r2, r2, #32
 80007d4:	fa01 fc02 	lsl.w	ip, r1, r2
 80007d8:	f1c2 0220 	rsb	r2, r2, #32
 80007dc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80007e0:	fa21 f202 	lsr.w	r2, r1, r2
 80007e4:	eb43 0002 	adc.w	r0, r3, r2
 80007e8:	bf08      	it	eq
 80007ea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007ee:	4770      	bx	lr

080007f0 <__aeabi_fmul>:
 80007f0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80007f8:	bf1e      	ittt	ne
 80007fa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80007fe:	ea92 0f0c 	teqne	r2, ip
 8000802:	ea93 0f0c 	teqne	r3, ip
 8000806:	d06f      	beq.n	80008e8 <__aeabi_fmul+0xf8>
 8000808:	441a      	add	r2, r3
 800080a:	ea80 0c01 	eor.w	ip, r0, r1
 800080e:	0240      	lsls	r0, r0, #9
 8000810:	bf18      	it	ne
 8000812:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000816:	d01e      	beq.n	8000856 <__aeabi_fmul+0x66>
 8000818:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800081c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000820:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000824:	fba0 3101 	umull	r3, r1, r0, r1
 8000828:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800082c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000830:	bf3e      	ittt	cc
 8000832:	0049      	lslcc	r1, r1, #1
 8000834:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000838:	005b      	lslcc	r3, r3, #1
 800083a:	ea40 0001 	orr.w	r0, r0, r1
 800083e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000842:	2afd      	cmp	r2, #253	; 0xfd
 8000844:	d81d      	bhi.n	8000882 <__aeabi_fmul+0x92>
 8000846:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800084a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800084e:	bf08      	it	eq
 8000850:	f020 0001 	biceq.w	r0, r0, #1
 8000854:	4770      	bx	lr
 8000856:	f090 0f00 	teq	r0, #0
 800085a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800085e:	bf08      	it	eq
 8000860:	0249      	lsleq	r1, r1, #9
 8000862:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000866:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800086a:	3a7f      	subs	r2, #127	; 0x7f
 800086c:	bfc2      	ittt	gt
 800086e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000872:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000876:	4770      	bxgt	lr
 8000878:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800087c:	f04f 0300 	mov.w	r3, #0
 8000880:	3a01      	subs	r2, #1
 8000882:	dc5d      	bgt.n	8000940 <__aeabi_fmul+0x150>
 8000884:	f112 0f19 	cmn.w	r2, #25
 8000888:	bfdc      	itt	le
 800088a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800088e:	4770      	bxle	lr
 8000890:	f1c2 0200 	rsb	r2, r2, #0
 8000894:	0041      	lsls	r1, r0, #1
 8000896:	fa21 f102 	lsr.w	r1, r1, r2
 800089a:	f1c2 0220 	rsb	r2, r2, #32
 800089e:	fa00 fc02 	lsl.w	ip, r0, r2
 80008a2:	ea5f 0031 	movs.w	r0, r1, rrx
 80008a6:	f140 0000 	adc.w	r0, r0, #0
 80008aa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80008ae:	bf08      	it	eq
 80008b0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008b4:	4770      	bx	lr
 80008b6:	f092 0f00 	teq	r2, #0
 80008ba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80008be:	bf02      	ittt	eq
 80008c0:	0040      	lsleq	r0, r0, #1
 80008c2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80008c6:	3a01      	subeq	r2, #1
 80008c8:	d0f9      	beq.n	80008be <__aeabi_fmul+0xce>
 80008ca:	ea40 000c 	orr.w	r0, r0, ip
 80008ce:	f093 0f00 	teq	r3, #0
 80008d2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008d6:	bf02      	ittt	eq
 80008d8:	0049      	lsleq	r1, r1, #1
 80008da:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80008de:	3b01      	subeq	r3, #1
 80008e0:	d0f9      	beq.n	80008d6 <__aeabi_fmul+0xe6>
 80008e2:	ea41 010c 	orr.w	r1, r1, ip
 80008e6:	e78f      	b.n	8000808 <__aeabi_fmul+0x18>
 80008e8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80008ec:	ea92 0f0c 	teq	r2, ip
 80008f0:	bf18      	it	ne
 80008f2:	ea93 0f0c 	teqne	r3, ip
 80008f6:	d00a      	beq.n	800090e <__aeabi_fmul+0x11e>
 80008f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80008fc:	bf18      	it	ne
 80008fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000902:	d1d8      	bne.n	80008b6 <__aeabi_fmul+0xc6>
 8000904:	ea80 0001 	eor.w	r0, r0, r1
 8000908:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800090c:	4770      	bx	lr
 800090e:	f090 0f00 	teq	r0, #0
 8000912:	bf17      	itett	ne
 8000914:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000918:	4608      	moveq	r0, r1
 800091a:	f091 0f00 	teqne	r1, #0
 800091e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000922:	d014      	beq.n	800094e <__aeabi_fmul+0x15e>
 8000924:	ea92 0f0c 	teq	r2, ip
 8000928:	d101      	bne.n	800092e <__aeabi_fmul+0x13e>
 800092a:	0242      	lsls	r2, r0, #9
 800092c:	d10f      	bne.n	800094e <__aeabi_fmul+0x15e>
 800092e:	ea93 0f0c 	teq	r3, ip
 8000932:	d103      	bne.n	800093c <__aeabi_fmul+0x14c>
 8000934:	024b      	lsls	r3, r1, #9
 8000936:	bf18      	it	ne
 8000938:	4608      	movne	r0, r1
 800093a:	d108      	bne.n	800094e <__aeabi_fmul+0x15e>
 800093c:	ea80 0001 	eor.w	r0, r0, r1
 8000940:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000944:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000948:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800094c:	4770      	bx	lr
 800094e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000952:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000956:	4770      	bx	lr

08000958 <__aeabi_fdiv>:
 8000958:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800095c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000960:	bf1e      	ittt	ne
 8000962:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000966:	ea92 0f0c 	teqne	r2, ip
 800096a:	ea93 0f0c 	teqne	r3, ip
 800096e:	d069      	beq.n	8000a44 <__aeabi_fdiv+0xec>
 8000970:	eba2 0203 	sub.w	r2, r2, r3
 8000974:	ea80 0c01 	eor.w	ip, r0, r1
 8000978:	0249      	lsls	r1, r1, #9
 800097a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800097e:	d037      	beq.n	80009f0 <__aeabi_fdiv+0x98>
 8000980:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000984:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000988:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800098c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000990:	428b      	cmp	r3, r1
 8000992:	bf38      	it	cc
 8000994:	005b      	lslcc	r3, r3, #1
 8000996:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800099a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800099e:	428b      	cmp	r3, r1
 80009a0:	bf24      	itt	cs
 80009a2:	1a5b      	subcs	r3, r3, r1
 80009a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80009a8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80009ac:	bf24      	itt	cs
 80009ae:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80009b2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80009ba:	bf24      	itt	cs
 80009bc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80009c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80009c8:	bf24      	itt	cs
 80009ca:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80009ce:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d2:	011b      	lsls	r3, r3, #4
 80009d4:	bf18      	it	ne
 80009d6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80009da:	d1e0      	bne.n	800099e <__aeabi_fdiv+0x46>
 80009dc:	2afd      	cmp	r2, #253	; 0xfd
 80009de:	f63f af50 	bhi.w	8000882 <__aeabi_fmul+0x92>
 80009e2:	428b      	cmp	r3, r1
 80009e4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009e8:	bf08      	it	eq
 80009ea:	f020 0001 	biceq.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80009f4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009f8:	327f      	adds	r2, #127	; 0x7f
 80009fa:	bfc2      	ittt	gt
 80009fc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a00:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a04:	4770      	bxgt	lr
 8000a06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a0a:	f04f 0300 	mov.w	r3, #0
 8000a0e:	3a01      	subs	r2, #1
 8000a10:	e737      	b.n	8000882 <__aeabi_fmul+0x92>
 8000a12:	f092 0f00 	teq	r2, #0
 8000a16:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a1a:	bf02      	ittt	eq
 8000a1c:	0040      	lsleq	r0, r0, #1
 8000a1e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a22:	3a01      	subeq	r2, #1
 8000a24:	d0f9      	beq.n	8000a1a <__aeabi_fdiv+0xc2>
 8000a26:	ea40 000c 	orr.w	r0, r0, ip
 8000a2a:	f093 0f00 	teq	r3, #0
 8000a2e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a32:	bf02      	ittt	eq
 8000a34:	0049      	lsleq	r1, r1, #1
 8000a36:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a3a:	3b01      	subeq	r3, #1
 8000a3c:	d0f9      	beq.n	8000a32 <__aeabi_fdiv+0xda>
 8000a3e:	ea41 010c 	orr.w	r1, r1, ip
 8000a42:	e795      	b.n	8000970 <__aeabi_fdiv+0x18>
 8000a44:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a48:	ea92 0f0c 	teq	r2, ip
 8000a4c:	d108      	bne.n	8000a60 <__aeabi_fdiv+0x108>
 8000a4e:	0242      	lsls	r2, r0, #9
 8000a50:	f47f af7d 	bne.w	800094e <__aeabi_fmul+0x15e>
 8000a54:	ea93 0f0c 	teq	r3, ip
 8000a58:	f47f af70 	bne.w	800093c <__aeabi_fmul+0x14c>
 8000a5c:	4608      	mov	r0, r1
 8000a5e:	e776      	b.n	800094e <__aeabi_fmul+0x15e>
 8000a60:	ea93 0f0c 	teq	r3, ip
 8000a64:	d104      	bne.n	8000a70 <__aeabi_fdiv+0x118>
 8000a66:	024b      	lsls	r3, r1, #9
 8000a68:	f43f af4c 	beq.w	8000904 <__aeabi_fmul+0x114>
 8000a6c:	4608      	mov	r0, r1
 8000a6e:	e76e      	b.n	800094e <__aeabi_fmul+0x15e>
 8000a70:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a74:	bf18      	it	ne
 8000a76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a7a:	d1ca      	bne.n	8000a12 <__aeabi_fdiv+0xba>
 8000a7c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a80:	f47f af5c 	bne.w	800093c <__aeabi_fmul+0x14c>
 8000a84:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a88:	f47f af3c 	bne.w	8000904 <__aeabi_fmul+0x114>
 8000a8c:	e75f      	b.n	800094e <__aeabi_fmul+0x15e>
 8000a8e:	bf00      	nop

08000a90 <__gesf2>:
 8000a90:	f04f 3cff 	mov.w	ip, #4294967295
 8000a94:	e006      	b.n	8000aa4 <__cmpsf2+0x4>
 8000a96:	bf00      	nop

08000a98 <__lesf2>:
 8000a98:	f04f 0c01 	mov.w	ip, #1
 8000a9c:	e002      	b.n	8000aa4 <__cmpsf2+0x4>
 8000a9e:	bf00      	nop

08000aa0 <__cmpsf2>:
 8000aa0:	f04f 0c01 	mov.w	ip, #1
 8000aa4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000aac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ab0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ab4:	bf18      	it	ne
 8000ab6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aba:	d011      	beq.n	8000ae0 <__cmpsf2+0x40>
 8000abc:	b001      	add	sp, #4
 8000abe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ac2:	bf18      	it	ne
 8000ac4:	ea90 0f01 	teqne	r0, r1
 8000ac8:	bf58      	it	pl
 8000aca:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ace:	bf88      	it	hi
 8000ad0:	17c8      	asrhi	r0, r1, #31
 8000ad2:	bf38      	it	cc
 8000ad4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ad8:	bf18      	it	ne
 8000ada:	f040 0001 	orrne.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ae4:	d102      	bne.n	8000aec <__cmpsf2+0x4c>
 8000ae6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000aea:	d105      	bne.n	8000af8 <__cmpsf2+0x58>
 8000aec:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000af0:	d1e4      	bne.n	8000abc <__cmpsf2+0x1c>
 8000af2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000af6:	d0e1      	beq.n	8000abc <__cmpsf2+0x1c>
 8000af8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_cfrcmple>:
 8000b00:	4684      	mov	ip, r0
 8000b02:	4608      	mov	r0, r1
 8000b04:	4661      	mov	r1, ip
 8000b06:	e7ff      	b.n	8000b08 <__aeabi_cfcmpeq>

08000b08 <__aeabi_cfcmpeq>:
 8000b08:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b0a:	f7ff ffc9 	bl	8000aa0 <__cmpsf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b18 <__aeabi_fcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cfcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cfcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_fcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cfcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_fcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffd2 	bl	8000b00 <__aeabi_cfrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_fcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc8 	bl	8000b00 <__aeabi_cfrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_f2uiz>:
 8000b7c:	0042      	lsls	r2, r0, #1
 8000b7e:	d20e      	bcs.n	8000b9e <__aeabi_f2uiz+0x22>
 8000b80:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b84:	d30b      	bcc.n	8000b9e <__aeabi_f2uiz+0x22>
 8000b86:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b8a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b8e:	d409      	bmi.n	8000ba4 <__aeabi_f2uiz+0x28>
 8000b90:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b98:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9c:	4770      	bx	lr
 8000b9e:	f04f 0000 	mov.w	r0, #0
 8000ba2:	4770      	bx	lr
 8000ba4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ba8:	d101      	bne.n	8000bae <__aeabi_f2uiz+0x32>
 8000baa:	0242      	lsls	r2, r0, #9
 8000bac:	d102      	bne.n	8000bb4 <__aeabi_f2uiz+0x38>
 8000bae:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <HAL_Init+0x28>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <HAL_Init+0x28>)
 8000bc6:	f043 0310 	orr.w	r3, r3, #16
 8000bca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f000 f947 	bl	8000e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd2:	200f      	movs	r0, #15
 8000bd4:	f000 f808 	bl	8000be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd8:	f005 f87a 	bl	8005cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40022000 	.word	0x40022000

08000be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <HAL_InitTick+0x54>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_InitTick+0x58>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 f95f 	bl	8000eca <HAL_SYSTICK_Config>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e00e      	b.n	8000c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b0f      	cmp	r3, #15
 8000c1a:	d80a      	bhi.n	8000c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295
 8000c24:	f000 f927 	bl	8000e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c28:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <HAL_InitTick+0x5c>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e000      	b.n	8000c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000028 	.word	0x20000028
 8000c40:	20000004 	.word	0x20000004
 8000c44:	20000000 	.word	0x20000000

08000c48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <HAL_IncTick+0x1c>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_IncTick+0x20>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4413      	add	r3, r2
 8000c58:	4a03      	ldr	r2, [pc, #12]	; (8000c68 <HAL_IncTick+0x20>)
 8000c5a:	6013      	str	r3, [r2, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	20000004 	.word	0x20000004
 8000c68:	2000088c 	.word	0x2000088c

08000c6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b02      	ldr	r3, [pc, #8]	; (8000c7c <HAL_GetTick+0x10>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr
 8000c7c:	2000088c 	.word	0x2000088c

08000c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c88:	f7ff fff0 	bl	8000c6c <HAL_GetTick>
 8000c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c98:	d005      	beq.n	8000ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <HAL_Delay+0x44>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ca6:	bf00      	nop
 8000ca8:	f7ff ffe0 	bl	8000c6c <HAL_GetTick>
 8000cac:	4602      	mov	r2, r0
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d8f7      	bhi.n	8000ca8 <HAL_Delay+0x28>
  {
  }
}
 8000cb8:	bf00      	nop
 8000cba:	bf00      	nop
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000004 	.word	0x20000004

08000cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__NVIC_SetPriorityGrouping+0x44>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cfa:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	60d3      	str	r3, [r2, #12]
}
 8000d00:	bf00      	nop
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d14:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <__NVIC_GetPriorityGrouping+0x18>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	0a1b      	lsrs	r3, r3, #8
 8000d1a:	f003 0307 	and.w	r3, r3, #7
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	db0b      	blt.n	8000d56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	f003 021f 	and.w	r2, r3, #31
 8000d44:	4906      	ldr	r1, [pc, #24]	; (8000d60 <__NVIC_EnableIRQ+0x34>)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	095b      	lsrs	r3, r3, #5
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr
 8000d60:	e000e100 	.word	0xe000e100

08000d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	6039      	str	r1, [r7, #0]
 8000d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	db0a      	blt.n	8000d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	490c      	ldr	r1, [pc, #48]	; (8000db0 <__NVIC_SetPriority+0x4c>)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	0112      	lsls	r2, r2, #4
 8000d84:	b2d2      	uxtb	r2, r2
 8000d86:	440b      	add	r3, r1
 8000d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d8c:	e00a      	b.n	8000da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4908      	ldr	r1, [pc, #32]	; (8000db4 <__NVIC_SetPriority+0x50>)
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	f003 030f 	and.w	r3, r3, #15
 8000d9a:	3b04      	subs	r3, #4
 8000d9c:	0112      	lsls	r2, r2, #4
 8000d9e:	b2d2      	uxtb	r2, r2
 8000da0:	440b      	add	r3, r1
 8000da2:	761a      	strb	r2, [r3, #24]
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000e100 	.word	0xe000e100
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b089      	sub	sp, #36	; 0x24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	f1c3 0307 	rsb	r3, r3, #7
 8000dd2:	2b04      	cmp	r3, #4
 8000dd4:	bf28      	it	cs
 8000dd6:	2304      	movcs	r3, #4
 8000dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3304      	adds	r3, #4
 8000dde:	2b06      	cmp	r3, #6
 8000de0:	d902      	bls.n	8000de8 <NVIC_EncodePriority+0x30>
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3b03      	subs	r3, #3
 8000de6:	e000      	b.n	8000dea <NVIC_EncodePriority+0x32>
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	f04f 32ff 	mov.w	r2, #4294967295
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43da      	mvns	r2, r3
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	401a      	ands	r2, r3
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e00:	f04f 31ff 	mov.w	r1, #4294967295
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0a:	43d9      	mvns	r1, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	4313      	orrs	r3, r2
         );
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3724      	adds	r7, #36	; 0x24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e2c:	d301      	bcc.n	8000e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00f      	b.n	8000e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <SysTick_Config+0x40>)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e3a:	210f      	movs	r1, #15
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e40:	f7ff ff90 	bl	8000d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <SysTick_Config+0x40>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4a:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <SysTick_Config+0x40>)
 8000e4c:	2207      	movs	r2, #7
 8000e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	e000e010 	.word	0xe000e010

08000e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff ff2d 	bl	8000cc8 <__NVIC_SetPriorityGrouping>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b086      	sub	sp, #24
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
 8000e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e88:	f7ff ff42 	bl	8000d10 <__NVIC_GetPriorityGrouping>
 8000e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	68b9      	ldr	r1, [r7, #8]
 8000e92:	6978      	ldr	r0, [r7, #20]
 8000e94:	f7ff ff90 	bl	8000db8 <NVIC_EncodePriority>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff5f 	bl	8000d64 <__NVIC_SetPriority>
}
 8000ea6:	bf00      	nop
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff35 	bl	8000d2c <__NVIC_EnableIRQ>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ffa2 	bl	8000e1c <SysTick_Config>
 8000ed8:	4603      	mov	r3, r0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d101      	bne.n	8000ef4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e00e      	b.n	8000f12 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	795b      	ldrb	r3, [r3, #5]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d105      	bne.n	8000f0a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f004 ff15 	bl	8005d34 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e043      	b.n	8000fba <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	4b22      	ldr	r3, [pc, #136]	; (8000fc4 <HAL_DMA_Init+0xa8>)
 8000f3a:	4413      	add	r3, r2
 8000f3c:	4a22      	ldr	r2, [pc, #136]	; (8000fc8 <HAL_DMA_Init+0xac>)
 8000f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f42:	091b      	lsrs	r3, r3, #4
 8000f44:	009a      	lsls	r2, r3, #2
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a1f      	ldr	r2, [pc, #124]	; (8000fcc <HAL_DMA_Init+0xb0>)
 8000f4e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2202      	movs	r2, #2
 8000f54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000f66:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000f74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f94:	68fa      	ldr	r2, [r7, #12]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2201      	movs	r2, #1
 8000fac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	bffdfff8 	.word	0xbffdfff8
 8000fc8:	cccccccd 	.word	0xcccccccd
 8000fcc:	40020000 	.word	0x40020000

08000fd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d101      	bne.n	8000ff0 <HAL_DMA_Start_IT+0x20>
 8000fec:	2302      	movs	r3, #2
 8000fee:	e04a      	b.n	8001086 <HAL_DMA_Start_IT+0xb6>
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d13a      	bne.n	8001078 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2202      	movs	r2, #2
 8001006:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2200      	movs	r2, #0
 800100e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f022 0201 	bic.w	r2, r2, #1
 800101e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	68b9      	ldr	r1, [r7, #8]
 8001026:	68f8      	ldr	r0, [r7, #12]
 8001028:	f000 f9f3 	bl	8001412 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001030:	2b00      	cmp	r3, #0
 8001032:	d008      	beq.n	8001046 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f042 020e 	orr.w	r2, r2, #14
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	e00f      	b.n	8001066 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f022 0204 	bic.w	r2, r2, #4
 8001054:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f042 020a 	orr.w	r2, r2, #10
 8001064:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f042 0201 	orr.w	r2, r2, #1
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	e005      	b.n	8001084 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001080:	2302      	movs	r3, #2
 8001082:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001084:	7dfb      	ldrb	r3, [r7, #23]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800108e:	b480      	push	{r7}
 8001090:	b085      	sub	sp, #20
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d008      	beq.n	80010b6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2204      	movs	r2, #4
 80010a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e020      	b.n	80010f8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f022 020e 	bic.w	r2, r2, #14
 80010c4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 0201 	bic.w	r2, r2, #1
 80010d4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010de:	2101      	movs	r1, #1
 80010e0:	fa01 f202 	lsl.w	r2, r1, r2
 80010e4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2201      	movs	r2, #1
 80010ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
	...

08001104 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001116:	2b02      	cmp	r3, #2
 8001118:	d005      	beq.n	8001126 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2204      	movs	r2, #4
 800111e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	73fb      	strb	r3, [r7, #15]
 8001124:	e051      	b.n	80011ca <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f022 020e 	bic.w	r2, r2, #14
 8001134:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 0201 	bic.w	r2, r2, #1
 8001144:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a22      	ldr	r2, [pc, #136]	; (80011d4 <HAL_DMA_Abort_IT+0xd0>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d029      	beq.n	80011a4 <HAL_DMA_Abort_IT+0xa0>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a20      	ldr	r2, [pc, #128]	; (80011d8 <HAL_DMA_Abort_IT+0xd4>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d022      	beq.n	80011a0 <HAL_DMA_Abort_IT+0x9c>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a1f      	ldr	r2, [pc, #124]	; (80011dc <HAL_DMA_Abort_IT+0xd8>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d01a      	beq.n	800119a <HAL_DMA_Abort_IT+0x96>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a1d      	ldr	r2, [pc, #116]	; (80011e0 <HAL_DMA_Abort_IT+0xdc>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d012      	beq.n	8001194 <HAL_DMA_Abort_IT+0x90>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a1c      	ldr	r2, [pc, #112]	; (80011e4 <HAL_DMA_Abort_IT+0xe0>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d00a      	beq.n	800118e <HAL_DMA_Abort_IT+0x8a>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a1a      	ldr	r2, [pc, #104]	; (80011e8 <HAL_DMA_Abort_IT+0xe4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d102      	bne.n	8001188 <HAL_DMA_Abort_IT+0x84>
 8001182:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001186:	e00e      	b.n	80011a6 <HAL_DMA_Abort_IT+0xa2>
 8001188:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800118c:	e00b      	b.n	80011a6 <HAL_DMA_Abort_IT+0xa2>
 800118e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001192:	e008      	b.n	80011a6 <HAL_DMA_Abort_IT+0xa2>
 8001194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001198:	e005      	b.n	80011a6 <HAL_DMA_Abort_IT+0xa2>
 800119a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800119e:	e002      	b.n	80011a6 <HAL_DMA_Abort_IT+0xa2>
 80011a0:	2310      	movs	r3, #16
 80011a2:	e000      	b.n	80011a6 <HAL_DMA_Abort_IT+0xa2>
 80011a4:	2301      	movs	r3, #1
 80011a6:	4a11      	ldr	r2, [pc, #68]	; (80011ec <HAL_DMA_Abort_IT+0xe8>)
 80011a8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2201      	movs	r2, #1
 80011ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	4798      	blx	r3
    } 
  }
  return status;
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40020008 	.word	0x40020008
 80011d8:	4002001c 	.word	0x4002001c
 80011dc:	40020030 	.word	0x40020030
 80011e0:	40020044 	.word	0x40020044
 80011e4:	40020058 	.word	0x40020058
 80011e8:	4002006c 	.word	0x4002006c
 80011ec:	40020000 	.word	0x40020000

080011f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	2204      	movs	r2, #4
 800120e:	409a      	lsls	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4013      	ands	r3, r2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d04f      	beq.n	80012b8 <HAL_DMA_IRQHandler+0xc8>
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	2b00      	cmp	r3, #0
 8001220:	d04a      	beq.n	80012b8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0320 	and.w	r3, r3, #32
 800122c:	2b00      	cmp	r3, #0
 800122e:	d107      	bne.n	8001240 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 0204 	bic.w	r2, r2, #4
 800123e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a66      	ldr	r2, [pc, #408]	; (80013e0 <HAL_DMA_IRQHandler+0x1f0>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d029      	beq.n	800129e <HAL_DMA_IRQHandler+0xae>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a65      	ldr	r2, [pc, #404]	; (80013e4 <HAL_DMA_IRQHandler+0x1f4>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d022      	beq.n	800129a <HAL_DMA_IRQHandler+0xaa>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a63      	ldr	r2, [pc, #396]	; (80013e8 <HAL_DMA_IRQHandler+0x1f8>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d01a      	beq.n	8001294 <HAL_DMA_IRQHandler+0xa4>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a62      	ldr	r2, [pc, #392]	; (80013ec <HAL_DMA_IRQHandler+0x1fc>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d012      	beq.n	800128e <HAL_DMA_IRQHandler+0x9e>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a60      	ldr	r2, [pc, #384]	; (80013f0 <HAL_DMA_IRQHandler+0x200>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d00a      	beq.n	8001288 <HAL_DMA_IRQHandler+0x98>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a5f      	ldr	r2, [pc, #380]	; (80013f4 <HAL_DMA_IRQHandler+0x204>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d102      	bne.n	8001282 <HAL_DMA_IRQHandler+0x92>
 800127c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001280:	e00e      	b.n	80012a0 <HAL_DMA_IRQHandler+0xb0>
 8001282:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001286:	e00b      	b.n	80012a0 <HAL_DMA_IRQHandler+0xb0>
 8001288:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800128c:	e008      	b.n	80012a0 <HAL_DMA_IRQHandler+0xb0>
 800128e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001292:	e005      	b.n	80012a0 <HAL_DMA_IRQHandler+0xb0>
 8001294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001298:	e002      	b.n	80012a0 <HAL_DMA_IRQHandler+0xb0>
 800129a:	2340      	movs	r3, #64	; 0x40
 800129c:	e000      	b.n	80012a0 <HAL_DMA_IRQHandler+0xb0>
 800129e:	2304      	movs	r3, #4
 80012a0:	4a55      	ldr	r2, [pc, #340]	; (80013f8 <HAL_DMA_IRQHandler+0x208>)
 80012a2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 8094 	beq.w	80013d6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80012b6:	e08e      	b.n	80013d6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	2202      	movs	r2, #2
 80012be:	409a      	lsls	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4013      	ands	r3, r2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d056      	beq.n	8001376 <HAL_DMA_IRQHandler+0x186>
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d051      	beq.n	8001376 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0320 	and.w	r3, r3, #32
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d10b      	bne.n	80012f8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 020a 	bic.w	r2, r2, #10
 80012ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2201      	movs	r2, #1
 80012f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a38      	ldr	r2, [pc, #224]	; (80013e0 <HAL_DMA_IRQHandler+0x1f0>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d029      	beq.n	8001356 <HAL_DMA_IRQHandler+0x166>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a37      	ldr	r2, [pc, #220]	; (80013e4 <HAL_DMA_IRQHandler+0x1f4>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d022      	beq.n	8001352 <HAL_DMA_IRQHandler+0x162>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a35      	ldr	r2, [pc, #212]	; (80013e8 <HAL_DMA_IRQHandler+0x1f8>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d01a      	beq.n	800134c <HAL_DMA_IRQHandler+0x15c>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a34      	ldr	r2, [pc, #208]	; (80013ec <HAL_DMA_IRQHandler+0x1fc>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d012      	beq.n	8001346 <HAL_DMA_IRQHandler+0x156>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a32      	ldr	r2, [pc, #200]	; (80013f0 <HAL_DMA_IRQHandler+0x200>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d00a      	beq.n	8001340 <HAL_DMA_IRQHandler+0x150>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a31      	ldr	r2, [pc, #196]	; (80013f4 <HAL_DMA_IRQHandler+0x204>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d102      	bne.n	800133a <HAL_DMA_IRQHandler+0x14a>
 8001334:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001338:	e00e      	b.n	8001358 <HAL_DMA_IRQHandler+0x168>
 800133a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800133e:	e00b      	b.n	8001358 <HAL_DMA_IRQHandler+0x168>
 8001340:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001344:	e008      	b.n	8001358 <HAL_DMA_IRQHandler+0x168>
 8001346:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800134a:	e005      	b.n	8001358 <HAL_DMA_IRQHandler+0x168>
 800134c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001350:	e002      	b.n	8001358 <HAL_DMA_IRQHandler+0x168>
 8001352:	2320      	movs	r3, #32
 8001354:	e000      	b.n	8001358 <HAL_DMA_IRQHandler+0x168>
 8001356:	2302      	movs	r3, #2
 8001358:	4a27      	ldr	r2, [pc, #156]	; (80013f8 <HAL_DMA_IRQHandler+0x208>)
 800135a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001368:	2b00      	cmp	r3, #0
 800136a:	d034      	beq.n	80013d6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001374:	e02f      	b.n	80013d6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	2208      	movs	r2, #8
 800137c:	409a      	lsls	r2, r3
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	4013      	ands	r3, r2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d028      	beq.n	80013d8 <HAL_DMA_IRQHandler+0x1e8>
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	f003 0308 	and.w	r3, r3, #8
 800138c:	2b00      	cmp	r3, #0
 800138e:	d023      	beq.n	80013d8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 020e 	bic.w	r2, r2, #14
 800139e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a8:	2101      	movs	r1, #1
 80013aa:	fa01 f202 	lsl.w	r2, r1, r2
 80013ae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2201      	movs	r2, #1
 80013b4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d004      	beq.n	80013d8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	4798      	blx	r3
    }
  }
  return;
 80013d6:	bf00      	nop
 80013d8:	bf00      	nop
}
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40020008 	.word	0x40020008
 80013e4:	4002001c 	.word	0x4002001c
 80013e8:	40020030 	.word	0x40020030
 80013ec:	40020044 	.word	0x40020044
 80013f0:	40020058 	.word	0x40020058
 80013f4:	4002006c 	.word	0x4002006c
 80013f8:	40020000 	.word	0x40020000

080013fc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr

08001412 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001412:	b480      	push	{r7}
 8001414:	b085      	sub	sp, #20
 8001416:	af00      	add	r7, sp, #0
 8001418:	60f8      	str	r0, [r7, #12]
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001428:	2101      	movs	r1, #1
 800142a:	fa01 f202 	lsl.w	r2, r1, r2
 800142e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b10      	cmp	r3, #16
 800143e:	d108      	bne.n	8001452 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68ba      	ldr	r2, [r7, #8]
 800144e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001450:	e007      	b.n	8001462 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	60da      	str	r2, [r3, #12]
}
 8001462:	bf00      	nop
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800146c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146e:	b087      	sub	sp, #28
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001486:	4b2f      	ldr	r3, [pc, #188]	; (8001544 <HAL_FLASH_Program+0xd8>)
 8001488:	7e1b      	ldrb	r3, [r3, #24]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d101      	bne.n	8001492 <HAL_FLASH_Program+0x26>
 800148e:	2302      	movs	r3, #2
 8001490:	e054      	b.n	800153c <HAL_FLASH_Program+0xd0>
 8001492:	4b2c      	ldr	r3, [pc, #176]	; (8001544 <HAL_FLASH_Program+0xd8>)
 8001494:	2201      	movs	r2, #1
 8001496:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001498:	f24c 3050 	movw	r0, #50000	; 0xc350
 800149c:	f000 f8a8 	bl	80015f0 <FLASH_WaitForLastOperation>
 80014a0:	4603      	mov	r3, r0
 80014a2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80014a4:	7dfb      	ldrb	r3, [r7, #23]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d144      	bne.n	8001534 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d102      	bne.n	80014b6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80014b0:	2301      	movs	r3, #1
 80014b2:	757b      	strb	r3, [r7, #21]
 80014b4:	e007      	b.n	80014c6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d102      	bne.n	80014c2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80014bc:	2302      	movs	r3, #2
 80014be:	757b      	strb	r3, [r7, #21]
 80014c0:	e001      	b.n	80014c6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80014c2:	2304      	movs	r3, #4
 80014c4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	75bb      	strb	r3, [r7, #22]
 80014ca:	e02d      	b.n	8001528 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80014cc:	7dbb      	ldrb	r3, [r7, #22]
 80014ce:	005a      	lsls	r2, r3, #1
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	eb02 0c03 	add.w	ip, r2, r3
 80014d6:	7dbb      	ldrb	r3, [r7, #22]
 80014d8:	0119      	lsls	r1, r3, #4
 80014da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014de:	f1c1 0620 	rsb	r6, r1, #32
 80014e2:	f1a1 0020 	sub.w	r0, r1, #32
 80014e6:	fa22 f401 	lsr.w	r4, r2, r1
 80014ea:	fa03 f606 	lsl.w	r6, r3, r6
 80014ee:	4334      	orrs	r4, r6
 80014f0:	fa23 f000 	lsr.w	r0, r3, r0
 80014f4:	4304      	orrs	r4, r0
 80014f6:	fa23 f501 	lsr.w	r5, r3, r1
 80014fa:	b2a3      	uxth	r3, r4
 80014fc:	4619      	mov	r1, r3
 80014fe:	4660      	mov	r0, ip
 8001500:	f000 f85a 	bl	80015b8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001504:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001508:	f000 f872 	bl	80015f0 <FLASH_WaitForLastOperation>
 800150c:	4603      	mov	r3, r0
 800150e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001510:	4b0d      	ldr	r3, [pc, #52]	; (8001548 <HAL_FLASH_Program+0xdc>)
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	4a0c      	ldr	r2, [pc, #48]	; (8001548 <HAL_FLASH_Program+0xdc>)
 8001516:	f023 0301 	bic.w	r3, r3, #1
 800151a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800151c:	7dfb      	ldrb	r3, [r7, #23]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d107      	bne.n	8001532 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001522:	7dbb      	ldrb	r3, [r7, #22]
 8001524:	3301      	adds	r3, #1
 8001526:	75bb      	strb	r3, [r7, #22]
 8001528:	7dba      	ldrb	r2, [r7, #22]
 800152a:	7d7b      	ldrb	r3, [r7, #21]
 800152c:	429a      	cmp	r2, r3
 800152e:	d3cd      	bcc.n	80014cc <HAL_FLASH_Program+0x60>
 8001530:	e000      	b.n	8001534 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001532:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <HAL_FLASH_Program+0xd8>)
 8001536:	2200      	movs	r2, #0
 8001538:	761a      	strb	r2, [r3, #24]

  return status;
 800153a:	7dfb      	ldrb	r3, [r7, #23]
}
 800153c:	4618      	mov	r0, r3
 800153e:	371c      	adds	r7, #28
 8001540:	46bd      	mov	sp, r7
 8001542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001544:	20000890 	.word	0x20000890
 8001548:	40022000 	.word	0x40022000

0800154c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001552:	2300      	movs	r3, #0
 8001554:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001556:	4b0d      	ldr	r3, [pc, #52]	; (800158c <HAL_FLASH_Unlock+0x40>)
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800155e:	2b00      	cmp	r3, #0
 8001560:	d00d      	beq.n	800157e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <HAL_FLASH_Unlock+0x40>)
 8001564:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <HAL_FLASH_Unlock+0x44>)
 8001566:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <HAL_FLASH_Unlock+0x40>)
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <HAL_FLASH_Unlock+0x48>)
 800156c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800156e:	4b07      	ldr	r3, [pc, #28]	; (800158c <HAL_FLASH_Unlock+0x40>)
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800157e:	79fb      	ldrb	r3, [r7, #7]
}
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	40022000 	.word	0x40022000
 8001590:	45670123 	.word	0x45670123
 8001594:	cdef89ab 	.word	0xcdef89ab

08001598 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <HAL_FLASH_Lock+0x1c>)
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	4a04      	ldr	r2, [pc, #16]	; (80015b4 <HAL_FLASH_Lock+0x1c>)
 80015a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015a6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40022000 	.word	0x40022000

080015b8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <FLASH_Program_HalfWord+0x30>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <FLASH_Program_HalfWord+0x34>)
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	4a07      	ldr	r2, [pc, #28]	; (80015ec <FLASH_Program_HalfWord+0x34>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	887a      	ldrh	r2, [r7, #2]
 80015da:	801a      	strh	r2, [r3, #0]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000890 	.word	0x20000890
 80015ec:	40022000 	.word	0x40022000

080015f0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80015f8:	f7ff fb38 	bl	8000c6c <HAL_GetTick>
 80015fc:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80015fe:	e010      	b.n	8001622 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001606:	d00c      	beq.n	8001622 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d007      	beq.n	800161e <FLASH_WaitForLastOperation+0x2e>
 800160e:	f7ff fb2d 	bl	8000c6c <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	429a      	cmp	r2, r3
 800161c:	d201      	bcs.n	8001622 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e025      	b.n	800166e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <FLASH_WaitForLastOperation+0x88>)
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1e8      	bne.n	8001600 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800162e:	4b12      	ldr	r3, [pc, #72]	; (8001678 <FLASH_WaitForLastOperation+0x88>)
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	f003 0320 	and.w	r3, r3, #32
 8001636:	2b00      	cmp	r3, #0
 8001638:	d002      	beq.n	8001640 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800163a:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <FLASH_WaitForLastOperation+0x88>)
 800163c:	2220      	movs	r2, #32
 800163e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001640:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <FLASH_WaitForLastOperation+0x88>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	f003 0310 	and.w	r3, r3, #16
 8001648:	2b00      	cmp	r3, #0
 800164a:	d10b      	bne.n	8001664 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800164c:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <FLASH_WaitForLastOperation+0x88>)
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001654:	2b00      	cmp	r3, #0
 8001656:	d105      	bne.n	8001664 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001658:	4b07      	ldr	r3, [pc, #28]	; (8001678 <FLASH_WaitForLastOperation+0x88>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001664:	f000 f80a 	bl	800167c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e000      	b.n	800166e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40022000 	.word	0x40022000

0800167c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001686:	4b23      	ldr	r3, [pc, #140]	; (8001714 <FLASH_SetErrorCode+0x98>)
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	f003 0310 	and.w	r3, r3, #16
 800168e:	2b00      	cmp	r3, #0
 8001690:	d009      	beq.n	80016a6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001692:	4b21      	ldr	r3, [pc, #132]	; (8001718 <FLASH_SetErrorCode+0x9c>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	f043 0302 	orr.w	r3, r3, #2
 800169a:	4a1f      	ldr	r2, [pc, #124]	; (8001718 <FLASH_SetErrorCode+0x9c>)
 800169c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f043 0310 	orr.w	r3, r3, #16
 80016a4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80016a6:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <FLASH_SetErrorCode+0x98>)
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d009      	beq.n	80016c6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80016b2:	4b19      	ldr	r3, [pc, #100]	; (8001718 <FLASH_SetErrorCode+0x9c>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	4a17      	ldr	r2, [pc, #92]	; (8001718 <FLASH_SetErrorCode+0x9c>)
 80016bc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f043 0304 	orr.w	r3, r3, #4
 80016c4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80016c6:	4b13      	ldr	r3, [pc, #76]	; (8001714 <FLASH_SetErrorCode+0x98>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00b      	beq.n	80016ea <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <FLASH_SetErrorCode+0x9c>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	f043 0304 	orr.w	r3, r3, #4
 80016da:	4a0f      	ldr	r2, [pc, #60]	; (8001718 <FLASH_SetErrorCode+0x9c>)
 80016dc:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <FLASH_SetErrorCode+0x98>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	4a0c      	ldr	r2, [pc, #48]	; (8001714 <FLASH_SetErrorCode+0x98>)
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f240 1201 	movw	r2, #257	; 0x101
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d106      	bne.n	8001702 <FLASH_SetErrorCode+0x86>
 80016f4:	4b07      	ldr	r3, [pc, #28]	; (8001714 <FLASH_SetErrorCode+0x98>)
 80016f6:	69db      	ldr	r3, [r3, #28]
 80016f8:	4a06      	ldr	r2, [pc, #24]	; (8001714 <FLASH_SetErrorCode+0x98>)
 80016fa:	f023 0301 	bic.w	r3, r3, #1
 80016fe:	61d3      	str	r3, [r2, #28]
}  
 8001700:	e002      	b.n	8001708 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001702:	4a04      	ldr	r2, [pc, #16]	; (8001714 <FLASH_SetErrorCode+0x98>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	60d3      	str	r3, [r2, #12]
}  
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	40022000 	.word	0x40022000
 8001718:	20000890 	.word	0x20000890

0800171c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800172e:	4b2f      	ldr	r3, [pc, #188]	; (80017ec <HAL_FLASHEx_Erase+0xd0>)
 8001730:	7e1b      	ldrb	r3, [r3, #24]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d101      	bne.n	800173a <HAL_FLASHEx_Erase+0x1e>
 8001736:	2302      	movs	r3, #2
 8001738:	e053      	b.n	80017e2 <HAL_FLASHEx_Erase+0xc6>
 800173a:	4b2c      	ldr	r3, [pc, #176]	; (80017ec <HAL_FLASHEx_Erase+0xd0>)
 800173c:	2201      	movs	r2, #1
 800173e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d116      	bne.n	8001776 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001748:	f24c 3050 	movw	r0, #50000	; 0xc350
 800174c:	f7ff ff50 	bl	80015f0 <FLASH_WaitForLastOperation>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d141      	bne.n	80017da <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001756:	2001      	movs	r0, #1
 8001758:	f000 f84c 	bl	80017f4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800175c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001760:	f7ff ff46 	bl	80015f0 <FLASH_WaitForLastOperation>
 8001764:	4603      	mov	r3, r0
 8001766:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001768:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <HAL_FLASHEx_Erase+0xd4>)
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	4a20      	ldr	r2, [pc, #128]	; (80017f0 <HAL_FLASHEx_Erase+0xd4>)
 800176e:	f023 0304 	bic.w	r3, r3, #4
 8001772:	6113      	str	r3, [r2, #16]
 8001774:	e031      	b.n	80017da <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001776:	f24c 3050 	movw	r0, #50000	; 0xc350
 800177a:	f7ff ff39 	bl	80015f0 <FLASH_WaitForLastOperation>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d12a      	bne.n	80017da <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	f04f 32ff 	mov.w	r2, #4294967295
 800178a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	e019      	b.n	80017c8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001794:	68b8      	ldr	r0, [r7, #8]
 8001796:	f000 f849 	bl	800182c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800179a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800179e:	f7ff ff27 	bl	80015f0 <FLASH_WaitForLastOperation>
 80017a2:	4603      	mov	r3, r0
 80017a4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_FLASHEx_Erase+0xd4>)
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	4a11      	ldr	r2, [pc, #68]	; (80017f0 <HAL_FLASHEx_Erase+0xd4>)
 80017ac:	f023 0302 	bic.w	r3, r3, #2
 80017b0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	601a      	str	r2, [r3, #0]
            break;
 80017be:	e00c      	b.n	80017da <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017c6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	029a      	lsls	r2, r3, #10
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80017d4:	68ba      	ldr	r2, [r7, #8]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d3dc      	bcc.n	8001794 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80017da:	4b04      	ldr	r3, [pc, #16]	; (80017ec <HAL_FLASHEx_Erase+0xd0>)
 80017dc:	2200      	movs	r2, #0
 80017de:	761a      	strb	r2, [r3, #24]

  return status;
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000890 	.word	0x20000890
 80017f0:	40022000 	.word	0x40022000

080017f4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80017fc:	4b09      	ldr	r3, [pc, #36]	; (8001824 <FLASH_MassErase+0x30>)
 80017fe:	2200      	movs	r2, #0
 8001800:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <FLASH_MassErase+0x34>)
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	4a08      	ldr	r2, [pc, #32]	; (8001828 <FLASH_MassErase+0x34>)
 8001808:	f043 0304 	orr.w	r3, r3, #4
 800180c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <FLASH_MassErase+0x34>)
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	4a05      	ldr	r2, [pc, #20]	; (8001828 <FLASH_MassErase+0x34>)
 8001814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001818:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	20000890 	.word	0x20000890
 8001828:	40022000 	.word	0x40022000

0800182c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <FLASH_PageErase+0x38>)
 8001836:	2200      	movs	r2, #0
 8001838:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <FLASH_PageErase+0x3c>)
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <FLASH_PageErase+0x3c>)
 8001840:	f043 0302 	orr.w	r3, r3, #2
 8001844:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001846:	4a08      	ldr	r2, [pc, #32]	; (8001868 <FLASH_PageErase+0x3c>)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <FLASH_PageErase+0x3c>)
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	4a05      	ldr	r2, [pc, #20]	; (8001868 <FLASH_PageErase+0x3c>)
 8001852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001856:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	20000890 	.word	0x20000890
 8001868:	40022000 	.word	0x40022000

0800186c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800186c:	b480      	push	{r7}
 800186e:	b08b      	sub	sp, #44	; 0x2c
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001876:	2300      	movs	r3, #0
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800187a:	2300      	movs	r3, #0
 800187c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800187e:	e169      	b.n	8001b54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001880:	2201      	movs	r2, #1
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	69fa      	ldr	r2, [r7, #28]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	429a      	cmp	r2, r3
 800189a:	f040 8158 	bne.w	8001b4e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	4a9a      	ldr	r2, [pc, #616]	; (8001b0c <HAL_GPIO_Init+0x2a0>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d05e      	beq.n	8001966 <HAL_GPIO_Init+0xfa>
 80018a8:	4a98      	ldr	r2, [pc, #608]	; (8001b0c <HAL_GPIO_Init+0x2a0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d875      	bhi.n	800199a <HAL_GPIO_Init+0x12e>
 80018ae:	4a98      	ldr	r2, [pc, #608]	; (8001b10 <HAL_GPIO_Init+0x2a4>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d058      	beq.n	8001966 <HAL_GPIO_Init+0xfa>
 80018b4:	4a96      	ldr	r2, [pc, #600]	; (8001b10 <HAL_GPIO_Init+0x2a4>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d86f      	bhi.n	800199a <HAL_GPIO_Init+0x12e>
 80018ba:	4a96      	ldr	r2, [pc, #600]	; (8001b14 <HAL_GPIO_Init+0x2a8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d052      	beq.n	8001966 <HAL_GPIO_Init+0xfa>
 80018c0:	4a94      	ldr	r2, [pc, #592]	; (8001b14 <HAL_GPIO_Init+0x2a8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d869      	bhi.n	800199a <HAL_GPIO_Init+0x12e>
 80018c6:	4a94      	ldr	r2, [pc, #592]	; (8001b18 <HAL_GPIO_Init+0x2ac>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d04c      	beq.n	8001966 <HAL_GPIO_Init+0xfa>
 80018cc:	4a92      	ldr	r2, [pc, #584]	; (8001b18 <HAL_GPIO_Init+0x2ac>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d863      	bhi.n	800199a <HAL_GPIO_Init+0x12e>
 80018d2:	4a92      	ldr	r2, [pc, #584]	; (8001b1c <HAL_GPIO_Init+0x2b0>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d046      	beq.n	8001966 <HAL_GPIO_Init+0xfa>
 80018d8:	4a90      	ldr	r2, [pc, #576]	; (8001b1c <HAL_GPIO_Init+0x2b0>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d85d      	bhi.n	800199a <HAL_GPIO_Init+0x12e>
 80018de:	2b12      	cmp	r3, #18
 80018e0:	d82a      	bhi.n	8001938 <HAL_GPIO_Init+0xcc>
 80018e2:	2b12      	cmp	r3, #18
 80018e4:	d859      	bhi.n	800199a <HAL_GPIO_Init+0x12e>
 80018e6:	a201      	add	r2, pc, #4	; (adr r2, 80018ec <HAL_GPIO_Init+0x80>)
 80018e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ec:	08001967 	.word	0x08001967
 80018f0:	08001941 	.word	0x08001941
 80018f4:	08001953 	.word	0x08001953
 80018f8:	08001995 	.word	0x08001995
 80018fc:	0800199b 	.word	0x0800199b
 8001900:	0800199b 	.word	0x0800199b
 8001904:	0800199b 	.word	0x0800199b
 8001908:	0800199b 	.word	0x0800199b
 800190c:	0800199b 	.word	0x0800199b
 8001910:	0800199b 	.word	0x0800199b
 8001914:	0800199b 	.word	0x0800199b
 8001918:	0800199b 	.word	0x0800199b
 800191c:	0800199b 	.word	0x0800199b
 8001920:	0800199b 	.word	0x0800199b
 8001924:	0800199b 	.word	0x0800199b
 8001928:	0800199b 	.word	0x0800199b
 800192c:	0800199b 	.word	0x0800199b
 8001930:	08001949 	.word	0x08001949
 8001934:	0800195d 	.word	0x0800195d
 8001938:	4a79      	ldr	r2, [pc, #484]	; (8001b20 <HAL_GPIO_Init+0x2b4>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d013      	beq.n	8001966 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800193e:	e02c      	b.n	800199a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	623b      	str	r3, [r7, #32]
          break;
 8001946:	e029      	b.n	800199c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	3304      	adds	r3, #4
 800194e:	623b      	str	r3, [r7, #32]
          break;
 8001950:	e024      	b.n	800199c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	3308      	adds	r3, #8
 8001958:	623b      	str	r3, [r7, #32]
          break;
 800195a:	e01f      	b.n	800199c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	330c      	adds	r3, #12
 8001962:	623b      	str	r3, [r7, #32]
          break;
 8001964:	e01a      	b.n	800199c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d102      	bne.n	8001974 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800196e:	2304      	movs	r3, #4
 8001970:	623b      	str	r3, [r7, #32]
          break;
 8001972:	e013      	b.n	800199c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d105      	bne.n	8001988 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800197c:	2308      	movs	r3, #8
 800197e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69fa      	ldr	r2, [r7, #28]
 8001984:	611a      	str	r2, [r3, #16]
          break;
 8001986:	e009      	b.n	800199c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001988:	2308      	movs	r3, #8
 800198a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69fa      	ldr	r2, [r7, #28]
 8001990:	615a      	str	r2, [r3, #20]
          break;
 8001992:	e003      	b.n	800199c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001994:	2300      	movs	r3, #0
 8001996:	623b      	str	r3, [r7, #32]
          break;
 8001998:	e000      	b.n	800199c <HAL_GPIO_Init+0x130>
          break;
 800199a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	2bff      	cmp	r3, #255	; 0xff
 80019a0:	d801      	bhi.n	80019a6 <HAL_GPIO_Init+0x13a>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	e001      	b.n	80019aa <HAL_GPIO_Init+0x13e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3304      	adds	r3, #4
 80019aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	2bff      	cmp	r3, #255	; 0xff
 80019b0:	d802      	bhi.n	80019b8 <HAL_GPIO_Init+0x14c>
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	e002      	b.n	80019be <HAL_GPIO_Init+0x152>
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	3b08      	subs	r3, #8
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	210f      	movs	r1, #15
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	fa01 f303 	lsl.w	r3, r1, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	401a      	ands	r2, r3
 80019d0:	6a39      	ldr	r1, [r7, #32]
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	fa01 f303 	lsl.w	r3, r1, r3
 80019d8:	431a      	orrs	r2, r3
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 80b1 	beq.w	8001b4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019ec:	4b4d      	ldr	r3, [pc, #308]	; (8001b24 <HAL_GPIO_Init+0x2b8>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	4a4c      	ldr	r2, [pc, #304]	; (8001b24 <HAL_GPIO_Init+0x2b8>)
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	6193      	str	r3, [r2, #24]
 80019f8:	4b4a      	ldr	r3, [pc, #296]	; (8001b24 <HAL_GPIO_Init+0x2b8>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a04:	4a48      	ldr	r2, [pc, #288]	; (8001b28 <HAL_GPIO_Init+0x2bc>)
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	089b      	lsrs	r3, r3, #2
 8001a0a:	3302      	adds	r3, #2
 8001a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	f003 0303 	and.w	r3, r3, #3
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	220f      	movs	r2, #15
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	4013      	ands	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a40      	ldr	r2, [pc, #256]	; (8001b2c <HAL_GPIO_Init+0x2c0>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d013      	beq.n	8001a58 <HAL_GPIO_Init+0x1ec>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a3f      	ldr	r2, [pc, #252]	; (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d00d      	beq.n	8001a54 <HAL_GPIO_Init+0x1e8>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a3e      	ldr	r2, [pc, #248]	; (8001b34 <HAL_GPIO_Init+0x2c8>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d007      	beq.n	8001a50 <HAL_GPIO_Init+0x1e4>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a3d      	ldr	r2, [pc, #244]	; (8001b38 <HAL_GPIO_Init+0x2cc>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d101      	bne.n	8001a4c <HAL_GPIO_Init+0x1e0>
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e006      	b.n	8001a5a <HAL_GPIO_Init+0x1ee>
 8001a4c:	2304      	movs	r3, #4
 8001a4e:	e004      	b.n	8001a5a <HAL_GPIO_Init+0x1ee>
 8001a50:	2302      	movs	r3, #2
 8001a52:	e002      	b.n	8001a5a <HAL_GPIO_Init+0x1ee>
 8001a54:	2301      	movs	r3, #1
 8001a56:	e000      	b.n	8001a5a <HAL_GPIO_Init+0x1ee>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a5c:	f002 0203 	and.w	r2, r2, #3
 8001a60:	0092      	lsls	r2, r2, #2
 8001a62:	4093      	lsls	r3, r2
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a6a:	492f      	ldr	r1, [pc, #188]	; (8001b28 <HAL_GPIO_Init+0x2bc>)
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	089b      	lsrs	r3, r3, #2
 8001a70:	3302      	adds	r3, #2
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d006      	beq.n	8001a92 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a84:	4b2d      	ldr	r3, [pc, #180]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	492c      	ldr	r1, [pc, #176]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	600b      	str	r3, [r1, #0]
 8001a90:	e006      	b.n	8001aa0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a92:	4b2a      	ldr	r3, [pc, #168]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	4928      	ldr	r1, [pc, #160]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d006      	beq.n	8001aba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001aac:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	4922      	ldr	r1, [pc, #136]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
 8001ab8:	e006      	b.n	8001ac8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001aba:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	491e      	ldr	r1, [pc, #120]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d006      	beq.n	8001ae2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ad4:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	4918      	ldr	r1, [pc, #96]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	608b      	str	r3, [r1, #8]
 8001ae0:	e006      	b.n	8001af0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ae2:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	4914      	ldr	r1, [pc, #80]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d021      	beq.n	8001b40 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001afc:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	490e      	ldr	r1, [pc, #56]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	60cb      	str	r3, [r1, #12]
 8001b08:	e021      	b.n	8001b4e <HAL_GPIO_Init+0x2e2>
 8001b0a:	bf00      	nop
 8001b0c:	10320000 	.word	0x10320000
 8001b10:	10310000 	.word	0x10310000
 8001b14:	10220000 	.word	0x10220000
 8001b18:	10210000 	.word	0x10210000
 8001b1c:	10120000 	.word	0x10120000
 8001b20:	10110000 	.word	0x10110000
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40010000 	.word	0x40010000
 8001b2c:	40010800 	.word	0x40010800
 8001b30:	40010c00 	.word	0x40010c00
 8001b34:	40011000 	.word	0x40011000
 8001b38:	40011400 	.word	0x40011400
 8001b3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <HAL_GPIO_Init+0x304>)
 8001b42:	68da      	ldr	r2, [r3, #12]
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	4909      	ldr	r1, [pc, #36]	; (8001b70 <HAL_GPIO_Init+0x304>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	3301      	adds	r3, #1
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f47f ae8e 	bne.w	8001880 <HAL_GPIO_Init+0x14>
  }
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	372c      	adds	r7, #44	; 0x2c
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr
 8001b70:	40010400 	.word	0x40010400

08001b74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	887b      	ldrh	r3, [r7, #2]
 8001b86:	4013      	ands	r3, r2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d002      	beq.n	8001b92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	73fb      	strb	r3, [r7, #15]
 8001b90:	e001      	b.n	8001b96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b92:	2300      	movs	r3, #0
 8001b94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr

08001ba2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	460b      	mov	r3, r1
 8001bac:	807b      	strh	r3, [r7, #2]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bb2:	787b      	ldrb	r3, [r7, #1]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bb8:	887a      	ldrh	r2, [r7, #2]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bbe:	e003      	b.n	8001bc8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bc0:	887b      	ldrh	r3, [r7, #2]
 8001bc2:	041a      	lsls	r2, r3, #16
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	611a      	str	r2, [r3, #16]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
	...

08001bd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bde:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001be0:	695a      	ldr	r2, [r3, #20]
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	4013      	ands	r3, r2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d006      	beq.n	8001bf8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bea:	4a05      	ldr	r2, [pc, #20]	; (8001c00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bec:	88fb      	ldrh	r3, [r7, #6]
 8001bee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f002 fbe6 	bl	80043c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40010400 	.word	0x40010400

08001c04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e272      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 8087 	beq.w	8001d32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c24:	4b92      	ldr	r3, [pc, #584]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 030c 	and.w	r3, r3, #12
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	d00c      	beq.n	8001c4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c30:	4b8f      	ldr	r3, [pc, #572]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 030c 	and.w	r3, r3, #12
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d112      	bne.n	8001c62 <HAL_RCC_OscConfig+0x5e>
 8001c3c:	4b8c      	ldr	r3, [pc, #560]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c48:	d10b      	bne.n	8001c62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4a:	4b89      	ldr	r3, [pc, #548]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d06c      	beq.n	8001d30 <HAL_RCC_OscConfig+0x12c>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d168      	bne.n	8001d30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e24c      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6a:	d106      	bne.n	8001c7a <HAL_RCC_OscConfig+0x76>
 8001c6c:	4b80      	ldr	r3, [pc, #512]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a7f      	ldr	r2, [pc, #508]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	e02e      	b.n	8001cd8 <HAL_RCC_OscConfig+0xd4>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10c      	bne.n	8001c9c <HAL_RCC_OscConfig+0x98>
 8001c82:	4b7b      	ldr	r3, [pc, #492]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a7a      	ldr	r2, [pc, #488]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	4b78      	ldr	r3, [pc, #480]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a77      	ldr	r2, [pc, #476]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	e01d      	b.n	8001cd8 <HAL_RCC_OscConfig+0xd4>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0xbc>
 8001ca6:	4b72      	ldr	r3, [pc, #456]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a71      	ldr	r2, [pc, #452]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	4b6f      	ldr	r3, [pc, #444]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a6e      	ldr	r2, [pc, #440]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	e00b      	b.n	8001cd8 <HAL_RCC_OscConfig+0xd4>
 8001cc0:	4b6b      	ldr	r3, [pc, #428]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a6a      	ldr	r2, [pc, #424]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	4b68      	ldr	r3, [pc, #416]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a67      	ldr	r2, [pc, #412]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d013      	beq.n	8001d08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce0:	f7fe ffc4 	bl	8000c6c <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7fe ffc0 	bl	8000c6c <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	; 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e200      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfa:	4b5d      	ldr	r3, [pc, #372]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0xe4>
 8001d06:	e014      	b.n	8001d32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7fe ffb0 	bl	8000c6c <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d10:	f7fe ffac 	bl	8000c6c <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	; 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e1ec      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d22:	4b53      	ldr	r3, [pc, #332]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x10c>
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d063      	beq.n	8001e06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d3e:	4b4c      	ldr	r3, [pc, #304]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00b      	beq.n	8001d62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d4a:	4b49      	ldr	r3, [pc, #292]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d11c      	bne.n	8001d90 <HAL_RCC_OscConfig+0x18c>
 8001d56:	4b46      	ldr	r3, [pc, #280]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d116      	bne.n	8001d90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d62:	4b43      	ldr	r3, [pc, #268]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d005      	beq.n	8001d7a <HAL_RCC_OscConfig+0x176>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d001      	beq.n	8001d7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e1c0      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7a:	4b3d      	ldr	r3, [pc, #244]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4939      	ldr	r1, [pc, #228]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8e:	e03a      	b.n	8001e06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d020      	beq.n	8001dda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d98:	4b36      	ldr	r3, [pc, #216]	; (8001e74 <HAL_RCC_OscConfig+0x270>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9e:	f7fe ff65 	bl	8000c6c <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da6:	f7fe ff61 	bl	8000c6c <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e1a1      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db8:	4b2d      	ldr	r3, [pc, #180]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc4:	4b2a      	ldr	r3, [pc, #168]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4927      	ldr	r1, [pc, #156]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	600b      	str	r3, [r1, #0]
 8001dd8:	e015      	b.n	8001e06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dda:	4b26      	ldr	r3, [pc, #152]	; (8001e74 <HAL_RCC_OscConfig+0x270>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7fe ff44 	bl	8000c6c <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de8:	f7fe ff40 	bl	8000c6c <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e180      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfa:	4b1d      	ldr	r3, [pc, #116]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d03a      	beq.n	8001e88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d019      	beq.n	8001e4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e1a:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <HAL_RCC_OscConfig+0x274>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e20:	f7fe ff24 	bl	8000c6c <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e28:	f7fe ff20 	bl	8000c6c <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e160      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e46:	2001      	movs	r0, #1
 8001e48:	f000 fad8 	bl	80023fc <RCC_Delay>
 8001e4c:	e01c      	b.n	8001e88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <HAL_RCC_OscConfig+0x274>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e54:	f7fe ff0a 	bl	8000c6c <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5a:	e00f      	b.n	8001e7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5c:	f7fe ff06 	bl	8000c6c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d908      	bls.n	8001e7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e146      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000
 8001e74:	42420000 	.word	0x42420000
 8001e78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e7c:	4b92      	ldr	r3, [pc, #584]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1e9      	bne.n	8001e5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 80a6 	beq.w	8001fe2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e9a:	4b8b      	ldr	r3, [pc, #556]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10d      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea6:	4b88      	ldr	r3, [pc, #544]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	4a87      	ldr	r2, [pc, #540]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	61d3      	str	r3, [r2, #28]
 8001eb2:	4b85      	ldr	r3, [pc, #532]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec2:	4b82      	ldr	r3, [pc, #520]	; (80020cc <HAL_RCC_OscConfig+0x4c8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d118      	bne.n	8001f00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ece:	4b7f      	ldr	r3, [pc, #508]	; (80020cc <HAL_RCC_OscConfig+0x4c8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a7e      	ldr	r2, [pc, #504]	; (80020cc <HAL_RCC_OscConfig+0x4c8>)
 8001ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eda:	f7fe fec7 	bl	8000c6c <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee2:	f7fe fec3 	bl	8000c6c <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b64      	cmp	r3, #100	; 0x64
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e103      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef4:	4b75      	ldr	r3, [pc, #468]	; (80020cc <HAL_RCC_OscConfig+0x4c8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d106      	bne.n	8001f16 <HAL_RCC_OscConfig+0x312>
 8001f08:	4b6f      	ldr	r3, [pc, #444]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4a6e      	ldr	r2, [pc, #440]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	6213      	str	r3, [r2, #32]
 8001f14:	e02d      	b.n	8001f72 <HAL_RCC_OscConfig+0x36e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10c      	bne.n	8001f38 <HAL_RCC_OscConfig+0x334>
 8001f1e:	4b6a      	ldr	r3, [pc, #424]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	4a69      	ldr	r2, [pc, #420]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	f023 0301 	bic.w	r3, r3, #1
 8001f28:	6213      	str	r3, [r2, #32]
 8001f2a:	4b67      	ldr	r3, [pc, #412]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	4a66      	ldr	r2, [pc, #408]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	f023 0304 	bic.w	r3, r3, #4
 8001f34:	6213      	str	r3, [r2, #32]
 8001f36:	e01c      	b.n	8001f72 <HAL_RCC_OscConfig+0x36e>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	2b05      	cmp	r3, #5
 8001f3e:	d10c      	bne.n	8001f5a <HAL_RCC_OscConfig+0x356>
 8001f40:	4b61      	ldr	r3, [pc, #388]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	4a60      	ldr	r2, [pc, #384]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f46:	f043 0304 	orr.w	r3, r3, #4
 8001f4a:	6213      	str	r3, [r2, #32]
 8001f4c:	4b5e      	ldr	r3, [pc, #376]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	4a5d      	ldr	r2, [pc, #372]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	6213      	str	r3, [r2, #32]
 8001f58:	e00b      	b.n	8001f72 <HAL_RCC_OscConfig+0x36e>
 8001f5a:	4b5b      	ldr	r3, [pc, #364]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	4a5a      	ldr	r2, [pc, #360]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	f023 0301 	bic.w	r3, r3, #1
 8001f64:	6213      	str	r3, [r2, #32]
 8001f66:	4b58      	ldr	r3, [pc, #352]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	4a57      	ldr	r2, [pc, #348]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	f023 0304 	bic.w	r3, r3, #4
 8001f70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d015      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7a:	f7fe fe77 	bl	8000c6c <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f80:	e00a      	b.n	8001f98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f82:	f7fe fe73 	bl	8000c6c <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e0b1      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f98:	4b4b      	ldr	r3, [pc, #300]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0ee      	beq.n	8001f82 <HAL_RCC_OscConfig+0x37e>
 8001fa4:	e014      	b.n	8001fd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa6:	f7fe fe61 	bl	8000c6c <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fac:	e00a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fae:	f7fe fe5d 	bl	8000c6c <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e09b      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc4:	4b40      	ldr	r3, [pc, #256]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1ee      	bne.n	8001fae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fd0:	7dfb      	ldrb	r3, [r7, #23]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d105      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd6:	4b3c      	ldr	r3, [pc, #240]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	4a3b      	ldr	r2, [pc, #236]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 8087 	beq.w	80020fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fec:	4b36      	ldr	r3, [pc, #216]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 030c 	and.w	r3, r3, #12
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d061      	beq.n	80020bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d146      	bne.n	800208e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002000:	4b33      	ldr	r3, [pc, #204]	; (80020d0 <HAL_RCC_OscConfig+0x4cc>)
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002006:	f7fe fe31 	bl	8000c6c <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200e:	f7fe fe2d 	bl	8000c6c <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e06d      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002020:	4b29      	ldr	r3, [pc, #164]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f0      	bne.n	800200e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002034:	d108      	bne.n	8002048 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002036:	4b24      	ldr	r3, [pc, #144]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	4921      	ldr	r1, [pc, #132]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8002044:	4313      	orrs	r3, r2
 8002046:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002048:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a19      	ldr	r1, [r3, #32]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	430b      	orrs	r3, r1
 800205a:	491b      	ldr	r1, [pc, #108]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 800205c:	4313      	orrs	r3, r2
 800205e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002060:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <HAL_RCC_OscConfig+0x4cc>)
 8002062:	2201      	movs	r2, #1
 8002064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002066:	f7fe fe01 	bl	8000c6c <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206e:	f7fe fdfd 	bl	8000c6c <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e03d      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0f0      	beq.n	800206e <HAL_RCC_OscConfig+0x46a>
 800208c:	e035      	b.n	80020fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208e:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <HAL_RCC_OscConfig+0x4cc>)
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002094:	f7fe fdea 	bl	8000c6c <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800209c:	f7fe fde6 	bl	8000c6c <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e026      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x498>
 80020ba:	e01e      	b.n	80020fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d107      	bne.n	80020d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e019      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40007000 	.word	0x40007000
 80020d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <HAL_RCC_OscConfig+0x500>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d106      	bne.n	80020f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d001      	beq.n	80020fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40021000 	.word	0x40021000

08002108 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0d0      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800211c:	4b6a      	ldr	r3, [pc, #424]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d910      	bls.n	800214c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212a:	4b67      	ldr	r3, [pc, #412]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f023 0207 	bic.w	r2, r3, #7
 8002132:	4965      	ldr	r1, [pc, #404]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800213a:	4b63      	ldr	r3, [pc, #396]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d001      	beq.n	800214c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0b8      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d020      	beq.n	800219a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002164:	4b59      	ldr	r3, [pc, #356]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	4a58      	ldr	r2, [pc, #352]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800216e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800217c:	4b53      	ldr	r3, [pc, #332]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	4a52      	ldr	r2, [pc, #328]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002186:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002188:	4b50      	ldr	r3, [pc, #320]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	494d      	ldr	r1, [pc, #308]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	4313      	orrs	r3, r2
 8002198:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d040      	beq.n	8002228 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d107      	bne.n	80021be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ae:	4b47      	ldr	r3, [pc, #284]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d115      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e07f      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d107      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c6:	4b41      	ldr	r3, [pc, #260]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d109      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e073      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d6:	4b3d      	ldr	r3, [pc, #244]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e06b      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021e6:	4b39      	ldr	r3, [pc, #228]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f023 0203 	bic.w	r2, r3, #3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	4936      	ldr	r1, [pc, #216]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021f8:	f7fe fd38 	bl	8000c6c <HAL_GetTick>
 80021fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fe:	e00a      	b.n	8002216 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002200:	f7fe fd34 	bl	8000c6c <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f241 3288 	movw	r2, #5000	; 0x1388
 800220e:	4293      	cmp	r3, r2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e053      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002216:	4b2d      	ldr	r3, [pc, #180]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 020c 	and.w	r2, r3, #12
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	429a      	cmp	r2, r3
 8002226:	d1eb      	bne.n	8002200 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002228:	4b27      	ldr	r3, [pc, #156]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d210      	bcs.n	8002258 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002236:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 0207 	bic.w	r2, r3, #7
 800223e:	4922      	ldr	r1, [pc, #136]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	4313      	orrs	r3, r2
 8002244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002246:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d001      	beq.n	8002258 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e032      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d008      	beq.n	8002276 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	4916      	ldr	r1, [pc, #88]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	4313      	orrs	r3, r2
 8002274:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b00      	cmp	r3, #0
 8002280:	d009      	beq.n	8002296 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	490e      	ldr	r1, [pc, #56]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002292:	4313      	orrs	r3, r2
 8002294:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002296:	f000 f821 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 800229a:	4602      	mov	r2, r0
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	490a      	ldr	r1, [pc, #40]	; (80022d0 <HAL_RCC_ClockConfig+0x1c8>)
 80022a8:	5ccb      	ldrb	r3, [r1, r3]
 80022aa:	fa22 f303 	lsr.w	r3, r2, r3
 80022ae:	4a09      	ldr	r2, [pc, #36]	; (80022d4 <HAL_RCC_ClockConfig+0x1cc>)
 80022b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <HAL_RCC_ClockConfig+0x1d0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe fc96 	bl	8000be8 <HAL_InitTick>

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40022000 	.word	0x40022000
 80022cc:	40021000 	.word	0x40021000
 80022d0:	08007470 	.word	0x08007470
 80022d4:	20000028 	.word	0x20000028
 80022d8:	20000000 	.word	0x20000000

080022dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022dc:	b490      	push	{r4, r7}
 80022de:	b08a      	sub	sp, #40	; 0x28
 80022e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022e2:	4b29      	ldr	r3, [pc, #164]	; (8002388 <HAL_RCC_GetSysClockFreq+0xac>)
 80022e4:	1d3c      	adds	r4, r7, #4
 80022e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022ec:	f240 2301 	movw	r3, #513	; 0x201
 80022f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]
 80022f6:	2300      	movs	r3, #0
 80022f8:	61bb      	str	r3, [r7, #24]
 80022fa:	2300      	movs	r3, #0
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002302:	2300      	movs	r3, #0
 8002304:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002306:	4b21      	ldr	r3, [pc, #132]	; (800238c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b04      	cmp	r3, #4
 8002314:	d002      	beq.n	800231c <HAL_RCC_GetSysClockFreq+0x40>
 8002316:	2b08      	cmp	r3, #8
 8002318:	d003      	beq.n	8002322 <HAL_RCC_GetSysClockFreq+0x46>
 800231a:	e02b      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800231c:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <HAL_RCC_GetSysClockFreq+0xb4>)
 800231e:	623b      	str	r3, [r7, #32]
      break;
 8002320:	e02b      	b.n	800237a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	0c9b      	lsrs	r3, r3, #18
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	3328      	adds	r3, #40	; 0x28
 800232c:	443b      	add	r3, r7
 800232e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002332:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d012      	beq.n	8002364 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800233e:	4b13      	ldr	r3, [pc, #76]	; (800238c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	0c5b      	lsrs	r3, r3, #17
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	3328      	adds	r3, #40	; 0x28
 800234a:	443b      	add	r3, r7
 800234c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002350:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	4a0e      	ldr	r2, [pc, #56]	; (8002390 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002356:	fb03 f202 	mul.w	r2, r3, r2
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
 8002362:	e004      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	4a0b      	ldr	r2, [pc, #44]	; (8002394 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002368:	fb02 f303 	mul.w	r3, r2, r3
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	623b      	str	r3, [r7, #32]
      break;
 8002372:	e002      	b.n	800237a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002376:	623b      	str	r3, [r7, #32]
      break;
 8002378:	bf00      	nop
    }
  }
  return sysclockfreq;
 800237a:	6a3b      	ldr	r3, [r7, #32]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3728      	adds	r7, #40	; 0x28
 8002380:	46bd      	mov	sp, r7
 8002382:	bc90      	pop	{r4, r7}
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	08006a0c 	.word	0x08006a0c
 800238c:	40021000 	.word	0x40021000
 8002390:	007a1200 	.word	0x007a1200
 8002394:	003d0900 	.word	0x003d0900

08002398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800239c:	4b02      	ldr	r3, [pc, #8]	; (80023a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800239e:	681b      	ldr	r3, [r3, #0]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr
 80023a8:	20000028 	.word	0x20000028

080023ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023b0:	f7ff fff2 	bl	8002398 <HAL_RCC_GetHCLKFreq>
 80023b4:	4602      	mov	r2, r0
 80023b6:	4b05      	ldr	r3, [pc, #20]	; (80023cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	0a1b      	lsrs	r3, r3, #8
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	4903      	ldr	r1, [pc, #12]	; (80023d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023c2:	5ccb      	ldrb	r3, [r1, r3]
 80023c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40021000 	.word	0x40021000
 80023d0:	08007480 	.word	0x08007480

080023d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023d8:	f7ff ffde 	bl	8002398 <HAL_RCC_GetHCLKFreq>
 80023dc:	4602      	mov	r2, r0
 80023de:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	0adb      	lsrs	r3, r3, #11
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	4903      	ldr	r1, [pc, #12]	; (80023f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ea:	5ccb      	ldrb	r3, [r1, r3]
 80023ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40021000 	.word	0x40021000
 80023f8:	08007480 	.word	0x08007480

080023fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002404:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <RCC_Delay+0x34>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a0a      	ldr	r2, [pc, #40]	; (8002434 <RCC_Delay+0x38>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	0a5b      	lsrs	r3, r3, #9
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	fb02 f303 	mul.w	r3, r2, r3
 8002416:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002418:	bf00      	nop
  }
  while (Delay --);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1e5a      	subs	r2, r3, #1
 800241e:	60fa      	str	r2, [r7, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f9      	bne.n	8002418 <RCC_Delay+0x1c>
}
 8002424:	bf00      	nop
 8002426:	bf00      	nop
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	20000028 	.word	0x20000028
 8002434:	10624dd3 	.word	0x10624dd3

08002438 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e041      	b.n	80024ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d106      	bne.n	8002464 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f003 fc86 	bl	8005d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3304      	adds	r3, #4
 8002474:	4619      	mov	r1, r3
 8002476:	4610      	mov	r0, r2
 8002478:	f000 faaa 	bl	80029d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e041      	b.n	800256c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d106      	bne.n	8002502 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 f839 	bl	8002574 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2202      	movs	r2, #2
 8002506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3304      	adds	r3, #4
 8002512:	4619      	mov	r1, r3
 8002514:	4610      	mov	r0, r2
 8002516:	f000 fa5b 	bl	80029d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr
	...

08002588 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d109      	bne.n	80025ac <HAL_TIM_PWM_Start+0x24>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	bf14      	ite	ne
 80025a4:	2301      	movne	r3, #1
 80025a6:	2300      	moveq	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	e022      	b.n	80025f2 <HAL_TIM_PWM_Start+0x6a>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d109      	bne.n	80025c6 <HAL_TIM_PWM_Start+0x3e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	bf14      	ite	ne
 80025be:	2301      	movne	r3, #1
 80025c0:	2300      	moveq	r3, #0
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	e015      	b.n	80025f2 <HAL_TIM_PWM_Start+0x6a>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d109      	bne.n	80025e0 <HAL_TIM_PWM_Start+0x58>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	bf14      	ite	ne
 80025d8:	2301      	movne	r3, #1
 80025da:	2300      	moveq	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	e008      	b.n	80025f2 <HAL_TIM_PWM_Start+0x6a>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	bf14      	ite	ne
 80025ec:	2301      	movne	r3, #1
 80025ee:	2300      	moveq	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e05e      	b.n	80026b8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d104      	bne.n	800260a <HAL_TIM_PWM_Start+0x82>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2202      	movs	r2, #2
 8002604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002608:	e013      	b.n	8002632 <HAL_TIM_PWM_Start+0xaa>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b04      	cmp	r3, #4
 800260e:	d104      	bne.n	800261a <HAL_TIM_PWM_Start+0x92>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2202      	movs	r2, #2
 8002614:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002618:	e00b      	b.n	8002632 <HAL_TIM_PWM_Start+0xaa>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2b08      	cmp	r3, #8
 800261e:	d104      	bne.n	800262a <HAL_TIM_PWM_Start+0xa2>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2202      	movs	r2, #2
 8002624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002628:	e003      	b.n	8002632 <HAL_TIM_PWM_Start+0xaa>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2202      	movs	r2, #2
 800262e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2201      	movs	r2, #1
 8002638:	6839      	ldr	r1, [r7, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f000 fc48 	bl	8002ed0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a1e      	ldr	r2, [pc, #120]	; (80026c0 <HAL_TIM_PWM_Start+0x138>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d107      	bne.n	800265a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002658:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a18      	ldr	r2, [pc, #96]	; (80026c0 <HAL_TIM_PWM_Start+0x138>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d00e      	beq.n	8002682 <HAL_TIM_PWM_Start+0xfa>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266c:	d009      	beq.n	8002682 <HAL_TIM_PWM_Start+0xfa>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a14      	ldr	r2, [pc, #80]	; (80026c4 <HAL_TIM_PWM_Start+0x13c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d004      	beq.n	8002682 <HAL_TIM_PWM_Start+0xfa>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a12      	ldr	r2, [pc, #72]	; (80026c8 <HAL_TIM_PWM_Start+0x140>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d111      	bne.n	80026a6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2b06      	cmp	r3, #6
 8002692:	d010      	beq.n	80026b6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0201 	orr.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026a4:	e007      	b.n	80026b6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 0201 	orr.w	r2, r2, #1
 80026b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40012c00 	.word	0x40012c00
 80026c4:	40000400 	.word	0x40000400
 80026c8:	40000800 	.word	0x40000800

080026cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d101      	bne.n	80026e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e0ac      	b.n	8002840 <HAL_TIM_PWM_ConfigChannel+0x174>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b0c      	cmp	r3, #12
 80026f2:	f200 809f 	bhi.w	8002834 <HAL_TIM_PWM_ConfigChannel+0x168>
 80026f6:	a201      	add	r2, pc, #4	; (adr r2, 80026fc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80026f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fc:	08002731 	.word	0x08002731
 8002700:	08002835 	.word	0x08002835
 8002704:	08002835 	.word	0x08002835
 8002708:	08002835 	.word	0x08002835
 800270c:	08002771 	.word	0x08002771
 8002710:	08002835 	.word	0x08002835
 8002714:	08002835 	.word	0x08002835
 8002718:	08002835 	.word	0x08002835
 800271c:	080027b3 	.word	0x080027b3
 8002720:	08002835 	.word	0x08002835
 8002724:	08002835 	.word	0x08002835
 8002728:	08002835 	.word	0x08002835
 800272c:	080027f3 	.word	0x080027f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68b9      	ldr	r1, [r7, #8]
 8002736:	4618      	mov	r0, r3
 8002738:	f000 f9ac 	bl	8002a94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	699a      	ldr	r2, [r3, #24]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0208 	orr.w	r2, r2, #8
 800274a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	699a      	ldr	r2, [r3, #24]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0204 	bic.w	r2, r2, #4
 800275a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6999      	ldr	r1, [r3, #24]
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	691a      	ldr	r2, [r3, #16]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	619a      	str	r2, [r3, #24]
      break;
 800276e:	e062      	b.n	8002836 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68b9      	ldr	r1, [r7, #8]
 8002776:	4618      	mov	r0, r3
 8002778:	f000 f9f2 	bl	8002b60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	699a      	ldr	r2, [r3, #24]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800278a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	699a      	ldr	r2, [r3, #24]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800279a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6999      	ldr	r1, [r3, #24]
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	021a      	lsls	r2, r3, #8
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	619a      	str	r2, [r3, #24]
      break;
 80027b0:	e041      	b.n	8002836 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68b9      	ldr	r1, [r7, #8]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 fa3b 	bl	8002c34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	69da      	ldr	r2, [r3, #28]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f042 0208 	orr.w	r2, r2, #8
 80027cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	69da      	ldr	r2, [r3, #28]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0204 	bic.w	r2, r2, #4
 80027dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	69d9      	ldr	r1, [r3, #28]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	691a      	ldr	r2, [r3, #16]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	61da      	str	r2, [r3, #28]
      break;
 80027f0:	e021      	b.n	8002836 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68b9      	ldr	r1, [r7, #8]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 fa85 	bl	8002d08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	69da      	ldr	r2, [r3, #28]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800280c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	69da      	ldr	r2, [r3, #28]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800281c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	69d9      	ldr	r1, [r3, #28]
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	021a      	lsls	r2, r3, #8
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	61da      	str	r2, [r3, #28]
      break;
 8002832:	e000      	b.n	8002836 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002834:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_TIM_ConfigClockSource+0x18>
 800285c:	2302      	movs	r3, #2
 800285e:	e0b3      	b.n	80029c8 <HAL_TIM_ConfigClockSource+0x180>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800287e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002886:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002898:	d03e      	beq.n	8002918 <HAL_TIM_ConfigClockSource+0xd0>
 800289a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800289e:	f200 8087 	bhi.w	80029b0 <HAL_TIM_ConfigClockSource+0x168>
 80028a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a6:	f000 8085 	beq.w	80029b4 <HAL_TIM_ConfigClockSource+0x16c>
 80028aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ae:	d87f      	bhi.n	80029b0 <HAL_TIM_ConfigClockSource+0x168>
 80028b0:	2b70      	cmp	r3, #112	; 0x70
 80028b2:	d01a      	beq.n	80028ea <HAL_TIM_ConfigClockSource+0xa2>
 80028b4:	2b70      	cmp	r3, #112	; 0x70
 80028b6:	d87b      	bhi.n	80029b0 <HAL_TIM_ConfigClockSource+0x168>
 80028b8:	2b60      	cmp	r3, #96	; 0x60
 80028ba:	d050      	beq.n	800295e <HAL_TIM_ConfigClockSource+0x116>
 80028bc:	2b60      	cmp	r3, #96	; 0x60
 80028be:	d877      	bhi.n	80029b0 <HAL_TIM_ConfigClockSource+0x168>
 80028c0:	2b50      	cmp	r3, #80	; 0x50
 80028c2:	d03c      	beq.n	800293e <HAL_TIM_ConfigClockSource+0xf6>
 80028c4:	2b50      	cmp	r3, #80	; 0x50
 80028c6:	d873      	bhi.n	80029b0 <HAL_TIM_ConfigClockSource+0x168>
 80028c8:	2b40      	cmp	r3, #64	; 0x40
 80028ca:	d058      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x136>
 80028cc:	2b40      	cmp	r3, #64	; 0x40
 80028ce:	d86f      	bhi.n	80029b0 <HAL_TIM_ConfigClockSource+0x168>
 80028d0:	2b30      	cmp	r3, #48	; 0x30
 80028d2:	d064      	beq.n	800299e <HAL_TIM_ConfigClockSource+0x156>
 80028d4:	2b30      	cmp	r3, #48	; 0x30
 80028d6:	d86b      	bhi.n	80029b0 <HAL_TIM_ConfigClockSource+0x168>
 80028d8:	2b20      	cmp	r3, #32
 80028da:	d060      	beq.n	800299e <HAL_TIM_ConfigClockSource+0x156>
 80028dc:	2b20      	cmp	r3, #32
 80028de:	d867      	bhi.n	80029b0 <HAL_TIM_ConfigClockSource+0x168>
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d05c      	beq.n	800299e <HAL_TIM_ConfigClockSource+0x156>
 80028e4:	2b10      	cmp	r3, #16
 80028e6:	d05a      	beq.n	800299e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80028e8:	e062      	b.n	80029b0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6818      	ldr	r0, [r3, #0]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	6899      	ldr	r1, [r3, #8]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f000 faca 	bl	8002e92 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800290c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	609a      	str	r2, [r3, #8]
      break;
 8002916:	e04e      	b.n	80029b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	6899      	ldr	r1, [r3, #8]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f000 fab3 	bl	8002e92 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800293a:	609a      	str	r2, [r3, #8]
      break;
 800293c:	e03b      	b.n	80029b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	6859      	ldr	r1, [r3, #4]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	461a      	mov	r2, r3
 800294c:	f000 fa2a 	bl	8002da4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2150      	movs	r1, #80	; 0x50
 8002956:	4618      	mov	r0, r3
 8002958:	f000 fa81 	bl	8002e5e <TIM_ITRx_SetConfig>
      break;
 800295c:	e02b      	b.n	80029b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6818      	ldr	r0, [r3, #0]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	6859      	ldr	r1, [r3, #4]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	461a      	mov	r2, r3
 800296c:	f000 fa48 	bl	8002e00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2160      	movs	r1, #96	; 0x60
 8002976:	4618      	mov	r0, r3
 8002978:	f000 fa71 	bl	8002e5e <TIM_ITRx_SetConfig>
      break;
 800297c:	e01b      	b.n	80029b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6859      	ldr	r1, [r3, #4]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	461a      	mov	r2, r3
 800298c:	f000 fa0a 	bl	8002da4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2140      	movs	r1, #64	; 0x40
 8002996:	4618      	mov	r0, r3
 8002998:	f000 fa61 	bl	8002e5e <TIM_ITRx_SetConfig>
      break;
 800299c:	e00b      	b.n	80029b6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4619      	mov	r1, r3
 80029a8:	4610      	mov	r0, r2
 80029aa:	f000 fa58 	bl	8002e5e <TIM_ITRx_SetConfig>
        break;
 80029ae:	e002      	b.n	80029b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80029b0:	bf00      	nop
 80029b2:	e000      	b.n	80029b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80029b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a29      	ldr	r2, [pc, #164]	; (8002a88 <TIM_Base_SetConfig+0xb8>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d00b      	beq.n	8002a00 <TIM_Base_SetConfig+0x30>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ee:	d007      	beq.n	8002a00 <TIM_Base_SetConfig+0x30>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a26      	ldr	r2, [pc, #152]	; (8002a8c <TIM_Base_SetConfig+0xbc>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d003      	beq.n	8002a00 <TIM_Base_SetConfig+0x30>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a25      	ldr	r2, [pc, #148]	; (8002a90 <TIM_Base_SetConfig+0xc0>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d108      	bne.n	8002a12 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a1c      	ldr	r2, [pc, #112]	; (8002a88 <TIM_Base_SetConfig+0xb8>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d00b      	beq.n	8002a32 <TIM_Base_SetConfig+0x62>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a20:	d007      	beq.n	8002a32 <TIM_Base_SetConfig+0x62>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a19      	ldr	r2, [pc, #100]	; (8002a8c <TIM_Base_SetConfig+0xbc>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d003      	beq.n	8002a32 <TIM_Base_SetConfig+0x62>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a18      	ldr	r2, [pc, #96]	; (8002a90 <TIM_Base_SetConfig+0xc0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d108      	bne.n	8002a44 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a07      	ldr	r2, [pc, #28]	; (8002a88 <TIM_Base_SetConfig+0xb8>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d103      	bne.n	8002a78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	691a      	ldr	r2, [r3, #16]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	615a      	str	r2, [r3, #20]
}
 8002a7e:	bf00      	nop
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr
 8002a88:	40012c00 	.word	0x40012c00
 8002a8c:	40000400 	.word	0x40000400
 8002a90:	40000800 	.word	0x40000800

08002a94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	f023 0201 	bic.w	r2, r3, #1
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f023 0303 	bic.w	r3, r3, #3
 8002aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f023 0302 	bic.w	r3, r3, #2
 8002adc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a1c      	ldr	r2, [pc, #112]	; (8002b5c <TIM_OC1_SetConfig+0xc8>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d10c      	bne.n	8002b0a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f023 0308 	bic.w	r3, r3, #8
 8002af6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f023 0304 	bic.w	r3, r3, #4
 8002b08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a13      	ldr	r2, [pc, #76]	; (8002b5c <TIM_OC1_SetConfig+0xc8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d111      	bne.n	8002b36 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	621a      	str	r2, [r3, #32]
}
 8002b50:	bf00      	nop
 8002b52:	371c      	adds	r7, #28
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40012c00 	.word	0x40012c00

08002b60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b087      	sub	sp, #28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	f023 0210 	bic.w	r2, r3, #16
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	021b      	lsls	r3, r3, #8
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	f023 0320 	bic.w	r3, r3, #32
 8002baa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a1d      	ldr	r2, [pc, #116]	; (8002c30 <TIM_OC2_SetConfig+0xd0>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d10d      	bne.n	8002bdc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a14      	ldr	r2, [pc, #80]	; (8002c30 <TIM_OC2_SetConfig+0xd0>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d113      	bne.n	8002c0c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	621a      	str	r2, [r3, #32]
}
 8002c26:	bf00      	nop
 8002c28:	371c      	adds	r7, #28
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr
 8002c30:	40012c00 	.word	0x40012c00

08002c34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b087      	sub	sp, #28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f023 0303 	bic.w	r3, r3, #3
 8002c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	021b      	lsls	r3, r3, #8
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a1d      	ldr	r2, [pc, #116]	; (8002d04 <TIM_OC3_SetConfig+0xd0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d10d      	bne.n	8002cae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	021b      	lsls	r3, r3, #8
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a14      	ldr	r2, [pc, #80]	; (8002d04 <TIM_OC3_SetConfig+0xd0>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d113      	bne.n	8002cde <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	621a      	str	r2, [r3, #32]
}
 8002cf8:	bf00      	nop
 8002cfa:	371c      	adds	r7, #28
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40012c00 	.word	0x40012c00

08002d08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	021b      	lsls	r3, r3, #8
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	031b      	lsls	r3, r3, #12
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a0f      	ldr	r2, [pc, #60]	; (8002da0 <TIM_OC4_SetConfig+0x98>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d109      	bne.n	8002d7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	019b      	lsls	r3, r3, #6
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	621a      	str	r2, [r3, #32]
}
 8002d96:	bf00      	nop
 8002d98:	371c      	adds	r7, #28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr
 8002da0:	40012c00 	.word	0x40012c00

08002da4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b087      	sub	sp, #28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	f023 0201 	bic.w	r2, r3, #1
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f023 030a 	bic.w	r3, r3, #10
 8002de0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	621a      	str	r2, [r3, #32]
}
 8002df6:	bf00      	nop
 8002df8:	371c      	adds	r7, #28
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr

08002e00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	f023 0210 	bic.w	r2, r3, #16
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	031b      	lsls	r3, r3, #12
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	621a      	str	r2, [r3, #32]
}
 8002e54:	bf00      	nop
 8002e56:	371c      	adds	r7, #28
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr

08002e5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b085      	sub	sp, #20
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f043 0307 	orr.w	r3, r3, #7
 8002e80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	609a      	str	r2, [r3, #8]
}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr

08002e92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b087      	sub	sp, #28
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	60f8      	str	r0, [r7, #12]
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	607a      	str	r2, [r7, #4]
 8002e9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	021a      	lsls	r2, r3, #8
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	609a      	str	r2, [r3, #8]
}
 8002ec6:	bf00      	nop
 8002ec8:	371c      	adds	r7, #28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr

08002ed0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b087      	sub	sp, #28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f003 031f 	and.w	r3, r3, #31
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6a1a      	ldr	r2, [r3, #32]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	401a      	ands	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a1a      	ldr	r2, [r3, #32]
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f003 031f 	and.w	r3, r3, #31
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	fa01 f303 	lsl.w	r3, r1, r3
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	621a      	str	r2, [r3, #32]
}
 8002f0e:	bf00      	nop
 8002f10:	371c      	adds	r7, #28
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr

08002f18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	e046      	b.n	8002fbe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a16      	ldr	r2, [pc, #88]	; (8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d00e      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7c:	d009      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a12      	ldr	r2, [pc, #72]	; (8002fcc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d004      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a10      	ldr	r2, [pc, #64]	; (8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d10c      	bne.n	8002fac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr
 8002fc8:	40012c00 	.word	0x40012c00
 8002fcc:	40000400 	.word	0x40000400
 8002fd0:	40000800 	.word	0x40000800

08002fd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e03f      	b.n	8003066 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f002 ff84 	bl	8005f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2224      	movs	r2, #36	; 0x24
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003016:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 fe6f 	bl	8003cfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800302c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695a      	ldr	r2, [r3, #20]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800303c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800304c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b08a      	sub	sp, #40	; 0x28
 8003072:	af02      	add	r7, sp, #8
 8003074:	60f8      	str	r0, [r7, #12]
 8003076:	60b9      	str	r1, [r7, #8]
 8003078:	603b      	str	r3, [r7, #0]
 800307a:	4613      	mov	r3, r2
 800307c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b20      	cmp	r3, #32
 800308c:	d17c      	bne.n	8003188 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d002      	beq.n	800309a <HAL_UART_Transmit+0x2c>
 8003094:	88fb      	ldrh	r3, [r7, #6]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e075      	b.n	800318a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d101      	bne.n	80030ac <HAL_UART_Transmit+0x3e>
 80030a8:	2302      	movs	r3, #2
 80030aa:	e06e      	b.n	800318a <HAL_UART_Transmit+0x11c>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2221      	movs	r2, #33	; 0x21
 80030be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030c2:	f7fd fdd3 	bl	8000c6c <HAL_GetTick>
 80030c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	88fa      	ldrh	r2, [r7, #6]
 80030cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	88fa      	ldrh	r2, [r7, #6]
 80030d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030dc:	d108      	bne.n	80030f0 <HAL_UART_Transmit+0x82>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d104      	bne.n	80030f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	61bb      	str	r3, [r7, #24]
 80030ee:	e003      	b.n	80030f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003100:	e02a      	b.n	8003158 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2200      	movs	r2, #0
 800310a:	2180      	movs	r1, #128	; 0x80
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 fba8 	bl	8003862 <UART_WaitOnFlagUntilTimeout>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e036      	b.n	800318a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10b      	bne.n	800313a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	461a      	mov	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003130:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	3302      	adds	r3, #2
 8003136:	61bb      	str	r3, [r7, #24]
 8003138:	e007      	b.n	800314a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	781a      	ldrb	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	3301      	adds	r3, #1
 8003148:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800314e:	b29b      	uxth	r3, r3
 8003150:	3b01      	subs	r3, #1
 8003152:	b29a      	uxth	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800315c:	b29b      	uxth	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1cf      	bne.n	8003102 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2200      	movs	r2, #0
 800316a:	2140      	movs	r1, #64	; 0x40
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 fb78 	bl	8003862 <UART_WaitOnFlagUntilTimeout>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e006      	b.n	800318a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003184:	2300      	movs	r3, #0
 8003186:	e000      	b.n	800318a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003188:	2302      	movs	r3, #2
  }
}
 800318a:	4618      	mov	r0, r3
 800318c:	3720      	adds	r7, #32
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b084      	sub	sp, #16
 8003196:	af00      	add	r7, sp, #0
 8003198:	60f8      	str	r0, [r7, #12]
 800319a:	60b9      	str	r1, [r7, #8]
 800319c:	4613      	mov	r3, r2
 800319e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b20      	cmp	r3, #32
 80031aa:	d11d      	bne.n	80031e8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d002      	beq.n	80031b8 <HAL_UART_Receive_IT+0x26>
 80031b2:	88fb      	ldrh	r3, [r7, #6]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e016      	b.n	80031ea <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d101      	bne.n	80031ca <HAL_UART_Receive_IT+0x38>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e00f      	b.n	80031ea <HAL_UART_Receive_IT+0x58>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80031d8:	88fb      	ldrh	r3, [r7, #6]
 80031da:	461a      	mov	r2, r3
 80031dc:	68b9      	ldr	r1, [r7, #8]
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 fb89 	bl	80038f6 <UART_Start_Receive_IT>
 80031e4:	4603      	mov	r3, r0
 80031e6:	e000      	b.n	80031ea <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80031e8:	2302      	movs	r3, #2
  }
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b084      	sub	sp, #16
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	60f8      	str	r0, [r7, #12]
 80031fa:	60b9      	str	r1, [r7, #8]
 80031fc:	4613      	mov	r3, r2
 80031fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b20      	cmp	r3, #32
 800320a:	d11d      	bne.n	8003248 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d002      	beq.n	8003218 <HAL_UART_Receive_DMA+0x26>
 8003212:	88fb      	ldrh	r3, [r7, #6]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e016      	b.n	800324a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003222:	2b01      	cmp	r3, #1
 8003224:	d101      	bne.n	800322a <HAL_UART_Receive_DMA+0x38>
 8003226:	2302      	movs	r3, #2
 8003228:	e00f      	b.n	800324a <HAL_UART_Receive_DMA+0x58>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8003238:	88fb      	ldrh	r3, [r7, #6]
 800323a:	461a      	mov	r2, r3
 800323c:	68b9      	ldr	r1, [r7, #8]
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 fb92 	bl	8003968 <UART_Start_Receive_DMA>
 8003244:	4603      	mov	r3, r0
 8003246:	e000      	b.n	800324a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003248:	2302      	movs	r3, #2
  }
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b082      	sub	sp, #8
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68da      	ldr	r2, [r3, #12]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8003268:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	695a      	ldr	r2, [r3, #20]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0201 	bic.w	r2, r2, #1
 8003278:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	2b01      	cmp	r3, #1
 8003280:	d107      	bne.n	8003292 <HAL_UART_Abort+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0210 	bic.w	r2, r2, #16
 8003290:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800329c:	2b00      	cmp	r3, #0
 800329e:	d024      	beq.n	80032ea <HAL_UART_Abort+0x98>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695a      	ldr	r2, [r3, #20]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032ae:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d018      	beq.n	80032ea <HAL_UART_Abort+0x98>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032bc:	2200      	movs	r2, #0
 80032be:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fd fee2 	bl	800108e <HAL_DMA_Abort>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00c      	beq.n	80032ea <HAL_UART_Abort+0x98>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7fe f891 	bl	80013fc <HAL_DMA_GetError>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b20      	cmp	r3, #32
 80032de:	d104      	bne.n	80032ea <HAL_UART_Abort+0x98>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2210      	movs	r2, #16
 80032e4:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e040      	b.n	800336c <HAL_UART_Abort+0x11a>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d024      	beq.n	8003342 <HAL_UART_Abort+0xf0>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695a      	ldr	r2, [r3, #20]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003306:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	2b00      	cmp	r3, #0
 800330e:	d018      	beq.n	8003342 <HAL_UART_Abort+0xf0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003314:	2200      	movs	r2, #0
 8003316:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	4618      	mov	r0, r3
 800331e:	f7fd feb6 	bl	800108e <HAL_DMA_Abort>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00c      	beq.n	8003342 <HAL_UART_Abort+0xf0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332c:	4618      	mov	r0, r3
 800332e:	f7fe f865 	bl	80013fc <HAL_DMA_GetError>
 8003332:	4603      	mov	r3, r0
 8003334:	2b20      	cmp	r3, #32
 8003336:	d104      	bne.n	8003342 <HAL_UART_Abort+0xf0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2210      	movs	r2, #16
 800333c:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e014      	b.n	800336c <HAL_UART_Abort+0x11a>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08a      	sub	sp, #40	; 0x28
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003394:	2300      	movs	r3, #0
 8003396:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003398:	2300      	movs	r3, #0
 800339a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10d      	bne.n	80033c6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	f003 0320 	and.w	r3, r3, #32
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <HAL_UART_IRQHandler+0x52>
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	f003 0320 	and.w	r3, r3, #32
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fbf2 	bl	8003ba8 <UART_Receive_IT>
      return;
 80033c4:	e17b      	b.n	80036be <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 80b1 	beq.w	8003530 <HAL_UART_IRQHandler+0x1bc>
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d105      	bne.n	80033e4 <HAL_UART_IRQHandler+0x70>
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 80a6 	beq.w	8003530 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00a      	beq.n	8003404 <HAL_UART_IRQHandler+0x90>
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d005      	beq.n	8003404 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	f043 0201 	orr.w	r2, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00a      	beq.n	8003424 <HAL_UART_IRQHandler+0xb0>
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b00      	cmp	r3, #0
 8003416:	d005      	beq.n	8003424 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	f043 0202 	orr.w	r2, r3, #2
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <HAL_UART_IRQHandler+0xd0>
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	f043 0204 	orr.w	r2, r3, #4
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00f      	beq.n	800346e <HAL_UART_IRQHandler+0xfa>
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	f003 0320 	and.w	r3, r3, #32
 8003454:	2b00      	cmp	r3, #0
 8003456:	d104      	bne.n	8003462 <HAL_UART_IRQHandler+0xee>
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d005      	beq.n	800346e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f043 0208 	orr.w	r2, r3, #8
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 811e 	beq.w	80036b4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	f003 0320 	and.w	r3, r3, #32
 800347e:	2b00      	cmp	r3, #0
 8003480:	d007      	beq.n	8003492 <HAL_UART_IRQHandler+0x11e>
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	f003 0320 	and.w	r3, r3, #32
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fb8b 	bl	8003ba8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349c:	2b00      	cmp	r3, #0
 800349e:	bf14      	ite	ne
 80034a0:	2301      	movne	r3, #1
 80034a2:	2300      	moveq	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d102      	bne.n	80034ba <HAL_UART_IRQHandler+0x146>
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d031      	beq.n	800351e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 facd 	bl	8003a5a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d023      	beq.n	8003516 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695a      	ldr	r2, [r3, #20]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034dc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d013      	beq.n	800350e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ea:	4a76      	ldr	r2, [pc, #472]	; (80036c4 <HAL_UART_IRQHandler+0x350>)
 80034ec:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fd fe06 	bl	8001104 <HAL_DMA_Abort_IT>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d016      	beq.n	800352c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003508:	4610      	mov	r0, r2
 800350a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800350c:	e00e      	b.n	800352c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 ff3c 	bl	800438c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003514:	e00a      	b.n	800352c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 ff38 	bl	800438c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800351c:	e006      	b.n	800352c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 ff34 	bl	800438c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800352a:	e0c3      	b.n	80036b4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800352c:	bf00      	nop
    return;
 800352e:	e0c1      	b.n	80036b4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	2b01      	cmp	r3, #1
 8003536:	f040 80a1 	bne.w	800367c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 809b 	beq.w	800367c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	f003 0310 	and.w	r3, r3, #16
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 8095 	beq.w	800367c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003572:	2b00      	cmp	r3, #0
 8003574:	d04e      	beq.n	8003614 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003580:	8a3b      	ldrh	r3, [r7, #16]
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 8098 	beq.w	80036b8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800358c:	8a3a      	ldrh	r2, [r7, #16]
 800358e:	429a      	cmp	r2, r3
 8003590:	f080 8092 	bcs.w	80036b8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	8a3a      	ldrh	r2, [r7, #16]
 8003598:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	2b20      	cmp	r3, #32
 80035a2:	d02b      	beq.n	80035fc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035b2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695a      	ldr	r2, [r3, #20]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0201 	bic.w	r2, r2, #1
 80035c2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695a      	ldr	r2, [r3, #20]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035d2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0210 	bic.w	r2, r2, #16
 80035f0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fd fd49 	bl	800108e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003604:	b29b      	uxth	r3, r3
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	b29b      	uxth	r3, r3
 800360a:	4619      	mov	r1, r3
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f86d 	bl	80036ec <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003612:	e051      	b.n	80036b8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800361c:	b29b      	uxth	r3, r3
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003626:	b29b      	uxth	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	d047      	beq.n	80036bc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800362c:	8a7b      	ldrh	r3, [r7, #18]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d044      	beq.n	80036bc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003640:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695a      	ldr	r2, [r3, #20]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0201 	bic.w	r2, r2, #1
 8003650:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2220      	movs	r2, #32
 8003656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0210 	bic.w	r2, r2, #16
 800366e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003670:	8a7b      	ldrh	r3, [r7, #18]
 8003672:	4619      	mov	r1, r3
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f839 	bl	80036ec <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800367a:	e01f      	b.n	80036bc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003682:	2b00      	cmp	r3, #0
 8003684:	d008      	beq.n	8003698 <HAL_UART_IRQHandler+0x324>
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 fa22 	bl	8003ada <UART_Transmit_IT>
    return;
 8003696:	e012      	b.n	80036be <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00d      	beq.n	80036be <HAL_UART_IRQHandler+0x34a>
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 fa63 	bl	8003b78 <UART_EndTransmit_IT>
    return;
 80036b2:	e004      	b.n	80036be <HAL_UART_IRQHandler+0x34a>
    return;
 80036b4:	bf00      	nop
 80036b6:	e002      	b.n	80036be <HAL_UART_IRQHandler+0x34a>
      return;
 80036b8:	bf00      	nop
 80036ba:	e000      	b.n	80036be <HAL_UART_IRQHandler+0x34a>
      return;
 80036bc:	bf00      	nop
  }
}
 80036be:	3728      	adds	r7, #40	; 0x28
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	08003ab3 	.word	0x08003ab3

080036c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr

080036da <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr

080036ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	460b      	mov	r3, r1
 80036f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bc80      	pop	{r7}
 8003700:	4770      	bx	lr

08003702 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b084      	sub	sp, #16
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0320 	and.w	r3, r3, #32
 800371a:	2b00      	cmp	r3, #0
 800371c:	d12a      	bne.n	8003774 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003732:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695a      	ldr	r2, [r3, #20]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0201 	bic.w	r2, r2, #1
 8003742:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695a      	ldr	r2, [r3, #20]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003752:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2220      	movs	r2, #32
 8003758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003760:	2b01      	cmp	r3, #1
 8003762:	d107      	bne.n	8003774 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0210 	bic.w	r2, r2, #16
 8003772:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003778:	2b01      	cmp	r3, #1
 800377a:	d106      	bne.n	800378a <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003780:	4619      	mov	r1, r3
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f7ff ffb2 	bl	80036ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003788:	e002      	b.n	8003790 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f000 fe08 	bl	80043a0 <HAL_UART_RxCpltCallback>
}
 8003790:	bf00      	nop
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d108      	bne.n	80037c0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037b2:	085b      	lsrs	r3, r3, #1
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	4619      	mov	r1, r3
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f7ff ff97 	bl	80036ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80037be:	e002      	b.n	80037c6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f7ff ff8a 	bl	80036da <HAL_UART_RxHalfCpltCallback>
}
 80037c6:	bf00      	nop
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b084      	sub	sp, #16
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037de:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	bf14      	ite	ne
 80037ee:	2301      	movne	r3, #1
 80037f0:	2300      	moveq	r3, #0
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b21      	cmp	r3, #33	; 0x21
 8003800:	d108      	bne.n	8003814 <UART_DMAError+0x46>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2200      	movs	r2, #0
 800380c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800380e:	68b8      	ldr	r0, [r7, #8]
 8003810:	f000 f90e 	bl	8003a30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381e:	2b00      	cmp	r3, #0
 8003820:	bf14      	ite	ne
 8003822:	2301      	movne	r3, #1
 8003824:	2300      	moveq	r3, #0
 8003826:	b2db      	uxtb	r3, r3
 8003828:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b22      	cmp	r3, #34	; 0x22
 8003834:	d108      	bne.n	8003848 <UART_DMAError+0x7a>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d005      	beq.n	8003848 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2200      	movs	r2, #0
 8003840:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003842:	68b8      	ldr	r0, [r7, #8]
 8003844:	f000 f909 	bl	8003a5a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	f043 0210 	orr.w	r2, r3, #16
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003854:	68b8      	ldr	r0, [r7, #8]
 8003856:	f000 fd99 	bl	800438c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800385a:	bf00      	nop
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b084      	sub	sp, #16
 8003866:	af00      	add	r7, sp, #0
 8003868:	60f8      	str	r0, [r7, #12]
 800386a:	60b9      	str	r1, [r7, #8]
 800386c:	603b      	str	r3, [r7, #0]
 800386e:	4613      	mov	r3, r2
 8003870:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003872:	e02c      	b.n	80038ce <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387a:	d028      	beq.n	80038ce <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d007      	beq.n	8003892 <UART_WaitOnFlagUntilTimeout+0x30>
 8003882:	f7fd f9f3 	bl	8000c6c <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	429a      	cmp	r2, r3
 8003890:	d21d      	bcs.n	80038ce <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68da      	ldr	r2, [r3, #12]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038a0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	695a      	ldr	r2, [r3, #20]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0201 	bic.w	r2, r2, #1
 80038b0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2220      	movs	r2, #32
 80038b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2220      	movs	r2, #32
 80038be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e00f      	b.n	80038ee <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4013      	ands	r3, r2
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	429a      	cmp	r2, r3
 80038dc:	bf0c      	ite	eq
 80038de:	2301      	moveq	r3, #1
 80038e0:	2300      	movne	r3, #0
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	461a      	mov	r2, r3
 80038e6:	79fb      	ldrb	r3, [r7, #7]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d0c3      	beq.n	8003874 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b085      	sub	sp, #20
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	4613      	mov	r3, r2
 8003902:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	88fa      	ldrh	r2, [r7, #6]
 800390e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	88fa      	ldrh	r2, [r7, #6]
 8003914:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2222      	movs	r2, #34	; 0x22
 8003920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800393a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695a      	ldr	r2, [r3, #20]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0201 	orr.w	r2, r2, #1
 800394a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0220 	orr.w	r2, r2, #32
 800395a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr

08003968 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	4613      	mov	r3, r2
 8003974:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	88fa      	ldrh	r2, [r7, #6]
 8003980:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2222      	movs	r2, #34	; 0x22
 800398c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003994:	4a23      	ldr	r2, [pc, #140]	; (8003a24 <UART_Start_Receive_DMA+0xbc>)
 8003996:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399c:	4a22      	ldr	r2, [pc, #136]	; (8003a28 <UART_Start_Receive_DMA+0xc0>)
 800399e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a4:	4a21      	ldr	r2, [pc, #132]	; (8003a2c <UART_Start_Receive_DMA+0xc4>)
 80039a6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ac:	2200      	movs	r2, #0
 80039ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80039b0:	f107 0308 	add.w	r3, r7, #8
 80039b4:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3304      	adds	r3, #4
 80039c0:	4619      	mov	r1, r3
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	88fb      	ldrh	r3, [r7, #6]
 80039c8:	f7fd fb02 	bl	8000fd0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80039cc:	2300      	movs	r3, #0
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	613b      	str	r3, [r7, #16]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	613b      	str	r3, [r7, #16]
 80039e0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68da      	ldr	r2, [r3, #12]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039f8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695a      	ldr	r2, [r3, #20]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f042 0201 	orr.w	r2, r2, #1
 8003a08:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695a      	ldr	r2, [r3, #20]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a18:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3718      	adds	r7, #24
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	08003703 	.word	0x08003703
 8003a28:	08003799 	.word	0x08003799
 8003a2c:	080037cf 	.word	0x080037cf

08003a30 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003a46:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr

08003a5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68da      	ldr	r2, [r3, #12]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a70:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695a      	ldr	r2, [r3, #20]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0201 	bic.w	r2, r2, #1
 8003a80:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d107      	bne.n	8003a9a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0210 	bic.w	r2, r2, #16
 8003a98:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc80      	pop	{r7}
 8003ab0:	4770      	bx	lr

08003ab2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b084      	sub	sp, #16
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 fc5d 	bl	800438c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ad2:	bf00      	nop
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b085      	sub	sp, #20
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b21      	cmp	r3, #33	; 0x21
 8003aec:	d13e      	bne.n	8003b6c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af6:	d114      	bne.n	8003b22 <UART_Transmit_IT+0x48>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d110      	bne.n	8003b22 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b14:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	1c9a      	adds	r2, r3, #2
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	621a      	str	r2, [r3, #32]
 8003b20:	e008      	b.n	8003b34 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	1c59      	adds	r1, r3, #1
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6211      	str	r1, [r2, #32]
 8003b2c:	781a      	ldrb	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	4619      	mov	r1, r3
 8003b42:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10f      	bne.n	8003b68 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68da      	ldr	r2, [r3, #12]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b56:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b66:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	e000      	b.n	8003b6e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b6c:	2302      	movs	r3, #2
  }
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr

08003b78 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b8e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7ff fd95 	bl	80036c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b22      	cmp	r3, #34	; 0x22
 8003bba:	f040 8099 	bne.w	8003cf0 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc6:	d117      	bne.n	8003bf8 <UART_Receive_IT+0x50>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d113      	bne.n	8003bf8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf0:	1c9a      	adds	r2, r3, #2
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	629a      	str	r2, [r3, #40]	; 0x28
 8003bf6:	e026      	b.n	8003c46 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfc:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c0a:	d007      	beq.n	8003c1c <UART_Receive_IT+0x74>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10a      	bne.n	8003c2a <UART_Receive_IT+0x82>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d106      	bne.n	8003c2a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	701a      	strb	r2, [r3, #0]
 8003c28:	e008      	b.n	8003c3c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c40:	1c5a      	adds	r2, r3, #1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	4619      	mov	r1, r3
 8003c54:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d148      	bne.n	8003cec <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68da      	ldr	r2, [r3, #12]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0220 	bic.w	r2, r2, #32
 8003c68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695a      	ldr	r2, [r3, #20]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0201 	bic.w	r2, r2, #1
 8003c88:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d123      	bne.n	8003ce2 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0210 	bic.w	r2, r2, #16
 8003cae:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0310 	and.w	r3, r3, #16
 8003cba:	2b10      	cmp	r3, #16
 8003cbc:	d10a      	bne.n	8003cd4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cd8:	4619      	mov	r1, r3
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7ff fd06 	bl	80036ec <HAL_UARTEx_RxEventCallback>
 8003ce0:	e002      	b.n	8003ce8 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 fb5c 	bl	80043a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	e002      	b.n	8003cf2 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003cec:	2300      	movs	r3, #0
 8003cee:	e000      	b.n	8003cf2 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003cf0:	2302      	movs	r3, #2
  }
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
	...

08003cfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003d36:	f023 030c 	bic.w	r3, r3, #12
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6812      	ldr	r2, [r2, #0]
 8003d3e:	68b9      	ldr	r1, [r7, #8]
 8003d40:	430b      	orrs	r3, r1
 8003d42:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a2c      	ldr	r2, [pc, #176]	; (8003e10 <UART_SetConfig+0x114>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d103      	bne.n	8003d6c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d64:	f7fe fb36 	bl	80023d4 <HAL_RCC_GetPCLK2Freq>
 8003d68:	60f8      	str	r0, [r7, #12]
 8003d6a:	e002      	b.n	8003d72 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d6c:	f7fe fb1e 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 8003d70:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	4613      	mov	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4413      	add	r3, r2
 8003d7a:	009a      	lsls	r2, r3, #2
 8003d7c:	441a      	add	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d88:	4a22      	ldr	r2, [pc, #136]	; (8003e14 <UART_SetConfig+0x118>)
 8003d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8e:	095b      	lsrs	r3, r3, #5
 8003d90:	0119      	lsls	r1, r3, #4
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	009a      	lsls	r2, r3, #2
 8003d9c:	441a      	add	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003da8:	4b1a      	ldr	r3, [pc, #104]	; (8003e14 <UART_SetConfig+0x118>)
 8003daa:	fba3 0302 	umull	r0, r3, r3, r2
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	2064      	movs	r0, #100	; 0x64
 8003db2:	fb00 f303 	mul.w	r3, r0, r3
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	3332      	adds	r3, #50	; 0x32
 8003dbc:	4a15      	ldr	r2, [pc, #84]	; (8003e14 <UART_SetConfig+0x118>)
 8003dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc2:	095b      	lsrs	r3, r3, #5
 8003dc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dc8:	4419      	add	r1, r3
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009a      	lsls	r2, r3, #2
 8003dd4:	441a      	add	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003de0:	4b0c      	ldr	r3, [pc, #48]	; (8003e14 <UART_SetConfig+0x118>)
 8003de2:	fba3 0302 	umull	r0, r3, r3, r2
 8003de6:	095b      	lsrs	r3, r3, #5
 8003de8:	2064      	movs	r0, #100	; 0x64
 8003dea:	fb00 f303 	mul.w	r3, r0, r3
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	3332      	adds	r3, #50	; 0x32
 8003df4:	4a07      	ldr	r2, [pc, #28]	; (8003e14 <UART_SetConfig+0x118>)
 8003df6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	f003 020f 	and.w	r2, r3, #15
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	440a      	add	r2, r1
 8003e06:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003e08:	bf00      	nop
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40013800 	.word	0x40013800
 8003e14:	51eb851f 	.word	0x51eb851f

08003e18 <Bluetooth_Find_Rx_Length>:
	uint16_t commands;
	uint8_t *symbols;
	uint8_t *lengths;
}bluetooth_rx;

uint8_t Bluetooth_Find_Rx_Length(uint8_t rx_symbol){
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	4603      	mov	r3, r0
 8003e20:	71fb      	strb	r3, [r7, #7]
	//Find command length by symbol
	uint8_t i = 0;
 8003e22:	2300      	movs	r3, #0
 8003e24:	73fb      	strb	r3, [r7, #15]
	while(i != bluetooth_rx.commands){
 8003e26:	e00d      	b.n	8003e44 <Bluetooth_Find_Rx_Length+0x2c>
		if(bluetooth_rx.symbols[i] == rx_symbol){
 8003e28:	4b0d      	ldr	r3, [pc, #52]	; (8003e60 <Bluetooth_Find_Rx_Length+0x48>)
 8003e2a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8003e2e:	7bfb      	ldrb	r3, [r7, #15]
 8003e30:	4413      	add	r3, r2
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	79fa      	ldrb	r2, [r7, #7]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d101      	bne.n	8003e3e <Bluetooth_Find_Rx_Length+0x26>
			return i;
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	e00a      	b.n	8003e54 <Bluetooth_Find_Rx_Length+0x3c>
		}
		i++;
 8003e3e:	7bfb      	ldrb	r3, [r7, #15]
 8003e40:	3301      	adds	r3, #1
 8003e42:	73fb      	strb	r3, [r7, #15]
	while(i != bluetooth_rx.commands){
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <Bluetooth_Find_Rx_Length+0x48>)
 8003e4a:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d1ea      	bne.n	8003e28 <Bluetooth_Find_Rx_Length+0x10>
	}
	return i;
 8003e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	200008b0 	.word	0x200008b0

08003e64 <Bluetooth_Connected_Debounce>:
uint8_t Bluetooth_Connected_Debounce(){
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
	uint8_t level;
	uint8_t d = 0;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	717b      	strb	r3, [r7, #5]
	while(d != 1){
 8003e72:	e01f      	b.n	8003eb4 <Bluetooth_Connected_Debounce+0x50>
		i = 0;
 8003e74:	2300      	movs	r3, #0
 8003e76:	717b      	strb	r3, [r7, #5]
		level = HAL_GPIO_ReadPin(BT_STAT_GPIO_Port, BT_STAT_Pin);
 8003e78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e7c:	4811      	ldr	r0, [pc, #68]	; (8003ec4 <Bluetooth_Connected_Debounce+0x60>)
 8003e7e:	f7fd fe79 	bl	8001b74 <HAL_GPIO_ReadPin>
 8003e82:	4603      	mov	r3, r0
 8003e84:	71fb      	strb	r3, [r7, #7]
		while(i != BT_STAT_DEBOUNCE_SAMPLES){
 8003e86:	e012      	b.n	8003eae <Bluetooth_Connected_Debounce+0x4a>
			i++;
 8003e88:	797b      	ldrb	r3, [r7, #5]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	717b      	strb	r3, [r7, #5]
			if(HAL_GPIO_ReadPin(BT_STAT_GPIO_Port, BT_STAT_Pin) != level){
 8003e8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e92:	480c      	ldr	r0, [pc, #48]	; (8003ec4 <Bluetooth_Connected_Debounce+0x60>)
 8003e94:	f7fd fe6e 	bl	8001b74 <HAL_GPIO_ReadPin>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	79fb      	ldrb	r3, [r7, #7]
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d000      	beq.n	8003ea4 <Bluetooth_Connected_Debounce+0x40>
				break;
 8003ea2:	e007      	b.n	8003eb4 <Bluetooth_Connected_Debounce+0x50>
			}
			if(i == BT_STAT_DEBOUNCE_SAMPLES){
 8003ea4:	797b      	ldrb	r3, [r7, #5]
 8003ea6:	2b0a      	cmp	r3, #10
 8003ea8:	d101      	bne.n	8003eae <Bluetooth_Connected_Debounce+0x4a>
				d = 1;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	71bb      	strb	r3, [r7, #6]
		while(i != BT_STAT_DEBOUNCE_SAMPLES){
 8003eae:	797b      	ldrb	r3, [r7, #5]
 8003eb0:	2b0a      	cmp	r3, #10
 8003eb2:	d1e9      	bne.n	8003e88 <Bluetooth_Connected_Debounce+0x24>
	while(d != 1){
 8003eb4:	79bb      	ldrb	r3, [r7, #6]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d1dc      	bne.n	8003e74 <Bluetooth_Connected_Debounce+0x10>
			}
		}
	}
	return level;
 8003eba:	79fb      	ldrb	r3, [r7, #7]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40010800 	.word	0x40010800

08003ec8 <Bluetooth_Connected>:
uint8_t Bluetooth_Connected(){
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(BT_STAT_GPIO_Port, BT_STAT_Pin) == GPIO_PIN_SET){
 8003ecc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ed0:	4805      	ldr	r0, [pc, #20]	; (8003ee8 <Bluetooth_Connected+0x20>)
 8003ed2:	f7fd fe4f 	bl	8001b74 <HAL_GPIO_ReadPin>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d101      	bne.n	8003ee0 <Bluetooth_Connected+0x18>
		return 1;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e000      	b.n	8003ee2 <Bluetooth_Connected+0x1a>
	}
	return 0;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40010800 	.word	0x40010800

08003eec <Bluetooth_SysTick>:
void Bluetooth_SysTick(){
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
	if(bluetooth_rx.receiving){
 8003ef0:	4b08      	ldr	r3, [pc, #32]	; (8003f14 <Bluetooth_SysTick+0x28>)
 8003ef2:	789b      	ldrb	r3, [r3, #2]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00b      	beq.n	8003f10 <Bluetooth_SysTick+0x24>
		if(bluetooth_rx.receiving_ms < BLUETOOTH_RX_TIMEOUT_MS){
 8003ef8:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <Bluetooth_SysTick+0x28>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	2b63      	cmp	r3, #99	; 0x63
 8003efe:	d805      	bhi.n	8003f0c <Bluetooth_SysTick+0x20>
			bluetooth_rx.receiving_ms++;
 8003f00:	4b04      	ldr	r3, [pc, #16]	; (8003f14 <Bluetooth_SysTick+0x28>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	3301      	adds	r3, #1
 8003f06:	4a03      	ldr	r2, [pc, #12]	; (8003f14 <Bluetooth_SysTick+0x28>)
 8003f08:	6053      	str	r3, [r2, #4]
		}else{
			Bluetooth_Listen();
		}
	}
}
 8003f0a:	e001      	b.n	8003f10 <Bluetooth_SysTick+0x24>
			Bluetooth_Listen();
 8003f0c:	f000 f882 	bl	8004014 <Bluetooth_Listen>
}
 8003f10:	bf00      	nop
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	200008b0 	.word	0x200008b0

08003f18 <Bluetooth_Interrupt>:
void Bluetooth_Interrupt(){
 8003f18:	b590      	push	{r4, r7, lr}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
	uint8_t tmp;
	switch(bluetooth_rx.cnt){
 8003f1e:	4b39      	ldr	r3, [pc, #228]	; (8004004 <Bluetooth_Interrupt+0xec>)
 8003f20:	785b      	ldrb	r3, [r3, #1]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d056      	beq.n	8003fd4 <Bluetooth_Interrupt+0xbc>
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	dc68      	bgt.n	8003ffc <Bluetooth_Interrupt+0xe4>
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <Bluetooth_Interrupt+0x1c>
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d019      	beq.n	8003f66 <Bluetooth_Interrupt+0x4e>
			bluetooth_rx.cnt = bluetooth_rx.lengths[Bluetooth_Find_Rx_Length(bluetooth_rx.data[1])];
			bluetooth_rx.receiving = 0;
			bluetooth_rx.ready = 1;
		break;
	}
}
 8003f32:	e063      	b.n	8003ffc <Bluetooth_Interrupt+0xe4>
			if(bluetooth_rx.data[0] == bluetooth_rx.command_symbol){
 8003f34:	4b33      	ldr	r3, [pc, #204]	; (8004004 <Bluetooth_Interrupt+0xec>)
 8003f36:	7a1a      	ldrb	r2, [r3, #8]
 8003f38:	4b32      	ldr	r3, [pc, #200]	; (8004004 <Bluetooth_Interrupt+0xec>)
 8003f3a:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d10e      	bne.n	8003f60 <Bluetooth_Interrupt+0x48>
				bluetooth_rx.cnt = 1;
 8003f42:	4b30      	ldr	r3, [pc, #192]	; (8004004 <Bluetooth_Interrupt+0xec>)
 8003f44:	2201      	movs	r2, #1
 8003f46:	705a      	strb	r2, [r3, #1]
				bluetooth_rx.receiving_ms = 0;
 8003f48:	4b2e      	ldr	r3, [pc, #184]	; (8004004 <Bluetooth_Interrupt+0xec>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	605a      	str	r2, [r3, #4]
				bluetooth_rx.receiving = 1;
 8003f4e:	4b2d      	ldr	r3, [pc, #180]	; (8004004 <Bluetooth_Interrupt+0xec>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	709a      	strb	r2, [r3, #2]
				HAL_UART_Receive_IT(&huart1, &bluetooth_rx.data[1], 1);
 8003f54:	2201      	movs	r2, #1
 8003f56:	492c      	ldr	r1, [pc, #176]	; (8004008 <Bluetooth_Interrupt+0xf0>)
 8003f58:	482c      	ldr	r0, [pc, #176]	; (800400c <Bluetooth_Interrupt+0xf4>)
 8003f5a:	f7ff f91a 	bl	8003192 <HAL_UART_Receive_IT>
		break;
 8003f5e:	e04d      	b.n	8003ffc <Bluetooth_Interrupt+0xe4>
				Bluetooth_Listen();
 8003f60:	f000 f858 	bl	8004014 <Bluetooth_Listen>
		break;
 8003f64:	e04a      	b.n	8003ffc <Bluetooth_Interrupt+0xe4>
			tmp = Bluetooth_Find_Rx_Length(bluetooth_rx.data[1]);
 8003f66:	4b27      	ldr	r3, [pc, #156]	; (8004004 <Bluetooth_Interrupt+0xec>)
 8003f68:	7a5b      	ldrb	r3, [r3, #9]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff ff54 	bl	8003e18 <Bluetooth_Find_Rx_Length>
 8003f70:	4603      	mov	r3, r0
 8003f72:	71fb      	strb	r3, [r7, #7]
			if(tmp != bluetooth_rx.commands){
 8003f74:	79fb      	ldrb	r3, [r7, #7]
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	4b22      	ldr	r3, [pc, #136]	; (8004004 <Bluetooth_Interrupt+0xec>)
 8003f7a:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d025      	beq.n	8003fce <Bluetooth_Interrupt+0xb6>
				bluetooth_rx.cnt = 2;
 8003f82:	4b20      	ldr	r3, [pc, #128]	; (8004004 <Bluetooth_Interrupt+0xec>)
 8003f84:	2202      	movs	r2, #2
 8003f86:	705a      	strb	r2, [r3, #1]
				if(bluetooth_rx.lengths[tmp] - bluetooth_rx.cnt){
 8003f88:	4b1e      	ldr	r3, [pc, #120]	; (8004004 <Bluetooth_Interrupt+0xec>)
 8003f8a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8003f8e:	79fb      	ldrb	r3, [r7, #7]
 8003f90:	4413      	add	r3, r2
 8003f92:	781a      	ldrb	r2, [r3, #0]
 8003f94:	4b1b      	ldr	r3, [pc, #108]	; (8004004 <Bluetooth_Interrupt+0xec>)
 8003f96:	785b      	ldrb	r3, [r3, #1]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d011      	beq.n	8003fc0 <Bluetooth_Interrupt+0xa8>
					HAL_UART_Receive_DMA(&huart1, &bluetooth_rx.data[2], bluetooth_rx.lengths[tmp] - bluetooth_rx.cnt);
 8003f9c:	4b19      	ldr	r3, [pc, #100]	; (8004004 <Bluetooth_Interrupt+0xec>)
 8003f9e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8003fa2:	79fb      	ldrb	r3, [r7, #7]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	4b16      	ldr	r3, [pc, #88]	; (8004004 <Bluetooth_Interrupt+0xec>)
 8003fac:	785b      	ldrb	r3, [r3, #1]
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	4916      	ldr	r1, [pc, #88]	; (8004010 <Bluetooth_Interrupt+0xf8>)
 8003fb8:	4814      	ldr	r0, [pc, #80]	; (800400c <Bluetooth_Interrupt+0xf4>)
 8003fba:	f7ff f91a 	bl	80031f2 <HAL_UART_Receive_DMA>
		break;
 8003fbe:	e01d      	b.n	8003ffc <Bluetooth_Interrupt+0xe4>
					bluetooth_rx.receiving = 0;
 8003fc0:	4b10      	ldr	r3, [pc, #64]	; (8004004 <Bluetooth_Interrupt+0xec>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	709a      	strb	r2, [r3, #2]
					bluetooth_rx.ready = 1;
 8003fc6:	4b0f      	ldr	r3, [pc, #60]	; (8004004 <Bluetooth_Interrupt+0xec>)
 8003fc8:	2201      	movs	r2, #1
 8003fca:	701a      	strb	r2, [r3, #0]
		break;
 8003fcc:	e016      	b.n	8003ffc <Bluetooth_Interrupt+0xe4>
				Bluetooth_Listen();
 8003fce:	f000 f821 	bl	8004014 <Bluetooth_Listen>
		break;
 8003fd2:	e013      	b.n	8003ffc <Bluetooth_Interrupt+0xe4>
			bluetooth_rx.cnt = bluetooth_rx.lengths[Bluetooth_Find_Rx_Length(bluetooth_rx.data[1])];
 8003fd4:	4b0b      	ldr	r3, [pc, #44]	; (8004004 <Bluetooth_Interrupt+0xec>)
 8003fd6:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
 8003fda:	4b0a      	ldr	r3, [pc, #40]	; (8004004 <Bluetooth_Interrupt+0xec>)
 8003fdc:	7a5b      	ldrb	r3, [r3, #9]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7ff ff1a 	bl	8003e18 <Bluetooth_Find_Rx_Length>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	4423      	add	r3, r4
 8003fe8:	781a      	ldrb	r2, [r3, #0]
 8003fea:	4b06      	ldr	r3, [pc, #24]	; (8004004 <Bluetooth_Interrupt+0xec>)
 8003fec:	705a      	strb	r2, [r3, #1]
			bluetooth_rx.receiving = 0;
 8003fee:	4b05      	ldr	r3, [pc, #20]	; (8004004 <Bluetooth_Interrupt+0xec>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	709a      	strb	r2, [r3, #2]
			bluetooth_rx.ready = 1;
 8003ff4:	4b03      	ldr	r3, [pc, #12]	; (8004004 <Bluetooth_Interrupt+0xec>)
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	701a      	strb	r2, [r3, #0]
		break;
 8003ffa:	bf00      	nop
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	bd90      	pop	{r4, r7, pc}
 8004004:	200008b0 	.word	0x200008b0
 8004008:	200008b9 	.word	0x200008b9
 800400c:	20000b78 	.word	0x20000b78
 8004010:	200008ba 	.word	0x200008ba

08004014 <Bluetooth_Listen>:

void Bluetooth_Listen(){
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
	bluetooth_rx.ready = 0;
 8004018:	4b0a      	ldr	r3, [pc, #40]	; (8004044 <Bluetooth_Listen+0x30>)
 800401a:	2200      	movs	r2, #0
 800401c:	701a      	strb	r2, [r3, #0]
	bluetooth_rx.cnt = 0;
 800401e:	4b09      	ldr	r3, [pc, #36]	; (8004044 <Bluetooth_Listen+0x30>)
 8004020:	2200      	movs	r2, #0
 8004022:	705a      	strb	r2, [r3, #1]
	bluetooth_rx.receiving = 0;
 8004024:	4b07      	ldr	r3, [pc, #28]	; (8004044 <Bluetooth_Listen+0x30>)
 8004026:	2200      	movs	r2, #0
 8004028:	709a      	strb	r2, [r3, #2]
	bluetooth_rx.receiving_ms = 0;
 800402a:	4b06      	ldr	r3, [pc, #24]	; (8004044 <Bluetooth_Listen+0x30>)
 800402c:	2200      	movs	r2, #0
 800402e:	605a      	str	r2, [r3, #4]
	HAL_UART_Abort(&huart1);
 8004030:	4805      	ldr	r0, [pc, #20]	; (8004048 <Bluetooth_Listen+0x34>)
 8004032:	f7ff f90e 	bl	8003252 <HAL_UART_Abort>
	HAL_UART_Receive_IT(&huart1, &bluetooth_rx.data[0], 1);
 8004036:	2201      	movs	r2, #1
 8004038:	4904      	ldr	r1, [pc, #16]	; (800404c <Bluetooth_Listen+0x38>)
 800403a:	4803      	ldr	r0, [pc, #12]	; (8004048 <Bluetooth_Listen+0x34>)
 800403c:	f7ff f8a9 	bl	8003192 <HAL_UART_Receive_IT>
}
 8004040:	bf00      	nop
 8004042:	bd80      	pop	{r7, pc}
 8004044:	200008b0 	.word	0x200008b0
 8004048:	20000b78 	.word	0x20000b78
 800404c:	200008b8 	.word	0x200008b8

08004050 <Bluetooth_Transmit>:
void Bluetooth_Transmit(uint8_t *data, uint16_t length){
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	460b      	mov	r3, r1
 800405a:	807b      	strh	r3, [r7, #2]
	if(Bluetooth_Connected()){
 800405c:	f7ff ff34 	bl	8003ec8 <Bluetooth_Connected>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d005      	beq.n	8004072 <Bluetooth_Transmit+0x22>
		HAL_UART_Transmit(&huart1, &data[0], length, BLUETOOTH_TX_TIMEOUT_MS);
 8004066:	887a      	ldrh	r2, [r7, #2]
 8004068:	2364      	movs	r3, #100	; 0x64
 800406a:	6879      	ldr	r1, [r7, #4]
 800406c:	4803      	ldr	r0, [pc, #12]	; (800407c <Bluetooth_Transmit+0x2c>)
 800406e:	f7fe fffe 	bl	800306e <HAL_UART_Transmit>
	}
}
 8004072:	bf00      	nop
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	20000b78 	.word	0x20000b78

08004080 <Bluetooth_Rx_Data>:
uint8_t *Bluetooth_Rx_Data(){
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
	return (uint8_t *)&bluetooth_rx.data[0];
 8004084:	4b02      	ldr	r3, [pc, #8]	; (8004090 <Bluetooth_Rx_Data+0x10>)
}
 8004086:	4618      	mov	r0, r3
 8004088:	46bd      	mov	sp, r7
 800408a:	bc80      	pop	{r7}
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	200008b8 	.word	0x200008b8

08004094 <Bluetooth_Rx_Ready>:
uint8_t Bluetooth_Rx_Ready(){
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
	if(bluetooth_rx.ready){
 8004098:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <Bluetooth_Rx_Ready+0x20>)
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d004      	beq.n	80040aa <Bluetooth_Rx_Ready+0x16>
		bluetooth_rx.ready = 0;
 80040a0:	4b04      	ldr	r3, [pc, #16]	; (80040b4 <Bluetooth_Rx_Ready+0x20>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	701a      	strb	r2, [r3, #0]
		return 1;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e000      	b.n	80040ac <Bluetooth_Rx_Ready+0x18>
	}
	return 0;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr
 80040b4:	200008b0 	.word	0x200008b0

080040b8 <Bluetooth_Init>:
void Bluetooth_Init(uint8_t command_symbol, uint8_t *symbols, uint8_t *lengths, uint16_t commands){
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	607a      	str	r2, [r7, #4]
 80040c2:	461a      	mov	r2, r3
 80040c4:	4603      	mov	r3, r0
 80040c6:	73fb      	strb	r3, [r7, #15]
 80040c8:	4613      	mov	r3, r2
 80040ca:	81bb      	strh	r3, [r7, #12]
	bluetooth_rx.command_symbol = command_symbol;
 80040cc:	4a0a      	ldr	r2, [pc, #40]	; (80040f8 <Bluetooth_Init+0x40>)
 80040ce:	7bfb      	ldrb	r3, [r7, #15]
 80040d0:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
	bluetooth_rx.commands = commands;
 80040d4:	4a08      	ldr	r2, [pc, #32]	; (80040f8 <Bluetooth_Init+0x40>)
 80040d6:	89bb      	ldrh	r3, [r7, #12]
 80040d8:	f8a2 310a 	strh.w	r3, [r2, #266]	; 0x10a
	bluetooth_rx.symbols = symbols;
 80040dc:	4a06      	ldr	r2, [pc, #24]	; (80040f8 <Bluetooth_Init+0x40>)
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	bluetooth_rx.lengths = lengths;
 80040e4:	4a04      	ldr	r2, [pc, #16]	; (80040f8 <Bluetooth_Init+0x40>)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
	Bluetooth_Listen();
 80040ec:	f7ff ff92 	bl	8004014 <Bluetooth_Listen>
}
 80040f0:	bf00      	nop
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	200008b0 	.word	0x200008b0

080040fc <Button_Interrupt>:
#include "main.h"
#include "button.h"

static uint8_t button_pressed = 0;

void Button_Interrupt(){
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
	button_pressed = 1;
 8004100:	4b03      	ldr	r3, [pc, #12]	; (8004110 <Button_Interrupt+0x14>)
 8004102:	2201      	movs	r2, #1
 8004104:	701a      	strb	r2, [r3, #0]
}
 8004106:	bf00      	nop
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	200009c4 	.word	0x200009c4

08004114 <Flash_Read>:
#include "main.h"
#include "flash.h"

static FLASH_EraseInitTypeDef EraseInitStruct;

void Flash_Read(uint8_t *data, uint16_t length){
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	807b      	strh	r3, [r7, #2]
	uint16_t fpages = length/4;
 8004120:	887b      	ldrh	r3, [r7, #2]
 8004122:	089b      	lsrs	r3, r3, #2
 8004124:	82bb      	strh	r3, [r7, #20]
	uint16_t lbytes = length-(fpages*4);
 8004126:	8abb      	ldrh	r3, [r7, #20]
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	b29b      	uxth	r3, r3
 800412c:	887a      	ldrh	r2, [r7, #2]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	827b      	strh	r3, [r7, #18]

	uint32_t tmp = 0;
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]
	uint16_t i = 0;
 8004136:	2300      	movs	r3, #0
 8004138:	82fb      	strh	r3, [r7, #22]
	while(i!=(fpages*4)){
 800413a:	e027      	b.n	800418c <Flash_Read+0x78>
		tmp = *(__IO uint32_t *)(0x0800C000+i);
 800413c:	8afb      	ldrh	r3, [r7, #22]
 800413e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8004142:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	60fb      	str	r3, [r7, #12]
		data[i] = (uint8_t)((uint32_t)tmp>>24);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	0e19      	lsrs	r1, r3, #24
 800414e:	8afb      	ldrh	r3, [r7, #22]
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	4413      	add	r3, r2
 8004154:	b2ca      	uxtb	r2, r1
 8004156:	701a      	strb	r2, [r3, #0]
		data[i+1] = (uint8_t)((uint32_t)tmp>>16);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	0c19      	lsrs	r1, r3, #16
 800415c:	8afb      	ldrh	r3, [r7, #22]
 800415e:	3301      	adds	r3, #1
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	4413      	add	r3, r2
 8004164:	b2ca      	uxtb	r2, r1
 8004166:	701a      	strb	r2, [r3, #0]
		data[i+2] = (uint8_t)((uint32_t)tmp>>8);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	0a19      	lsrs	r1, r3, #8
 800416c:	8afb      	ldrh	r3, [r7, #22]
 800416e:	3302      	adds	r3, #2
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	4413      	add	r3, r2
 8004174:	b2ca      	uxtb	r2, r1
 8004176:	701a      	strb	r2, [r3, #0]
		data[i+3] = (uint8_t)tmp;
 8004178:	8afb      	ldrh	r3, [r7, #22]
 800417a:	3303      	adds	r3, #3
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	4413      	add	r3, r2
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	701a      	strb	r2, [r3, #0]
		i += 4;
 8004186:	8afb      	ldrh	r3, [r7, #22]
 8004188:	3304      	adds	r3, #4
 800418a:	82fb      	strh	r3, [r7, #22]
	while(i!=(fpages*4)){
 800418c:	8afa      	ldrh	r2, [r7, #22]
 800418e:	8abb      	ldrh	r3, [r7, #20]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	429a      	cmp	r2, r3
 8004194:	d1d2      	bne.n	800413c <Flash_Read+0x28>
	}
	if(lbytes != 0){
 8004196:	8a7b      	ldrh	r3, [r7, #18]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d03e      	beq.n	800421a <Flash_Read+0x106>
		tmp = *(__IO uint32_t *)(0x0800C000+i);
 800419c:	8afb      	ldrh	r3, [r7, #22]
 800419e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80041a2:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	60fb      	str	r3, [r7, #12]
		if(lbytes == 3){
 80041aa:	8a7b      	ldrh	r3, [r7, #18]
 80041ac:	2b03      	cmp	r3, #3
 80041ae:	d117      	bne.n	80041e0 <Flash_Read+0xcc>
			data[i] = (uint8_t)((uint32_t)tmp>>24);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	0e19      	lsrs	r1, r3, #24
 80041b4:	8afb      	ldrh	r3, [r7, #22]
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	4413      	add	r3, r2
 80041ba:	b2ca      	uxtb	r2, r1
 80041bc:	701a      	strb	r2, [r3, #0]
			data[i+1] = (uint8_t)((uint32_t)tmp>>16);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	0c19      	lsrs	r1, r3, #16
 80041c2:	8afb      	ldrh	r3, [r7, #22]
 80041c4:	3301      	adds	r3, #1
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	4413      	add	r3, r2
 80041ca:	b2ca      	uxtb	r2, r1
 80041cc:	701a      	strb	r2, [r3, #0]
			data[i+2] = (uint8_t)((uint32_t)tmp>>8);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	0a19      	lsrs	r1, r3, #8
 80041d2:	8afb      	ldrh	r3, [r7, #22]
 80041d4:	3302      	adds	r3, #2
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	4413      	add	r3, r2
 80041da:	b2ca      	uxtb	r2, r1
 80041dc:	701a      	strb	r2, [r3, #0]
		}
		else if(lbytes == 1){
			data[i] = (uint8_t)((uint32_t)tmp>>24);
		}
	}
}
 80041de:	e01c      	b.n	800421a <Flash_Read+0x106>
		else if(lbytes == 2){
 80041e0:	8a7b      	ldrh	r3, [r7, #18]
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d10f      	bne.n	8004206 <Flash_Read+0xf2>
			data[i] = (uint8_t)((uint32_t)tmp>>24);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	0e19      	lsrs	r1, r3, #24
 80041ea:	8afb      	ldrh	r3, [r7, #22]
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	4413      	add	r3, r2
 80041f0:	b2ca      	uxtb	r2, r1
 80041f2:	701a      	strb	r2, [r3, #0]
			data[i+1] = (uint8_t)((uint32_t)tmp>>16);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	0c19      	lsrs	r1, r3, #16
 80041f8:	8afb      	ldrh	r3, [r7, #22]
 80041fa:	3301      	adds	r3, #1
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	4413      	add	r3, r2
 8004200:	b2ca      	uxtb	r2, r1
 8004202:	701a      	strb	r2, [r3, #0]
}
 8004204:	e009      	b.n	800421a <Flash_Read+0x106>
		else if(lbytes == 1){
 8004206:	8a7b      	ldrh	r3, [r7, #18]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d106      	bne.n	800421a <Flash_Read+0x106>
			data[i] = (uint8_t)((uint32_t)tmp>>24);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	0e19      	lsrs	r1, r3, #24
 8004210:	8afb      	ldrh	r3, [r7, #22]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	4413      	add	r3, r2
 8004216:	b2ca      	uxtb	r2, r1
 8004218:	701a      	strb	r2, [r3, #0]
}
 800421a:	bf00      	nop
 800421c:	371c      	adds	r7, #28
 800421e:	46bd      	mov	sp, r7
 8004220:	bc80      	pop	{r7}
 8004222:	4770      	bx	lr

08004224 <Flash_Write>:
uint32_t Flash_Write(uint8_t *data, uint16_t length){
 8004224:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004228:	b086      	sub	sp, #24
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	460b      	mov	r3, r1
 8004230:	807b      	strh	r3, [r7, #2]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8004232:	4b4e      	ldr	r3, [pc, #312]	; (800436c <Flash_Write+0x148>)
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = 0x0800C000;
 8004238:	4b4c      	ldr	r3, [pc, #304]	; (800436c <Flash_Write+0x148>)
 800423a:	4a4d      	ldr	r2, [pc, #308]	; (8004370 <Flash_Write+0x14c>)
 800423c:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages = 1;
 800423e:	4b4b      	ldr	r3, [pc, #300]	; (800436c <Flash_Write+0x148>)
 8004240:	2201      	movs	r2, #1
 8004242:	60da      	str	r2, [r3, #12]
	uint32_t ErrorCode = 0;
 8004244:	2300      	movs	r3, #0
 8004246:	60bb      	str	r3, [r7, #8]
	HAL_FLASH_Unlock();
 8004248:	f7fd f980 	bl	800154c <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInitStruct, &ErrorCode);
 800424c:	f107 0308 	add.w	r3, r7, #8
 8004250:	4619      	mov	r1, r3
 8004252:	4846      	ldr	r0, [pc, #280]	; (800436c <Flash_Write+0x148>)
 8004254:	f7fd fa62 	bl	800171c <HAL_FLASHEx_Erase>

	uint16_t fpages = length/4;
 8004258:	887b      	ldrh	r3, [r7, #2]
 800425a:	089b      	lsrs	r3, r3, #2
 800425c:	81fb      	strh	r3, [r7, #14]
	uint16_t lbytes = length-(fpages*4);
 800425e:	89fb      	ldrh	r3, [r7, #14]
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	b29b      	uxth	r3, r3
 8004264:	887a      	ldrh	r2, [r7, #2]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	81bb      	strh	r3, [r7, #12]
	uint16_t i = 0;
 800426a:	2300      	movs	r3, #0
 800426c:	82fb      	strh	r3, [r7, #22]
	while(i != (fpages*4)){
 800426e:	e02a      	b.n	80042c6 <Flash_Write+0xa2>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800C000+i, ((uint32_t)data[i]<<24)|((uint32_t)data[i+1]<<16)|((uint32_t)data[i+2]<<8)|(uint32_t)data[i+3]);
 8004270:	8afb      	ldrh	r3, [r7, #22]
 8004272:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8004276:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 800427a:	4618      	mov	r0, r3
 800427c:	8afb      	ldrh	r3, [r7, #22]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	4413      	add	r3, r2
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	061a      	lsls	r2, r3, #24
 8004286:	8afb      	ldrh	r3, [r7, #22]
 8004288:	3301      	adds	r3, #1
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	440b      	add	r3, r1
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	041b      	lsls	r3, r3, #16
 8004292:	431a      	orrs	r2, r3
 8004294:	8afb      	ldrh	r3, [r7, #22]
 8004296:	3302      	adds	r3, #2
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	440b      	add	r3, r1
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	021b      	lsls	r3, r3, #8
 80042a0:	4313      	orrs	r3, r2
 80042a2:	8afa      	ldrh	r2, [r7, #22]
 80042a4:	3203      	adds	r2, #3
 80042a6:	6879      	ldr	r1, [r7, #4]
 80042a8:	440a      	add	r2, r1
 80042aa:	7812      	ldrb	r2, [r2, #0]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	2200      	movs	r2, #0
 80042b0:	4698      	mov	r8, r3
 80042b2:	4691      	mov	r9, r2
 80042b4:	4642      	mov	r2, r8
 80042b6:	464b      	mov	r3, r9
 80042b8:	4601      	mov	r1, r0
 80042ba:	2002      	movs	r0, #2
 80042bc:	f7fd f8d6 	bl	800146c <HAL_FLASH_Program>
		i+=4;
 80042c0:	8afb      	ldrh	r3, [r7, #22]
 80042c2:	3304      	adds	r3, #4
 80042c4:	82fb      	strh	r3, [r7, #22]
	while(i != (fpages*4)){
 80042c6:	8afa      	ldrh	r2, [r7, #22]
 80042c8:	89fb      	ldrh	r3, [r7, #14]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d1cf      	bne.n	8004270 <Flash_Write+0x4c>
	}
	if(lbytes != 0){
 80042d0:	89bb      	ldrh	r3, [r7, #12]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d042      	beq.n	800435c <Flash_Write+0x138>
		uint32_t wdata = 0;
 80042d6:	2300      	movs	r3, #0
 80042d8:	613b      	str	r3, [r7, #16]
		if(lbytes == 3){
 80042da:	89bb      	ldrh	r3, [r7, #12]
 80042dc:	2b03      	cmp	r3, #3
 80042de:	d114      	bne.n	800430a <Flash_Write+0xe6>
			wdata = ((uint32_t)data[i]<<24)|((uint32_t)data[i+1]<<16)|((uint32_t)data[i+2]<<8);
 80042e0:	8afb      	ldrh	r3, [r7, #22]
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	4413      	add	r3, r2
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	061a      	lsls	r2, r3, #24
 80042ea:	8afb      	ldrh	r3, [r7, #22]
 80042ec:	3301      	adds	r3, #1
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	440b      	add	r3, r1
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	041b      	lsls	r3, r3, #16
 80042f6:	431a      	orrs	r2, r3
 80042f8:	8afb      	ldrh	r3, [r7, #22]
 80042fa:	3302      	adds	r3, #2
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	440b      	add	r3, r1
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	021b      	lsls	r3, r3, #8
 8004304:	4313      	orrs	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
 8004308:	e019      	b.n	800433e <Flash_Write+0x11a>
		}
		else if(lbytes == 2){
 800430a:	89bb      	ldrh	r3, [r7, #12]
 800430c:	2b02      	cmp	r3, #2
 800430e:	d10d      	bne.n	800432c <Flash_Write+0x108>
			wdata = ((uint32_t)data[i]<<24)|((uint32_t)data[i+1]<<16);
 8004310:	8afb      	ldrh	r3, [r7, #22]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	4413      	add	r3, r2
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	061a      	lsls	r2, r3, #24
 800431a:	8afb      	ldrh	r3, [r7, #22]
 800431c:	3301      	adds	r3, #1
 800431e:	6879      	ldr	r1, [r7, #4]
 8004320:	440b      	add	r3, r1
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	041b      	lsls	r3, r3, #16
 8004326:	4313      	orrs	r3, r2
 8004328:	613b      	str	r3, [r7, #16]
 800432a:	e008      	b.n	800433e <Flash_Write+0x11a>
		}
		else if(lbytes == 1){
 800432c:	89bb      	ldrh	r3, [r7, #12]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d105      	bne.n	800433e <Flash_Write+0x11a>
			wdata = ((uint32_t)data[i]<<24);
 8004332:	8afb      	ldrh	r3, [r7, #22]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	4413      	add	r3, r2
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	061b      	lsls	r3, r3, #24
 800433c:	613b      	str	r3, [r7, #16]
		}
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800C000+i, wdata);
 800433e:	8afb      	ldrh	r3, [r7, #22]
 8004340:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8004344:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8004348:	4619      	mov	r1, r3
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	2200      	movs	r2, #0
 800434e:	461c      	mov	r4, r3
 8004350:	4615      	mov	r5, r2
 8004352:	4622      	mov	r2, r4
 8004354:	462b      	mov	r3, r5
 8004356:	2002      	movs	r0, #2
 8004358:	f7fd f888 	bl	800146c <HAL_FLASH_Program>
	}

	HAL_FLASH_Lock();
 800435c:	f7fd f91c 	bl	8001598 <HAL_FLASH_Lock>
	return ErrorCode;
 8004360:	68bb      	ldr	r3, [r7, #8]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800436c:	200009c8 	.word	0x200009c8
 8004370:	0800c000 	.word	0x0800c000

08004374 <Interrupts_SysTick>:
#include "button.h"
#include "bluetooth.h"
#include "../app.h"
#include "../animation.h"

void Interrupts_SysTick(){
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
	LED_Breath();
 8004378:	f000 f832 	bl	80043e0 <LED_Breath>
	Bluetooth_SysTick();
 800437c:	f7ff fdb6 	bl	8003eec <Bluetooth_SysTick>
	Animation_SysTick();
 8004380:	f000 fa68 	bl	8004854 <Animation_SysTick>
	App_SysTick();
 8004384:	f000 fc02 	bl	8004b8c <App_SysTick>
}
 8004388:	bf00      	nop
 800438a:	bd80      	pop	{r7, pc}

0800438c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
		//!TBD
	}
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	bc80      	pop	{r7}
 800439c:	4770      	bx	lr
	...

080043a0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a04      	ldr	r2, [pc, #16]	; (80043c0 <HAL_UART_RxCpltCallback+0x20>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d101      	bne.n	80043b6 <HAL_UART_RxCpltCallback+0x16>
		Bluetooth_Interrupt();
 80043b2:	f7ff fdb1 	bl	8003f18 <Bluetooth_Interrupt>
	}
}
 80043b6:	bf00      	nop
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	40013800 	.word	0x40013800

080043c4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_RESET_Pin){
 80043ce:	88fb      	ldrh	r3, [r7, #6]
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d101      	bne.n	80043d8 <HAL_GPIO_EXTI_Callback+0x14>
		Button_Interrupt();
 80043d4:	f7ff fe92 	bl	80040fc <Button_Interrupt>
	}
}
 80043d8:	bf00      	nop
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <LED_Breath>:
	uint8_t brightness_rising_or_falling;
	uint8_t current_transition_sample;
	uint32_t passed_time_ms;
}led;

void LED_Breath(){
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
	if(led.enabled){
 80043e6:	4b3d      	ldr	r3, [pc, #244]	; (80044dc <LED_Breath+0xfc>)
 80043e8:	785b      	ldrb	r3, [r3, #1]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d070      	beq.n	80044d0 <LED_Breath+0xf0>
		//Total time for acceleration: (LED_MAX_SPEED - LED_NORMAL_SPEED) * LED_SPEED_UP_INTERVAL_MS, twice faster cool down
		//Calculate time passed since changing mode and LED "breathing" interval
		uint8_t delay = 0;
 80043ee:	2300      	movs	r3, #0
 80043f0:	71fb      	strb	r3, [r7, #7]
		switch(led.mode){
 80043f2:	4b3a      	ldr	r3, [pc, #232]	; (80044dc <LED_Breath+0xfc>)
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d018      	beq.n	800442c <LED_Breath+0x4c>
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	dc31      	bgt.n	8004462 <LED_Breath+0x82>
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d029      	beq.n	8004456 <LED_Breath+0x76>
 8004402:	2b01      	cmp	r3, #1
 8004404:	d12d      	bne.n	8004462 <LED_Breath+0x82>
			case LED_ACCELERATE:
				if(led.passed_time_ms > 0){
 8004406:	4b35      	ldr	r3, [pc, #212]	; (80044dc <LED_Breath+0xfc>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d004      	beq.n	8004418 <LED_Breath+0x38>
					led.passed_time_ms--;
 800440e:	4b33      	ldr	r3, [pc, #204]	; (80044dc <LED_Breath+0xfc>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	3b01      	subs	r3, #1
 8004414:	4a31      	ldr	r2, [pc, #196]	; (80044dc <LED_Breath+0xfc>)
 8004416:	6093      	str	r3, [r2, #8]
				}
				delay = (led.passed_time_ms / LED_SPEED_UP_INTERVAL_MS) + LED_MAX_SPEED;
 8004418:	4b30      	ldr	r3, [pc, #192]	; (80044dc <LED_Breath+0xfc>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	4a30      	ldr	r2, [pc, #192]	; (80044e0 <LED_Breath+0x100>)
 800441e:	fba2 2303 	umull	r2, r3, r2, r3
 8004422:	0a1b      	lsrs	r3, r3, #8
 8004424:	b2db      	uxtb	r3, r3
 8004426:	3302      	adds	r3, #2
 8004428:	71fb      	strb	r3, [r7, #7]
			break;
 800442a:	e01a      	b.n	8004462 <LED_Breath+0x82>
			case LED_COOL_DOWN:
				if(led.passed_time_ms < (LED_NORMAL_SPEED - LED_MAX_SPEED) * LED_COOL_DOWN_INTERVAL_MS){
 800442c:	4b2b      	ldr	r3, [pc, #172]	; (80044dc <LED_Breath+0xfc>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f249 426f 	movw	r2, #37999	; 0x946f
 8004434:	4293      	cmp	r3, r2
 8004436:	d804      	bhi.n	8004442 <LED_Breath+0x62>
					led.passed_time_ms++;
 8004438:	4b28      	ldr	r3, [pc, #160]	; (80044dc <LED_Breath+0xfc>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	3301      	adds	r3, #1
 800443e:	4a27      	ldr	r2, [pc, #156]	; (80044dc <LED_Breath+0xfc>)
 8004440:	6093      	str	r3, [r2, #8]
				}
				delay = (led.passed_time_ms / LED_COOL_DOWN_INTERVAL_MS) + LED_MAX_SPEED;
 8004442:	4b26      	ldr	r3, [pc, #152]	; (80044dc <LED_Breath+0xfc>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	4a26      	ldr	r2, [pc, #152]	; (80044e0 <LED_Breath+0x100>)
 8004448:	fba2 2303 	umull	r2, r3, r2, r3
 800444c:	09db      	lsrs	r3, r3, #7
 800444e:	b2db      	uxtb	r3, r3
 8004450:	3302      	adds	r3, #2
 8004452:	71fb      	strb	r3, [r7, #7]
			break;
 8004454:	e005      	b.n	8004462 <LED_Breath+0x82>
			case LED_CONSTANT:
				led.passed_time_ms = LED_SPEED_UP_INTERVAL_MS * LED_NORMAL_SPEED;
 8004456:	4b21      	ldr	r3, [pc, #132]	; (80044dc <LED_Breath+0xfc>)
 8004458:	4a22      	ldr	r2, [pc, #136]	; (80044e4 <LED_Breath+0x104>)
 800445a:	609a      	str	r2, [r3, #8]
				delay = LED_NORMAL_SPEED;
 800445c:	2315      	movs	r3, #21
 800445e:	71fb      	strb	r3, [r7, #7]
			break;
 8004460:	bf00      	nop
		}

		//Breath
		led.current_transition_sample++;
 8004462:	4b1e      	ldr	r3, [pc, #120]	; (80044dc <LED_Breath+0xfc>)
 8004464:	791b      	ldrb	r3, [r3, #4]
 8004466:	3301      	adds	r3, #1
 8004468:	b2da      	uxtb	r2, r3
 800446a:	4b1c      	ldr	r3, [pc, #112]	; (80044dc <LED_Breath+0xfc>)
 800446c:	711a      	strb	r2, [r3, #4]
		if(led.current_transition_sample >= delay){
 800446e:	4b1b      	ldr	r3, [pc, #108]	; (80044dc <LED_Breath+0xfc>)
 8004470:	791b      	ldrb	r3, [r3, #4]
 8004472:	79fa      	ldrb	r2, [r7, #7]
 8004474:	429a      	cmp	r2, r3
 8004476:	d82b      	bhi.n	80044d0 <LED_Breath+0xf0>
			led.current_transition_sample = 0;
 8004478:	4b18      	ldr	r3, [pc, #96]	; (80044dc <LED_Breath+0xfc>)
 800447a:	2200      	movs	r2, #0
 800447c:	711a      	strb	r2, [r3, #4]

			if(led.brightness_rising_or_falling){
 800447e:	4b17      	ldr	r3, [pc, #92]	; (80044dc <LED_Breath+0xfc>)
 8004480:	78db      	ldrb	r3, [r3, #3]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d011      	beq.n	80044aa <LED_Breath+0xca>
				//If rising brightness
				if(led.brightness < htim2.Init.Period){
 8004486:	4b15      	ldr	r3, [pc, #84]	; (80044dc <LED_Breath+0xfc>)
 8004488:	789b      	ldrb	r3, [r3, #2]
 800448a:	461a      	mov	r2, r3
 800448c:	4b16      	ldr	r3, [pc, #88]	; (80044e8 <LED_Breath+0x108>)
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	429a      	cmp	r2, r3
 8004492:	d206      	bcs.n	80044a2 <LED_Breath+0xc2>
					led.brightness++;
 8004494:	4b11      	ldr	r3, [pc, #68]	; (80044dc <LED_Breath+0xfc>)
 8004496:	789b      	ldrb	r3, [r3, #2]
 8004498:	3301      	adds	r3, #1
 800449a:	b2da      	uxtb	r2, r3
 800449c:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <LED_Breath+0xfc>)
 800449e:	709a      	strb	r2, [r3, #2]
 80044a0:	e011      	b.n	80044c6 <LED_Breath+0xe6>
				}else{
					led.brightness_rising_or_falling = 0;
 80044a2:	4b0e      	ldr	r3, [pc, #56]	; (80044dc <LED_Breath+0xfc>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	70da      	strb	r2, [r3, #3]
 80044a8:	e00d      	b.n	80044c6 <LED_Breath+0xe6>
				}
			}else{
				//If reducing brightness
				if(led.brightness > LED_MIN_BRIGHTNESS){
 80044aa:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <LED_Breath+0xfc>)
 80044ac:	789b      	ldrb	r3, [r3, #2]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d906      	bls.n	80044c0 <LED_Breath+0xe0>
					led.brightness--;
 80044b2:	4b0a      	ldr	r3, [pc, #40]	; (80044dc <LED_Breath+0xfc>)
 80044b4:	789b      	ldrb	r3, [r3, #2]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	4b08      	ldr	r3, [pc, #32]	; (80044dc <LED_Breath+0xfc>)
 80044bc:	709a      	strb	r2, [r3, #2]
 80044be:	e002      	b.n	80044c6 <LED_Breath+0xe6>
				}else{
					led.brightness_rising_or_falling = 1;
 80044c0:	4b06      	ldr	r3, [pc, #24]	; (80044dc <LED_Breath+0xfc>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	70da      	strb	r2, [r3, #3]
				}
			}

			//Set brightness
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, led.brightness);
 80044c6:	4b05      	ldr	r3, [pc, #20]	; (80044dc <LED_Breath+0xfc>)
 80044c8:	789a      	ldrb	r2, [r3, #2]
 80044ca:	4b07      	ldr	r3, [pc, #28]	; (80044e8 <LED_Breath+0x108>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bc80      	pop	{r7}
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	200009d8 	.word	0x200009d8
 80044e0:	10624dd3 	.word	0x10624dd3
 80044e4:	00014820 	.word	0x00014820
 80044e8:	20000aa0 	.word	0x20000aa0

080044ec <LED_Set_Mode>:
void LED_Set_Mode(uint8_t mode){
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	71fb      	strb	r3, [r7, #7]
	led.mode = mode;
 80044f6:	4a04      	ldr	r2, [pc, #16]	; (8004508 <LED_Set_Mode+0x1c>)
 80044f8:	79fb      	ldrb	r3, [r7, #7]
 80044fa:	7013      	strb	r3, [r2, #0]
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	bc80      	pop	{r7}
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	200009d8 	.word	0x200009d8

0800450c <LED_Enable>:
void LED_Enable(uint8_t enable){
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	4603      	mov	r3, r0
 8004514:	71fb      	strb	r3, [r7, #7]
	if(!enable){
 8004516:	79fb      	ldrb	r3, [r7, #7]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d103      	bne.n	8004524 <LED_Enable+0x18>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800451c:	4b05      	ldr	r3, [pc, #20]	; (8004534 <LED_Enable+0x28>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2200      	movs	r2, #0
 8004522:	639a      	str	r2, [r3, #56]	; 0x38
	}
	led.enabled = enable;
 8004524:	4a04      	ldr	r2, [pc, #16]	; (8004538 <LED_Enable+0x2c>)
 8004526:	79fb      	ldrb	r3, [r7, #7]
 8004528:	7053      	strb	r3, [r2, #1]
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr
 8004534:	20000aa0 	.word	0x20000aa0
 8004538:	200009d8 	.word	0x200009d8

0800453c <LED_Init>:
void LED_Init(){
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8004540:	2104      	movs	r1, #4
 8004542:	4802      	ldr	r0, [pc, #8]	; (800454c <LED_Init+0x10>)
 8004544:	f7fe f820 	bl	8002588 <HAL_TIM_PWM_Start>
}
 8004548:	bf00      	nop
 800454a:	bd80      	pop	{r7, pc}
 800454c:	20000aa0 	.word	0x20000aa0

08004550 <Servo_Calib_Data>:
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim4;

int8_t servo_calib[SERVO_COUNT];

int8_t *Servo_Calib_Data(){
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
	return (int8_t *)&servo_calib[0];
 8004554:	4b02      	ldr	r3, [pc, #8]	; (8004560 <Servo_Calib_Data+0x10>)
}
 8004556:	4618      	mov	r0, r3
 8004558:	46bd      	mov	sp, r7
 800455a:	bc80      	pop	{r7}
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	200009e4 	.word	0x200009e4

08004564 <Servo_Set_Calib>:
void Servo_Set_Calib(int8_t calib, uint8_t servo){
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	4603      	mov	r3, r0
 800456c:	460a      	mov	r2, r1
 800456e:	71fb      	strb	r3, [r7, #7]
 8004570:	4613      	mov	r3, r2
 8004572:	71bb      	strb	r3, [r7, #6]
	if(servo && (servo <= SERVO_COUNT)){
 8004574:	79bb      	ldrb	r3, [r7, #6]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d007      	beq.n	800458a <Servo_Set_Calib+0x26>
 800457a:	79bb      	ldrb	r3, [r7, #6]
 800457c:	2b08      	cmp	r3, #8
 800457e:	d804      	bhi.n	800458a <Servo_Set_Calib+0x26>
		servo_calib[servo - 1] = calib;
 8004580:	79bb      	ldrb	r3, [r7, #6]
 8004582:	3b01      	subs	r3, #1
 8004584:	4903      	ldr	r1, [pc, #12]	; (8004594 <Servo_Set_Calib+0x30>)
 8004586:	79fa      	ldrb	r2, [r7, #7]
 8004588:	54ca      	strb	r2, [r1, r3]
	}
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	bc80      	pop	{r7}
 8004592:	4770      	bx	lr
 8004594:	200009e4 	.word	0x200009e4

08004598 <Servo_Set>:
void Servo_Set(float *values){
 8004598:	b590      	push	{r4, r7, lr}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, SERVO_MIN_PWM + (servo_calib[0] * SERVO_CALIBRATION_STEP_PWM) + (SERVO_STEP_PWM * values[0]));
 80045a0:	4b93      	ldr	r3, [pc, #588]	; (80047f0 <Servo_Set+0x258>)
 80045a2:	f993 3000 	ldrsb.w	r3, [r3]
 80045a6:	461a      	mov	r2, r3
 80045a8:	4613      	mov	r3, r2
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	1a9b      	subs	r3, r3, r2
 80045ae:	f203 138b 	addw	r3, r3, #395	; 0x18b
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fc f8c8 	bl	8000748 <__aeabi_i2f>
 80045b8:	4604      	mov	r4, r0
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	498d      	ldr	r1, [pc, #564]	; (80047f4 <Servo_Set+0x25c>)
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fc f915 	bl	80007f0 <__aeabi_fmul>
 80045c6:	4603      	mov	r3, r0
 80045c8:	4619      	mov	r1, r3
 80045ca:	4620      	mov	r0, r4
 80045cc:	f7fc f808 	bl	80005e0 <__addsf3>
 80045d0:	4603      	mov	r3, r0
 80045d2:	461a      	mov	r2, r3
 80045d4:	4b88      	ldr	r3, [pc, #544]	; (80047f8 <Servo_Set+0x260>)
 80045d6:	681c      	ldr	r4, [r3, #0]
 80045d8:	4610      	mov	r0, r2
 80045da:	f7fc facf 	bl	8000b7c <__aeabi_f2uiz>
 80045de:	4603      	mov	r3, r0
 80045e0:	6363      	str	r3, [r4, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, SERVO_MIN_PWM + (servo_calib[1] * SERVO_CALIBRATION_STEP_PWM) + (SERVO_STEP_PWM * (100-values[1])));
 80045e2:	4b83      	ldr	r3, [pc, #524]	; (80047f0 <Servo_Set+0x258>)
 80045e4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80045e8:	461a      	mov	r2, r3
 80045ea:	4613      	mov	r3, r2
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	1a9b      	subs	r3, r3, r2
 80045f0:	f203 138b 	addw	r3, r3, #395	; 0x18b
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fc f8a7 	bl	8000748 <__aeabi_i2f>
 80045fa:	4604      	mov	r4, r0
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3304      	adds	r3, #4
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4619      	mov	r1, r3
 8004604:	487d      	ldr	r0, [pc, #500]	; (80047fc <Servo_Set+0x264>)
 8004606:	f7fb ffe9 	bl	80005dc <__aeabi_fsub>
 800460a:	4603      	mov	r3, r0
 800460c:	4979      	ldr	r1, [pc, #484]	; (80047f4 <Servo_Set+0x25c>)
 800460e:	4618      	mov	r0, r3
 8004610:	f7fc f8ee 	bl	80007f0 <__aeabi_fmul>
 8004614:	4603      	mov	r3, r0
 8004616:	4619      	mov	r1, r3
 8004618:	4620      	mov	r0, r4
 800461a:	f7fb ffe1 	bl	80005e0 <__addsf3>
 800461e:	4603      	mov	r3, r0
 8004620:	461a      	mov	r2, r3
 8004622:	4b75      	ldr	r3, [pc, #468]	; (80047f8 <Servo_Set+0x260>)
 8004624:	681c      	ldr	r4, [r3, #0]
 8004626:	4610      	mov	r0, r2
 8004628:	f7fc faa8 	bl	8000b7c <__aeabi_f2uiz>
 800462c:	4603      	mov	r3, r0
 800462e:	63a3      	str	r3, [r4, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, SERVO_MIN_PWM + (servo_calib[2] * SERVO_CALIBRATION_STEP_PWM) + (SERVO_STEP_PWM * values[2]));
 8004630:	4b6f      	ldr	r3, [pc, #444]	; (80047f0 <Servo_Set+0x258>)
 8004632:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004636:	461a      	mov	r2, r3
 8004638:	4613      	mov	r3, r2
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	1a9b      	subs	r3, r3, r2
 800463e:	f203 138b 	addw	r3, r3, #395	; 0x18b
 8004642:	4618      	mov	r0, r3
 8004644:	f7fc f880 	bl	8000748 <__aeabi_i2f>
 8004648:	4604      	mov	r4, r0
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	3308      	adds	r3, #8
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4968      	ldr	r1, [pc, #416]	; (80047f4 <Servo_Set+0x25c>)
 8004652:	4618      	mov	r0, r3
 8004654:	f7fc f8cc 	bl	80007f0 <__aeabi_fmul>
 8004658:	4603      	mov	r3, r0
 800465a:	4619      	mov	r1, r3
 800465c:	4620      	mov	r0, r4
 800465e:	f7fb ffbf 	bl	80005e0 <__addsf3>
 8004662:	4603      	mov	r3, r0
 8004664:	461a      	mov	r2, r3
 8004666:	4b64      	ldr	r3, [pc, #400]	; (80047f8 <Servo_Set+0x260>)
 8004668:	681c      	ldr	r4, [r3, #0]
 800466a:	4610      	mov	r0, r2
 800466c:	f7fc fa86 	bl	8000b7c <__aeabi_f2uiz>
 8004670:	4603      	mov	r3, r0
 8004672:	63e3      	str	r3, [r4, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, SERVO_MIN_PWM + (servo_calib[3] * SERVO_CALIBRATION_STEP_PWM) + (SERVO_STEP_PWM * (100-values[3])));
 8004674:	4b5e      	ldr	r3, [pc, #376]	; (80047f0 <Servo_Set+0x258>)
 8004676:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800467a:	461a      	mov	r2, r3
 800467c:	4613      	mov	r3, r2
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	1a9b      	subs	r3, r3, r2
 8004682:	f203 138b 	addw	r3, r3, #395	; 0x18b
 8004686:	4618      	mov	r0, r3
 8004688:	f7fc f85e 	bl	8000748 <__aeabi_i2f>
 800468c:	4604      	mov	r4, r0
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	330c      	adds	r3, #12
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4619      	mov	r1, r3
 8004696:	4859      	ldr	r0, [pc, #356]	; (80047fc <Servo_Set+0x264>)
 8004698:	f7fb ffa0 	bl	80005dc <__aeabi_fsub>
 800469c:	4603      	mov	r3, r0
 800469e:	4955      	ldr	r1, [pc, #340]	; (80047f4 <Servo_Set+0x25c>)
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7fc f8a5 	bl	80007f0 <__aeabi_fmul>
 80046a6:	4603      	mov	r3, r0
 80046a8:	4619      	mov	r1, r3
 80046aa:	4620      	mov	r0, r4
 80046ac:	f7fb ff98 	bl	80005e0 <__addsf3>
 80046b0:	4603      	mov	r3, r0
 80046b2:	461a      	mov	r2, r3
 80046b4:	4b50      	ldr	r3, [pc, #320]	; (80047f8 <Servo_Set+0x260>)
 80046b6:	681c      	ldr	r4, [r3, #0]
 80046b8:	4610      	mov	r0, r2
 80046ba:	f7fc fa5f 	bl	8000b7c <__aeabi_f2uiz>
 80046be:	4603      	mov	r3, r0
 80046c0:	6423      	str	r3, [r4, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, SERVO_MIN_PWM + (servo_calib[4] * SERVO_CALIBRATION_STEP_PWM) + (SERVO_STEP_PWM * values[4]));
 80046c2:	4b4b      	ldr	r3, [pc, #300]	; (80047f0 <Servo_Set+0x258>)
 80046c4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80046c8:	461a      	mov	r2, r3
 80046ca:	4613      	mov	r3, r2
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	1a9b      	subs	r3, r3, r2
 80046d0:	f203 138b 	addw	r3, r3, #395	; 0x18b
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7fc f837 	bl	8000748 <__aeabi_i2f>
 80046da:	4604      	mov	r4, r0
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3310      	adds	r3, #16
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4944      	ldr	r1, [pc, #272]	; (80047f4 <Servo_Set+0x25c>)
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7fc f883 	bl	80007f0 <__aeabi_fmul>
 80046ea:	4603      	mov	r3, r0
 80046ec:	4619      	mov	r1, r3
 80046ee:	4620      	mov	r0, r4
 80046f0:	f7fb ff76 	bl	80005e0 <__addsf3>
 80046f4:	4603      	mov	r3, r0
 80046f6:	461a      	mov	r2, r3
 80046f8:	4b41      	ldr	r3, [pc, #260]	; (8004800 <Servo_Set+0x268>)
 80046fa:	681c      	ldr	r4, [r3, #0]
 80046fc:	4610      	mov	r0, r2
 80046fe:	f7fc fa3d 	bl	8000b7c <__aeabi_f2uiz>
 8004702:	4603      	mov	r3, r0
 8004704:	6363      	str	r3, [r4, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, SERVO_MIN_PWM + (servo_calib[5] * SERVO_CALIBRATION_STEP_PWM) + (SERVO_STEP_PWM * (100-values[5])));
 8004706:	4b3a      	ldr	r3, [pc, #232]	; (80047f0 <Servo_Set+0x258>)
 8004708:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800470c:	461a      	mov	r2, r3
 800470e:	4613      	mov	r3, r2
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	1a9b      	subs	r3, r3, r2
 8004714:	f203 138b 	addw	r3, r3, #395	; 0x18b
 8004718:	4618      	mov	r0, r3
 800471a:	f7fc f815 	bl	8000748 <__aeabi_i2f>
 800471e:	4604      	mov	r4, r0
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3314      	adds	r3, #20
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4619      	mov	r1, r3
 8004728:	4834      	ldr	r0, [pc, #208]	; (80047fc <Servo_Set+0x264>)
 800472a:	f7fb ff57 	bl	80005dc <__aeabi_fsub>
 800472e:	4603      	mov	r3, r0
 8004730:	4930      	ldr	r1, [pc, #192]	; (80047f4 <Servo_Set+0x25c>)
 8004732:	4618      	mov	r0, r3
 8004734:	f7fc f85c 	bl	80007f0 <__aeabi_fmul>
 8004738:	4603      	mov	r3, r0
 800473a:	4619      	mov	r1, r3
 800473c:	4620      	mov	r0, r4
 800473e:	f7fb ff4f 	bl	80005e0 <__addsf3>
 8004742:	4603      	mov	r3, r0
 8004744:	461a      	mov	r2, r3
 8004746:	4b2e      	ldr	r3, [pc, #184]	; (8004800 <Servo_Set+0x268>)
 8004748:	681c      	ldr	r4, [r3, #0]
 800474a:	4610      	mov	r0, r2
 800474c:	f7fc fa16 	bl	8000b7c <__aeabi_f2uiz>
 8004750:	4603      	mov	r3, r0
 8004752:	63a3      	str	r3, [r4, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, SERVO_MIN_PWM + (servo_calib[6] * SERVO_CALIBRATION_STEP_PWM) + (SERVO_STEP_PWM * values[6]));
 8004754:	4b26      	ldr	r3, [pc, #152]	; (80047f0 <Servo_Set+0x258>)
 8004756:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800475a:	461a      	mov	r2, r3
 800475c:	4613      	mov	r3, r2
 800475e:	011b      	lsls	r3, r3, #4
 8004760:	1a9b      	subs	r3, r3, r2
 8004762:	f203 138b 	addw	r3, r3, #395	; 0x18b
 8004766:	4618      	mov	r0, r3
 8004768:	f7fb ffee 	bl	8000748 <__aeabi_i2f>
 800476c:	4604      	mov	r4, r0
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	3318      	adds	r3, #24
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	491f      	ldr	r1, [pc, #124]	; (80047f4 <Servo_Set+0x25c>)
 8004776:	4618      	mov	r0, r3
 8004778:	f7fc f83a 	bl	80007f0 <__aeabi_fmul>
 800477c:	4603      	mov	r3, r0
 800477e:	4619      	mov	r1, r3
 8004780:	4620      	mov	r0, r4
 8004782:	f7fb ff2d 	bl	80005e0 <__addsf3>
 8004786:	4603      	mov	r3, r0
 8004788:	461a      	mov	r2, r3
 800478a:	4b1d      	ldr	r3, [pc, #116]	; (8004800 <Servo_Set+0x268>)
 800478c:	681c      	ldr	r4, [r3, #0]
 800478e:	4610      	mov	r0, r2
 8004790:	f7fc f9f4 	bl	8000b7c <__aeabi_f2uiz>
 8004794:	4603      	mov	r3, r0
 8004796:	63e3      	str	r3, [r4, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, SERVO_MIN_PWM + (servo_calib[7] * SERVO_CALIBRATION_STEP_PWM) + (SERVO_STEP_PWM * (100-values[7])));
 8004798:	4b15      	ldr	r3, [pc, #84]	; (80047f0 <Servo_Set+0x258>)
 800479a:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800479e:	461a      	mov	r2, r3
 80047a0:	4613      	mov	r3, r2
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	1a9b      	subs	r3, r3, r2
 80047a6:	f203 138b 	addw	r3, r3, #395	; 0x18b
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7fb ffcc 	bl	8000748 <__aeabi_i2f>
 80047b0:	4604      	mov	r4, r0
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	331c      	adds	r3, #28
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4619      	mov	r1, r3
 80047ba:	4810      	ldr	r0, [pc, #64]	; (80047fc <Servo_Set+0x264>)
 80047bc:	f7fb ff0e 	bl	80005dc <__aeabi_fsub>
 80047c0:	4603      	mov	r3, r0
 80047c2:	490c      	ldr	r1, [pc, #48]	; (80047f4 <Servo_Set+0x25c>)
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fc f813 	bl	80007f0 <__aeabi_fmul>
 80047ca:	4603      	mov	r3, r0
 80047cc:	4619      	mov	r1, r3
 80047ce:	4620      	mov	r0, r4
 80047d0:	f7fb ff06 	bl	80005e0 <__addsf3>
 80047d4:	4603      	mov	r3, r0
 80047d6:	461a      	mov	r2, r3
 80047d8:	4b09      	ldr	r3, [pc, #36]	; (8004800 <Servo_Set+0x268>)
 80047da:	681c      	ldr	r4, [r3, #0]
 80047dc:	4610      	mov	r0, r2
 80047de:	f7fc f9cd 	bl	8000b7c <__aeabi_f2uiz>
 80047e2:	4603      	mov	r3, r0
 80047e4:	6423      	str	r3, [r4, #64]	; 0x40
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd90      	pop	{r4, r7, pc}
 80047ee:	bf00      	nop
 80047f0:	200009e4 	.word	0x200009e4
 80047f4:	41bb3333 	.word	0x41bb3333
 80047f8:	20000ae8 	.word	0x20000ae8
 80047fc:	42c80000 	.word	0x42c80000
 8004800:	20000b30 	.word	0x20000b30

08004804 <Servo_Init>:
void Servo_Init(){
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004808:	2100      	movs	r1, #0
 800480a:	4810      	ldr	r0, [pc, #64]	; (800484c <Servo_Init+0x48>)
 800480c:	f7fd febc 	bl	8002588 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8004810:	2104      	movs	r1, #4
 8004812:	480e      	ldr	r0, [pc, #56]	; (800484c <Servo_Init+0x48>)
 8004814:	f7fd feb8 	bl	8002588 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8004818:	2108      	movs	r1, #8
 800481a:	480c      	ldr	r0, [pc, #48]	; (800484c <Servo_Init+0x48>)
 800481c:	f7fd feb4 	bl	8002588 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8004820:	210c      	movs	r1, #12
 8004822:	480a      	ldr	r0, [pc, #40]	; (800484c <Servo_Init+0x48>)
 8004824:	f7fd feb0 	bl	8002588 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8004828:	2100      	movs	r1, #0
 800482a:	4809      	ldr	r0, [pc, #36]	; (8004850 <Servo_Init+0x4c>)
 800482c:	f7fd feac 	bl	8002588 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8004830:	2104      	movs	r1, #4
 8004832:	4807      	ldr	r0, [pc, #28]	; (8004850 <Servo_Init+0x4c>)
 8004834:	f7fd fea8 	bl	8002588 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004838:	2108      	movs	r1, #8
 800483a:	4805      	ldr	r0, [pc, #20]	; (8004850 <Servo_Init+0x4c>)
 800483c:	f7fd fea4 	bl	8002588 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004840:	210c      	movs	r1, #12
 8004842:	4803      	ldr	r0, [pc, #12]	; (8004850 <Servo_Init+0x4c>)
 8004844:	f7fd fea0 	bl	8002588 <HAL_TIM_PWM_Start>
 8004848:	bf00      	nop
 800484a:	bd80      	pop	{r7, pc}
 800484c:	20000ae8 	.word	0x20000ae8
 8004850:	20000b30 	.word	0x20000b30

08004854 <Animation_SysTick>:
	uint32_t poses;
	uint8_t loop_en;
	uint32_t frame_delay;
}animation;

void Animation_SysTick(){
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
	if(animation.poses){
 8004858:	4b06      	ldr	r3, [pc, #24]	; (8004874 <Animation_SysTick+0x20>)
 800485a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800485c:	2b00      	cmp	r3, #0
 800485e:	d004      	beq.n	800486a <Animation_SysTick+0x16>
		animation.c_frame_delay++;
 8004860:	4b04      	ldr	r3, [pc, #16]	; (8004874 <Animation_SysTick+0x20>)
 8004862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004864:	3301      	adds	r3, #1
 8004866:	4a03      	ldr	r2, [pc, #12]	; (8004874 <Animation_SysTick+0x20>)
 8004868:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
}
 800486a:	bf00      	nop
 800486c:	46bd      	mov	sp, r7
 800486e:	bc80      	pop	{r7}
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	200009ec 	.word	0x200009ec

08004878 <Animation_Stop>:
void Animation_Stop(){
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
	animation.poses = 0;
 800487c:	4b09      	ldr	r3, [pc, #36]	; (80048a4 <Animation_Stop+0x2c>)
 800487e:	2200      	movs	r2, #0
 8004880:	635a      	str	r2, [r3, #52]	; 0x34
	animation.loop_en = 0;
 8004882:	4b08      	ldr	r3, [pc, #32]	; (80048a4 <Animation_Stop+0x2c>)
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	animation.c_pose_n = 0;
 800488a:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <Animation_Stop+0x2c>)
 800488c:	2200      	movs	r2, #0
 800488e:	621a      	str	r2, [r3, #32]
	animation.c_step_n = 0;
 8004890:	4b04      	ldr	r3, [pc, #16]	; (80048a4 <Animation_Stop+0x2c>)
 8004892:	2200      	movs	r2, #0
 8004894:	629a      	str	r2, [r3, #40]	; 0x28
	animation.c_frame_delay = 0;
 8004896:	4b03      	ldr	r3, [pc, #12]	; (80048a4 <Animation_Stop+0x2c>)
 8004898:	2200      	movs	r2, #0
 800489a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800489c:	bf00      	nop
 800489e:	46bd      	mov	sp, r7
 80048a0:	bc80      	pop	{r7}
 80048a2:	4770      	bx	lr
 80048a4:	200009ec 	.word	0x200009ec

080048a8 <Animation_Set>:
void Animation_Set(anim_data_t *anim_data){
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
	animation.c_pose_n = 0;
 80048b0:	4b0d      	ldr	r3, [pc, #52]	; (80048e8 <Animation_Set+0x40>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	621a      	str	r2, [r3, #32]
	animation.c_step_n = 0;
 80048b6:	4b0c      	ldr	r3, [pc, #48]	; (80048e8 <Animation_Set+0x40>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	629a      	str	r2, [r3, #40]	; 0x28

	animation.data = &anim_data->data[0];
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	330c      	adds	r3, #12
 80048c0:	4a09      	ldr	r2, [pc, #36]	; (80048e8 <Animation_Set+0x40>)
 80048c2:	6313      	str	r3, [r2, #48]	; 0x30
	animation.poses = anim_data->poses;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a07      	ldr	r2, [pc, #28]	; (80048e8 <Animation_Set+0x40>)
 80048ca:	6353      	str	r3, [r2, #52]	; 0x34
	animation.loop_en = anim_data->loop;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	791a      	ldrb	r2, [r3, #4]
 80048d0:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <Animation_Set+0x40>)
 80048d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	animation.frame_delay = anim_data->delay;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	4a03      	ldr	r2, [pc, #12]	; (80048e8 <Animation_Set+0x40>)
 80048dc:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80048de:	bf00      	nop
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bc80      	pop	{r7}
 80048e6:	4770      	bx	lr
 80048e8:	200009ec 	.word	0x200009ec

080048ec <Animation_Play_Frame>:
void Animation_Play_Frame(){
 80048ec:	b5b0      	push	{r4, r5, r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
	if((animation.loop_en && (animation.c_pose_n < animation.poses)) || (!animation.loop_en && (animation.c_pose_n < (animation.poses - 1)))){
 80048f2:	4b99      	ldr	r3, [pc, #612]	; (8004b58 <Animation_Play_Frame+0x26c>)
 80048f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d005      	beq.n	8004908 <Animation_Play_Frame+0x1c>
 80048fc:	4b96      	ldr	r3, [pc, #600]	; (8004b58 <Animation_Play_Frame+0x26c>)
 80048fe:	6a1a      	ldr	r2, [r3, #32]
 8004900:	4b95      	ldr	r3, [pc, #596]	; (8004b58 <Animation_Play_Frame+0x26c>)
 8004902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004904:	429a      	cmp	r2, r3
 8004906:	d30d      	bcc.n	8004924 <Animation_Play_Frame+0x38>
 8004908:	4b93      	ldr	r3, [pc, #588]	; (8004b58 <Animation_Play_Frame+0x26c>)
 800490a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800490e:	2b00      	cmp	r3, #0
 8004910:	f040 810e 	bne.w	8004b30 <Animation_Play_Frame+0x244>
 8004914:	4b90      	ldr	r3, [pc, #576]	; (8004b58 <Animation_Play_Frame+0x26c>)
 8004916:	6a1a      	ldr	r2, [r3, #32]
 8004918:	4b8f      	ldr	r3, [pc, #572]	; (8004b58 <Animation_Play_Frame+0x26c>)
 800491a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491c:	3b01      	subs	r3, #1
 800491e:	429a      	cmp	r2, r3
 8004920:	f080 8106 	bcs.w	8004b30 <Animation_Play_Frame+0x244>
		float *from = (float *)&animation.data[SERVO_COUNT * animation.c_pose_n];
 8004924:	4b8c      	ldr	r3, [pc, #560]	; (8004b58 <Animation_Play_Frame+0x26c>)
 8004926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004928:	4b8b      	ldr	r3, [pc, #556]	; (8004b58 <Animation_Play_Frame+0x26c>)
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	015b      	lsls	r3, r3, #5
 800492e:	4413      	add	r3, r2
 8004930:	603b      	str	r3, [r7, #0]
		float *to;
		if(animation.c_pose_n == (animation.poses - 1)){
 8004932:	4b89      	ldr	r3, [pc, #548]	; (8004b58 <Animation_Play_Frame+0x26c>)
 8004934:	6a1a      	ldr	r2, [r3, #32]
 8004936:	4b88      	ldr	r3, [pc, #544]	; (8004b58 <Animation_Play_Frame+0x26c>)
 8004938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493a:	3b01      	subs	r3, #1
 800493c:	429a      	cmp	r2, r3
 800493e:	d103      	bne.n	8004948 <Animation_Play_Frame+0x5c>
			to = (float *)&animation.data[0];
 8004940:	4b85      	ldr	r3, [pc, #532]	; (8004b58 <Animation_Play_Frame+0x26c>)
 8004942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004944:	60fb      	str	r3, [r7, #12]
 8004946:	e007      	b.n	8004958 <Animation_Play_Frame+0x6c>
		}else{
			to = (float *)&animation.data[SERVO_COUNT * (animation.c_pose_n + 1)];
 8004948:	4b83      	ldr	r3, [pc, #524]	; (8004b58 <Animation_Play_Frame+0x26c>)
 800494a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800494c:	4b82      	ldr	r3, [pc, #520]	; (8004b58 <Animation_Play_Frame+0x26c>)
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	3301      	adds	r3, #1
 8004952:	015b      	lsls	r3, r3, #5
 8004954:	4413      	add	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]
		}

		if(!animation.c_step_n){
 8004958:	4b7f      	ldr	r3, [pc, #508]	; (8004b58 <Animation_Play_Frame+0x26c>)
 800495a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495c:	2b00      	cmp	r3, #0
 800495e:	d149      	bne.n	80049f4 <Animation_Play_Frame+0x108>
			//At first step of pose transition
			float max = 0;
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	60bb      	str	r3, [r7, #8]
			uint8_t i = 0;
 8004966:	2300      	movs	r3, #0
 8004968:	71fb      	strb	r3, [r7, #7]
			while(i != SERVO_COUNT){
 800496a:	e035      	b.n	80049d8 <Animation_Play_Frame+0xec>
				if(fabs(to[i] - from[i]) > i){
 800496c:	79fb      	ldrb	r3, [r7, #7]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	4413      	add	r3, r2
 8004974:	6818      	ldr	r0, [r3, #0]
 8004976:	79fb      	ldrb	r3, [r7, #7]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	4413      	add	r3, r2
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4619      	mov	r1, r3
 8004982:	f7fb fe2b 	bl	80005dc <__aeabi_fsub>
 8004986:	4603      	mov	r3, r0
 8004988:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800498c:	4618      	mov	r0, r3
 800498e:	f7fb fd41 	bl	8000414 <__aeabi_f2d>
 8004992:	4604      	mov	r4, r0
 8004994:	460d      	mov	r5, r1
 8004996:	79fb      	ldrb	r3, [r7, #7]
 8004998:	4618      	mov	r0, r3
 800499a:	f7fb fd29 	bl	80003f0 <__aeabi_i2d>
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	4620      	mov	r0, r4
 80049a4:	4629      	mov	r1, r5
 80049a6:	f7fb fe0b 	bl	80005c0 <__aeabi_dcmpgt>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d010      	beq.n	80049d2 <Animation_Play_Frame+0xe6>
					max = fabs(to[i] - from[i]);
 80049b0:	79fb      	ldrb	r3, [r7, #7]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	4413      	add	r3, r2
 80049b8:	6818      	ldr	r0, [r3, #0]
 80049ba:	79fb      	ldrb	r3, [r7, #7]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	4413      	add	r3, r2
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4619      	mov	r1, r3
 80049c6:	f7fb fe09 	bl	80005dc <__aeabi_fsub>
 80049ca:	4603      	mov	r3, r0
 80049cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049d0:	60bb      	str	r3, [r7, #8]
				}
				i++;
 80049d2:	79fb      	ldrb	r3, [r7, #7]
 80049d4:	3301      	adds	r3, #1
 80049d6:	71fb      	strb	r3, [r7, #7]
			while(i != SERVO_COUNT){
 80049d8:	79fb      	ldrb	r3, [r7, #7]
 80049da:	2b08      	cmp	r3, #8
 80049dc:	d1c6      	bne.n	800496c <Animation_Play_Frame+0x80>
			}
			animation.c_steps = max / ANIMATION_MAX_SUBSTEP;
 80049de:	495f      	ldr	r1, [pc, #380]	; (8004b5c <Animation_Play_Frame+0x270>)
 80049e0:	68b8      	ldr	r0, [r7, #8]
 80049e2:	f7fb ffb9 	bl	8000958 <__aeabi_fdiv>
 80049e6:	4603      	mov	r3, r0
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7fc f8c7 	bl	8000b7c <__aeabi_f2uiz>
 80049ee:	4603      	mov	r3, r0
 80049f0:	4a59      	ldr	r2, [pc, #356]	; (8004b58 <Animation_Play_Frame+0x26c>)
 80049f2:	6253      	str	r3, [r2, #36]	; 0x24
		}

		if(animation.c_step_n != animation.c_steps){
 80049f4:	4b58      	ldr	r3, [pc, #352]	; (8004b58 <Animation_Play_Frame+0x26c>)
 80049f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049f8:	4b57      	ldr	r3, [pc, #348]	; (8004b58 <Animation_Play_Frame+0x26c>)
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	429a      	cmp	r2, r3
 80049fe:	f000 808e 	beq.w	8004b1e <Animation_Play_Frame+0x232>
			uint8_t i = 0;
 8004a02:	2300      	movs	r3, #0
 8004a04:	71bb      	strb	r3, [r7, #6]
			while(i != SERVO_COUNT){
 8004a06:	e07d      	b.n	8004b04 <Animation_Play_Frame+0x218>
				if(to[i] > from[i]){
 8004a08:	79bb      	ldrb	r3, [r7, #6]
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	4413      	add	r3, r2
 8004a10:	6818      	ldr	r0, [r3, #0]
 8004a12:	79bb      	ldrb	r3, [r7, #6]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	4413      	add	r3, r2
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	f7fc f8a3 	bl	8000b68 <__aeabi_fcmpgt>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d035      	beq.n	8004a94 <Animation_Play_Frame+0x1a8>
					animation.c_data[i] = from[i] + (((to[i] - from[i]) / animation.c_steps) * animation.c_step_n);
 8004a28:	79bb      	ldrb	r3, [r7, #6]
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	4413      	add	r3, r2
 8004a30:	681d      	ldr	r5, [r3, #0]
 8004a32:	79bb      	ldrb	r3, [r7, #6]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4413      	add	r3, r2
 8004a3a:	6818      	ldr	r0, [r3, #0]
 8004a3c:	79bb      	ldrb	r3, [r7, #6]
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	4413      	add	r3, r2
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4619      	mov	r1, r3
 8004a48:	f7fb fdc8 	bl	80005dc <__aeabi_fsub>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	461c      	mov	r4, r3
 8004a50:	4b41      	ldr	r3, [pc, #260]	; (8004b58 <Animation_Play_Frame+0x26c>)
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fb fe73 	bl	8000740 <__aeabi_ui2f>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	4620      	mov	r0, r4
 8004a60:	f7fb ff7a 	bl	8000958 <__aeabi_fdiv>
 8004a64:	4603      	mov	r3, r0
 8004a66:	461c      	mov	r4, r3
 8004a68:	4b3b      	ldr	r3, [pc, #236]	; (8004b58 <Animation_Play_Frame+0x26c>)
 8004a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7fb fe67 	bl	8000740 <__aeabi_ui2f>
 8004a72:	4603      	mov	r3, r0
 8004a74:	4619      	mov	r1, r3
 8004a76:	4620      	mov	r0, r4
 8004a78:	f7fb feba 	bl	80007f0 <__aeabi_fmul>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	79bc      	ldrb	r4, [r7, #6]
 8004a80:	4619      	mov	r1, r3
 8004a82:	4628      	mov	r0, r5
 8004a84:	f7fb fdac 	bl	80005e0 <__addsf3>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	4b32      	ldr	r3, [pc, #200]	; (8004b58 <Animation_Play_Frame+0x26c>)
 8004a8e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8004a92:	e034      	b.n	8004afe <Animation_Play_Frame+0x212>
				}else{
					animation.c_data[i] = from[i] - (((from[i] - to[i]) / animation.c_steps) * animation.c_step_n);
 8004a94:	79bb      	ldrb	r3, [r7, #6]
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	681d      	ldr	r5, [r3, #0]
 8004a9e:	79bb      	ldrb	r3, [r7, #6]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	6818      	ldr	r0, [r3, #0]
 8004aa8:	79bb      	ldrb	r3, [r7, #6]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4413      	add	r3, r2
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	f7fb fd92 	bl	80005dc <__aeabi_fsub>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	461c      	mov	r4, r3
 8004abc:	4b26      	ldr	r3, [pc, #152]	; (8004b58 <Animation_Play_Frame+0x26c>)
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fb fe3d 	bl	8000740 <__aeabi_ui2f>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	4619      	mov	r1, r3
 8004aca:	4620      	mov	r0, r4
 8004acc:	f7fb ff44 	bl	8000958 <__aeabi_fdiv>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	461c      	mov	r4, r3
 8004ad4:	4b20      	ldr	r3, [pc, #128]	; (8004b58 <Animation_Play_Frame+0x26c>)
 8004ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7fb fe31 	bl	8000740 <__aeabi_ui2f>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	f7fb fe84 	bl	80007f0 <__aeabi_fmul>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	79bc      	ldrb	r4, [r7, #6]
 8004aec:	4619      	mov	r1, r3
 8004aee:	4628      	mov	r0, r5
 8004af0:	f7fb fd74 	bl	80005dc <__aeabi_fsub>
 8004af4:	4603      	mov	r3, r0
 8004af6:	461a      	mov	r2, r3
 8004af8:	4b17      	ldr	r3, [pc, #92]	; (8004b58 <Animation_Play_Frame+0x26c>)
 8004afa:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
				}
				i++;
 8004afe:	79bb      	ldrb	r3, [r7, #6]
 8004b00:	3301      	adds	r3, #1
 8004b02:	71bb      	strb	r3, [r7, #6]
			while(i != SERVO_COUNT){
 8004b04:	79bb      	ldrb	r3, [r7, #6]
 8004b06:	2b08      	cmp	r3, #8
 8004b08:	f47f af7e 	bne.w	8004a08 <Animation_Play_Frame+0x11c>
			}
			Servo_Set((float *)&animation.c_data[0]);
 8004b0c:	4812      	ldr	r0, [pc, #72]	; (8004b58 <Animation_Play_Frame+0x26c>)
 8004b0e:	f7ff fd43 	bl	8004598 <Servo_Set>
			animation.c_step_n++;
 8004b12:	4b11      	ldr	r3, [pc, #68]	; (8004b58 <Animation_Play_Frame+0x26c>)
 8004b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b16:	3301      	adds	r3, #1
 8004b18:	4a0f      	ldr	r2, [pc, #60]	; (8004b58 <Animation_Play_Frame+0x26c>)
 8004b1a:	6293      	str	r3, [r2, #40]	; 0x28
	if((animation.loop_en && (animation.c_pose_n < animation.poses)) || (!animation.loop_en && (animation.c_pose_n < (animation.poses - 1)))){
 8004b1c:	e017      	b.n	8004b4e <Animation_Play_Frame+0x262>
		}else{
			animation.c_step_n = 0;
 8004b1e:	4b0e      	ldr	r3, [pc, #56]	; (8004b58 <Animation_Play_Frame+0x26c>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	629a      	str	r2, [r3, #40]	; 0x28
			animation.c_pose_n++;
 8004b24:	4b0c      	ldr	r3, [pc, #48]	; (8004b58 <Animation_Play_Frame+0x26c>)
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	4a0b      	ldr	r2, [pc, #44]	; (8004b58 <Animation_Play_Frame+0x26c>)
 8004b2c:	6213      	str	r3, [r2, #32]
	if((animation.loop_en && (animation.c_pose_n < animation.poses)) || (!animation.loop_en && (animation.c_pose_n < (animation.poses - 1)))){
 8004b2e:	e00e      	b.n	8004b4e <Animation_Play_Frame+0x262>
		}
	}else if(animation.loop_en){
 8004b30:	4b09      	ldr	r3, [pc, #36]	; (8004b58 <Animation_Play_Frame+0x26c>)
 8004b32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d006      	beq.n	8004b48 <Animation_Play_Frame+0x25c>
		animation.c_pose_n = 0;
 8004b3a:	4b07      	ldr	r3, [pc, #28]	; (8004b58 <Animation_Play_Frame+0x26c>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	621a      	str	r2, [r3, #32]
		animation.c_step_n = 0;
 8004b40:	4b05      	ldr	r3, [pc, #20]	; (8004b58 <Animation_Play_Frame+0x26c>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	629a      	str	r2, [r3, #40]	; 0x28
	}else{
		Animation_Stop();
	}
}
 8004b46:	e002      	b.n	8004b4e <Animation_Play_Frame+0x262>
		Animation_Stop();
 8004b48:	f7ff fe96 	bl	8004878 <Animation_Stop>
}
 8004b4c:	e7ff      	b.n	8004b4e <Animation_Play_Frame+0x262>
 8004b4e:	bf00      	nop
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bdb0      	pop	{r4, r5, r7, pc}
 8004b56:	bf00      	nop
 8004b58:	200009ec 	.word	0x200009ec
 8004b5c:	3f0e38e4 	.word	0x3f0e38e4

08004b60 <Animation_Play>:
void Animation_Play(){
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
	if(animation.poses && (animation.c_frame_delay >= animation.frame_delay)){
 8004b64:	4b08      	ldr	r3, [pc, #32]	; (8004b88 <Animation_Play+0x28>)
 8004b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00a      	beq.n	8004b82 <Animation_Play+0x22>
 8004b6c:	4b06      	ldr	r3, [pc, #24]	; (8004b88 <Animation_Play+0x28>)
 8004b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b70:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <Animation_Play+0x28>)
 8004b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d304      	bcc.n	8004b82 <Animation_Play+0x22>
		Animation_Play_Frame();
 8004b78:	f7ff feb8 	bl	80048ec <Animation_Play_Frame>
		animation.c_frame_delay = 0;
 8004b7c:	4b02      	ldr	r3, [pc, #8]	; (8004b88 <Animation_Play+0x28>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 8004b82:	bf00      	nop
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	200009ec 	.word	0x200009ec

08004b8c <App_SysTick>:
	uint8_t cmd;
	uint32_t cmd_time_ms;
	uint8_t data[APP_DATA_BUFF_SIZE];
}app;

void App_SysTick(){
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
	if(app.cmd && (app.cmd_time_ms < APP_CMD_TIMEOUT_MS)){
 8004b90:	4b08      	ldr	r3, [pc, #32]	; (8004bb4 <App_SysTick+0x28>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d009      	beq.n	8004bac <App_SysTick+0x20>
 8004b98:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <App_SysTick+0x28>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004ba0:	d204      	bcs.n	8004bac <App_SysTick+0x20>
		app.cmd_time_ms++;
 8004ba2:	4b04      	ldr	r3, [pc, #16]	; (8004bb4 <App_SysTick+0x28>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	4a02      	ldr	r2, [pc, #8]	; (8004bb4 <App_SysTick+0x28>)
 8004baa:	6053      	str	r3, [r2, #4]
	}
}
 8004bac:	bf00      	nop
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bc80      	pop	{r7}
 8004bb2:	4770      	bx	lr
 8004bb4:	20000a2c 	.word	0x20000a2c

08004bb8 <App_Init>:

void App_Init(){
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
	Settings_Init();
 8004bbc:	f000 fda8 	bl	8005710 <Settings_Init>
	Parser_Init();
 8004bc0:	f000 fb90 	bl	80052e4 <Parser_Init>
}
 8004bc4:	bf00      	nop
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <App_Loop>:
void App_Loop(){
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
			app.cmd_time_ms = 0;
		}
	}
*/
	//Handle animation commands
	uint8_t cmd = Parser_Update((uint8_t *)&app.data[0]);
 8004bce:	487d      	ldr	r0, [pc, #500]	; (8004dc4 <App_Loop+0x1fc>)
 8004bd0:	f000 f922 	bl	8004e18 <Parser_Update>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	71fb      	strb	r3, [r7, #7]
	//Reset command timeout timer
	if(app.cmd && cmd){
 8004bd8:	4b7b      	ldr	r3, [pc, #492]	; (8004dc8 <App_Loop+0x200>)
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d005      	beq.n	8004bec <App_Loop+0x24>
 8004be0:	79fb      	ldrb	r3, [r7, #7]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d002      	beq.n	8004bec <App_Loop+0x24>
		app.cmd_time_ms = 0;
 8004be6:	4b78      	ldr	r3, [pc, #480]	; (8004dc8 <App_Loop+0x200>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	605a      	str	r2, [r3, #4]
	}
	//If we got a new command
	if(cmd && (app.cmd != cmd)){
 8004bec:	79fb      	ldrb	r3, [r7, #7]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 8097 	beq.w	8004d22 <App_Loop+0x15a>
 8004bf4:	4b74      	ldr	r3, [pc, #464]	; (8004dc8 <App_Loop+0x200>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	79fa      	ldrb	r2, [r7, #7]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	f000 8091 	beq.w	8004d22 <App_Loop+0x15a>
		app.cmd = cmd;
 8004c00:	4a71      	ldr	r2, [pc, #452]	; (8004dc8 <App_Loop+0x200>)
 8004c02:	79fb      	ldrb	r3, [r7, #7]
 8004c04:	7013      	strb	r3, [r2, #0]
		switch(cmd){
 8004c06:	79fb      	ldrb	r3, [r7, #7]
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	2b17      	cmp	r3, #23
 8004c0c:	d87e      	bhi.n	8004d0c <App_Loop+0x144>
 8004c0e:	a201      	add	r2, pc, #4	; (adr r2, 8004c14 <App_Loop+0x4c>)
 8004c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c14:	08004c75 	.word	0x08004c75
 8004c18:	08004c7d 	.word	0x08004c7d
 8004c1c:	08004c85 	.word	0x08004c85
 8004c20:	08004c8d 	.word	0x08004c8d
 8004c24:	08004c95 	.word	0x08004c95
 8004c28:	08004c9d 	.word	0x08004c9d
 8004c2c:	08004ca5 	.word	0x08004ca5
 8004c30:	08004cad 	.word	0x08004cad
 8004c34:	08004cb5 	.word	0x08004cb5
 8004c38:	08004cbd 	.word	0x08004cbd
 8004c3c:	08004cc5 	.word	0x08004cc5
 8004c40:	08004ccd 	.word	0x08004ccd
 8004c44:	08004cd5 	.word	0x08004cd5
 8004c48:	08004cdd 	.word	0x08004cdd
 8004c4c:	08004ce5 	.word	0x08004ce5
 8004c50:	08004ced 	.word	0x08004ced
 8004c54:	08004cf5 	.word	0x08004cf5
 8004c58:	08004cfd 	.word	0x08004cfd
 8004c5c:	08004d0d 	.word	0x08004d0d
 8004c60:	08004d0d 	.word	0x08004d0d
 8004c64:	08004d0d 	.word	0x08004d0d
 8004c68:	08004d0d 	.word	0x08004d0d
 8004c6c:	08004d0d 	.word	0x08004d0d
 8004c70:	08004d05 	.word	0x08004d05
			//Start moving, ignoring any current pose
			case PARSER_CMD_FORAWRD_1:
				Animation_Set((anim_data_t *)&anim_data_forward_1);
 8004c74:	4855      	ldr	r0, [pc, #340]	; (8004dcc <App_Loop+0x204>)
 8004c76:	f7ff fe17 	bl	80048a8 <Animation_Set>
			break;
 8004c7a:	e047      	b.n	8004d0c <App_Loop+0x144>
			case PARSER_CMD_FORAWRD_2:
				Animation_Set((anim_data_t *)&anim_data_forward_2);
 8004c7c:	4854      	ldr	r0, [pc, #336]	; (8004dd0 <App_Loop+0x208>)
 8004c7e:	f7ff fe13 	bl	80048a8 <Animation_Set>
			break;
 8004c82:	e043      	b.n	8004d0c <App_Loop+0x144>
			case PARSER_CMD_FORAWRD_3:
				Animation_Set((anim_data_t *)&anim_data_forward_3);
 8004c84:	4853      	ldr	r0, [pc, #332]	; (8004dd4 <App_Loop+0x20c>)
 8004c86:	f7ff fe0f 	bl	80048a8 <Animation_Set>
			break;
 8004c8a:	e03f      	b.n	8004d0c <App_Loop+0x144>
			case PARSER_CMD_BACKWARD_1:
				Animation_Set((anim_data_t *)&anim_data_backward_1);
 8004c8c:	4852      	ldr	r0, [pc, #328]	; (8004dd8 <App_Loop+0x210>)
 8004c8e:	f7ff fe0b 	bl	80048a8 <Animation_Set>
			break;
 8004c92:	e03b      	b.n	8004d0c <App_Loop+0x144>
			case PARSER_CMD_BACKWARD_2:
				Animation_Set((anim_data_t *)&anim_data_backward_2);
 8004c94:	4851      	ldr	r0, [pc, #324]	; (8004ddc <App_Loop+0x214>)
 8004c96:	f7ff fe07 	bl	80048a8 <Animation_Set>
			break;
 8004c9a:	e037      	b.n	8004d0c <App_Loop+0x144>
			case PARSER_CMD_BACKWARD_3:
				Animation_Set((anim_data_t *)&anim_data_backward_3);
 8004c9c:	4850      	ldr	r0, [pc, #320]	; (8004de0 <App_Loop+0x218>)
 8004c9e:	f7ff fe03 	bl	80048a8 <Animation_Set>
			break;
 8004ca2:	e033      	b.n	8004d0c <App_Loop+0x144>
			case PARSER_CMD_TURN_LEFT_1:
				Animation_Set((anim_data_t *)&anim_data_turn_left_1);
 8004ca4:	484f      	ldr	r0, [pc, #316]	; (8004de4 <App_Loop+0x21c>)
 8004ca6:	f7ff fdff 	bl	80048a8 <Animation_Set>
			break;
 8004caa:	e02f      	b.n	8004d0c <App_Loop+0x144>
			case PARSER_CMD_TURN_LEFT_2:
				Animation_Set((anim_data_t *)&anim_data_turn_left_2);
 8004cac:	484e      	ldr	r0, [pc, #312]	; (8004de8 <App_Loop+0x220>)
 8004cae:	f7ff fdfb 	bl	80048a8 <Animation_Set>
			break;
 8004cb2:	e02b      	b.n	8004d0c <App_Loop+0x144>
			case PARSER_CMD_TURN_LEFT_3:
				Animation_Set((anim_data_t *)&anim_data_turn_left_3);
 8004cb4:	484d      	ldr	r0, [pc, #308]	; (8004dec <App_Loop+0x224>)
 8004cb6:	f7ff fdf7 	bl	80048a8 <Animation_Set>
			break;
 8004cba:	e027      	b.n	8004d0c <App_Loop+0x144>
			case PARSER_CMD_TURN_RIGHT_1:
				Animation_Set((anim_data_t *)&anim_data_turn_right_1);
 8004cbc:	484c      	ldr	r0, [pc, #304]	; (8004df0 <App_Loop+0x228>)
 8004cbe:	f7ff fdf3 	bl	80048a8 <Animation_Set>
			break;
 8004cc2:	e023      	b.n	8004d0c <App_Loop+0x144>
			case PARSER_CMD_TURN_RIGHT_2:
				Animation_Set((anim_data_t *)&anim_data_turn_right_2);
 8004cc4:	484b      	ldr	r0, [pc, #300]	; (8004df4 <App_Loop+0x22c>)
 8004cc6:	f7ff fdef 	bl	80048a8 <Animation_Set>
			break;
 8004cca:	e01f      	b.n	8004d0c <App_Loop+0x144>
			case PARSER_CMD_TURN_RIGHT_3:
				Animation_Set((anim_data_t *)&anim_data_turn_right_3);
 8004ccc:	484a      	ldr	r0, [pc, #296]	; (8004df8 <App_Loop+0x230>)
 8004cce:	f7ff fdeb 	bl	80048a8 <Animation_Set>
			break;
 8004cd2:	e01b      	b.n	8004d0c <App_Loop+0x144>
			case PARSER_CMD_SLIDE_LEFT_1:
				Animation_Set((anim_data_t *)&anim_data_slide_left_1);
 8004cd4:	4849      	ldr	r0, [pc, #292]	; (8004dfc <App_Loop+0x234>)
 8004cd6:	f7ff fde7 	bl	80048a8 <Animation_Set>
			break;
 8004cda:	e017      	b.n	8004d0c <App_Loop+0x144>
			case PARSER_CMD_SLIDE_LEFT_2:
				Animation_Set((anim_data_t *)&anim_data_slide_left_2);
 8004cdc:	4848      	ldr	r0, [pc, #288]	; (8004e00 <App_Loop+0x238>)
 8004cde:	f7ff fde3 	bl	80048a8 <Animation_Set>
			break;
 8004ce2:	e013      	b.n	8004d0c <App_Loop+0x144>
			case PARSER_CMD_SLIDE_LEFT_3:
				Animation_Set((anim_data_t *)&anim_data_slide_left_3);
 8004ce4:	4847      	ldr	r0, [pc, #284]	; (8004e04 <App_Loop+0x23c>)
 8004ce6:	f7ff fddf 	bl	80048a8 <Animation_Set>
			break;
 8004cea:	e00f      	b.n	8004d0c <App_Loop+0x144>
			case PARSER_CMD_SLIDE_RIGHT_1:
				Animation_Set((anim_data_t *)&anim_data_slide_right_1);
 8004cec:	4846      	ldr	r0, [pc, #280]	; (8004e08 <App_Loop+0x240>)
 8004cee:	f7ff fddb 	bl	80048a8 <Animation_Set>
			break;
 8004cf2:	e00b      	b.n	8004d0c <App_Loop+0x144>
			case PARSER_CMD_SLIDE_RIGHT_2:
				Animation_Set((anim_data_t *)&anim_data_slide_right_2);
 8004cf4:	4845      	ldr	r0, [pc, #276]	; (8004e0c <App_Loop+0x244>)
 8004cf6:	f7ff fdd7 	bl	80048a8 <Animation_Set>
			break;
 8004cfa:	e007      	b.n	8004d0c <App_Loop+0x144>
			case PARSER_CMD_SLIDE_RIGHT_3:
				Animation_Set((anim_data_t *)&anim_data_slide_right_3);
 8004cfc:	4844      	ldr	r0, [pc, #272]	; (8004e10 <App_Loop+0x248>)
 8004cfe:	f7ff fdd3 	bl	80048a8 <Animation_Set>
			break;
 8004d02:	e003      	b.n	8004d0c <App_Loop+0x144>
			case PARSER_CMD_TRICK_3_HELLO:
			break;

			//Prevent any return to standby pose or kick animations on timeout
			case PARSER_CMD_SETT:
				app.cmd = PARSER_CMD_NONE;
 8004d04:	4b30      	ldr	r3, [pc, #192]	; (8004dc8 <App_Loop+0x200>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	701a      	strb	r2, [r3, #0]
			break;
 8004d0a:	bf00      	nop
		}
		
		if(app.cmd && (app.cmd != PARSER_CMD_KICK)){
 8004d0c:	4b2e      	ldr	r3, [pc, #184]	; (8004dc8 <App_Loop+0x200>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d006      	beq.n	8004d22 <App_Loop+0x15a>
 8004d14:	4b2c      	ldr	r3, [pc, #176]	; (8004dc8 <App_Loop+0x200>)
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	2b13      	cmp	r3, #19
 8004d1a:	d002      	beq.n	8004d22 <App_Loop+0x15a>
			LED_Set_Mode(LED_ACCELERATE);
 8004d1c:	2001      	movs	r0, #1
 8004d1e:	f7ff fbe5 	bl	80044ec <LED_Set_Mode>

	//!TBD Kick and Drive mode directions and value update
	//!TBD Animation - Play START once, play loop/play loop with updated variables

	//Set return to standby pose and kick animations if command timed out
	if(app.cmd_time_ms == APP_CMD_TIMEOUT_MS){
 8004d22:	4b29      	ldr	r3, [pc, #164]	; (8004dc8 <App_Loop+0x200>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004d2a:	d144      	bne.n	8004db6 <App_Loop+0x1ee>
		switch(app.cmd){
 8004d2c:	4b26      	ldr	r3, [pc, #152]	; (8004dc8 <App_Loop+0x200>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	3b01      	subs	r3, #1
 8004d32:	2b16      	cmp	r3, #22
 8004d34:	d840      	bhi.n	8004db8 <App_Loop+0x1f0>
 8004d36:	a201      	add	r2, pc, #4	; (adr r2, 8004d3c <App_Loop+0x174>)
 8004d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3c:	08004d99 	.word	0x08004d99
 8004d40:	08004d99 	.word	0x08004d99
 8004d44:	08004d99 	.word	0x08004d99
 8004d48:	08004d99 	.word	0x08004d99
 8004d4c:	08004d99 	.word	0x08004d99
 8004d50:	08004d99 	.word	0x08004d99
 8004d54:	08004d99 	.word	0x08004d99
 8004d58:	08004d99 	.word	0x08004d99
 8004d5c:	08004d99 	.word	0x08004d99
 8004d60:	08004d99 	.word	0x08004d99
 8004d64:	08004d99 	.word	0x08004d99
 8004d68:	08004d99 	.word	0x08004d99
 8004d6c:	08004d99 	.word	0x08004d99
 8004d70:	08004d99 	.word	0x08004d99
 8004d74:	08004d99 	.word	0x08004d99
 8004d78:	08004d99 	.word	0x08004d99
 8004d7c:	08004d99 	.word	0x08004d99
 8004d80:	08004d99 	.word	0x08004d99
 8004d84:	08004db9 	.word	0x08004db9
 8004d88:	08004d99 	.word	0x08004d99
 8004d8c:	08004db9 	.word	0x08004db9
 8004d90:	08004db9 	.word	0x08004db9
 8004d94:	08004db9 	.word	0x08004db9
			case PARSER_CMD_TURN_RIGHT_1: case PARSER_CMD_TURN_RIGHT_2: case PARSER_CMD_TURN_RIGHT_3:
			case PARSER_CMD_SLIDE_LEFT_1: case PARSER_CMD_SLIDE_LEFT_2: case PARSER_CMD_SLIDE_LEFT_3:
			case PARSER_CMD_SLIDE_RIGHT_1: case PARSER_CMD_SLIDE_RIGHT_2: case PARSER_CMD_SLIDE_RIGHT_3:
			case PARSER_CMD_DRIVE:
				//Return to standby pose
				LED_Set_Mode(LED_COOL_DOWN);
 8004d98:	2002      	movs	r0, #2
 8004d9a:	f7ff fba7 	bl	80044ec <LED_Set_Mode>
				app.cmd = PARSER_CMD_NONE;
 8004d9e:	4b0a      	ldr	r3, [pc, #40]	; (8004dc8 <App_Loop+0x200>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	701a      	strb	r2, [r3, #0]
				app.cmd_time_ms = 0;
 8004da4:	4b08      	ldr	r3, [pc, #32]	; (8004dc8 <App_Loop+0x200>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	605a      	str	r2, [r3, #4]
				Animation_Stop();
 8004daa:	f7ff fd65 	bl	8004878 <Animation_Stop>
				Servo_Set((float *)&anim_data_standby[0]);
 8004dae:	4819      	ldr	r0, [pc, #100]	; (8004e14 <App_Loop+0x24c>)
 8004db0:	f7ff fbf2 	bl	8004598 <Servo_Set>
			break;
 8004db4:	e000      	b.n	8004db8 <App_Loop+0x1f0>
			break;
			case PARSER_CMD_TRICK_3_HELLO:
				//Return from Hello
			break;
		}
	}
 8004db6:	bf00      	nop

	//Play animation if any
	Animation_Play();
 8004db8:	f7ff fed2 	bl	8004b60 <Animation_Play>
}
 8004dbc:	bf00      	nop
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	20000a34 	.word	0x20000a34
 8004dc8:	20000a2c 	.word	0x20000a2c
 8004dcc:	08006a74 	.word	0x08006a74
 8004dd0:	08006b00 	.word	0x08006b00
 8004dd4:	08006b8c 	.word	0x08006b8c
 8004dd8:	08006c18 	.word	0x08006c18
 8004ddc:	08006ca4 	.word	0x08006ca4
 8004de0:	08006d30 	.word	0x08006d30
 8004de4:	08006dbc 	.word	0x08006dbc
 8004de8:	08006e48 	.word	0x08006e48
 8004dec:	08006ed4 	.word	0x08006ed4
 8004df0:	08006f60 	.word	0x08006f60
 8004df4:	08006fec 	.word	0x08006fec
 8004df8:	08007078 	.word	0x08007078
 8004dfc:	08007104 	.word	0x08007104
 8004e00:	08007190 	.word	0x08007190
 8004e04:	0800721c 	.word	0x0800721c
 8004e08:	080072a8 	.word	0x080072a8
 8004e0c:	08007334 	.word	0x08007334
 8004e10:	080073c0 	.word	0x080073c0
 8004e14:	08006a34 	.word	0x08006a34

08004e18 <Parser_Update>:
			#J[NAME][PASSWORD]
*/

uint8_t parser_symbols[] = {'1', '2', '3', '4', '5', '6', 'L', 'K', 'D', 'E', 'F', 'G', 'H', 'I', 'J'};
uint8_t parser_lengths[] = {4, 4, 4, 4, 4, 4, 9, 9, 3, 3, 2, 2, 2, 5, 16};
uint8_t Parser_Update(uint8_t *data){
 8004e18:	b590      	push	{r4, r7, lr}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
	uint8_t ret = PARSER_CMD_NONE;
 8004e20:	2300      	movs	r3, #0
 8004e22:	73fb      	strb	r3, [r7, #15]
	if(Bluetooth_Rx_Ready()){
 8004e24:	f7ff f936 	bl	8004094 <Bluetooth_Rx_Ready>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 8246 	beq.w	80052bc <Parser_Update+0x4a4>
		switch(Bluetooth_Rx_Data()[1]){
 8004e30:	f7ff f926 	bl	8004080 <Bluetooth_Rx_Data>
 8004e34:	4603      	mov	r3, r0
 8004e36:	3301      	adds	r3, #1
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	3b31      	subs	r3, #49	; 0x31
 8004e3c:	2b1b      	cmp	r3, #27
 8004e3e:	f200 823a 	bhi.w	80052b6 <Parser_Update+0x49e>
 8004e42:	a201      	add	r2, pc, #4	; (adr r2, 8004e48 <Parser_Update+0x30>)
 8004e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e48:	08004ec3 	.word	0x08004ec3
 8004e4c:	08004ef5 	.word	0x08004ef5
 8004e50:	08004f27 	.word	0x08004f27
 8004e54:	08004f59 	.word	0x08004f59
 8004e58:	08004f8b 	.word	0x08004f8b
 8004e5c:	08004fbd 	.word	0x08004fbd
 8004e60:	080052b7 	.word	0x080052b7
 8004e64:	080052b7 	.word	0x080052b7
 8004e68:	080052b7 	.word	0x080052b7
 8004e6c:	080052b7 	.word	0x080052b7
 8004e70:	080052b7 	.word	0x080052b7
 8004e74:	080052b7 	.word	0x080052b7
 8004e78:	080052b7 	.word	0x080052b7
 8004e7c:	080052b7 	.word	0x080052b7
 8004e80:	08004eb9 	.word	0x08004eb9
 8004e84:	080052b7 	.word	0x080052b7
 8004e88:	080052b7 	.word	0x080052b7
 8004e8c:	080052b7 	.word	0x080052b7
 8004e90:	080052b7 	.word	0x080052b7
 8004e94:	0800515b 	.word	0x0800515b
 8004e98:	08005191 	.word	0x08005191
 8004e9c:	080051bb 	.word	0x080051bb
 8004ea0:	080051df 	.word	0x080051df
 8004ea4:	080051e5 	.word	0x080051e5
 8004ea8:	080051ed 	.word	0x080051ed
 8004eac:	08005273 	.word	0x08005273
 8004eb0:	080050a5 	.word	0x080050a5
 8004eb4:	08004fef 	.word	0x08004fef
			case '?':
				Bluetooth_Transmit((uint8_t *)"#R", 2);
 8004eb8:	2102      	movs	r1, #2
 8004eba:	48b4      	ldr	r0, [pc, #720]	; (800518c <Parser_Update+0x374>)
 8004ebc:	f7ff f8c8 	bl	8004050 <Bluetooth_Transmit>
			break;
 8004ec0:	e1f9      	b.n	80052b6 <Parser_Update+0x49e>
			case '1':
				switch(Bluetooth_Rx_Data()[3]){
 8004ec2:	f7ff f8dd 	bl	8004080 <Bluetooth_Rx_Data>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	3303      	adds	r3, #3
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	2b33      	cmp	r3, #51	; 0x33
 8004ece:	d00d      	beq.n	8004eec <Parser_Update+0xd4>
 8004ed0:	2b33      	cmp	r3, #51	; 0x33
 8004ed2:	f300 81df 	bgt.w	8005294 <Parser_Update+0x47c>
 8004ed6:	2b31      	cmp	r3, #49	; 0x31
 8004ed8:	d002      	beq.n	8004ee0 <Parser_Update+0xc8>
 8004eda:	2b32      	cmp	r3, #50	; 0x32
 8004edc:	d003      	beq.n	8004ee6 <Parser_Update+0xce>
					break;
					case '3':
						ret = PARSER_CMD_FORAWRD_3;
					break;
				}
			break;
 8004ede:	e1d9      	b.n	8005294 <Parser_Update+0x47c>
						ret = PARSER_CMD_FORAWRD_1;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	73fb      	strb	r3, [r7, #15]
					break;
 8004ee4:	e005      	b.n	8004ef2 <Parser_Update+0xda>
						ret = PARSER_CMD_FORAWRD_2;
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	73fb      	strb	r3, [r7, #15]
					break;
 8004eea:	e002      	b.n	8004ef2 <Parser_Update+0xda>
						ret = PARSER_CMD_FORAWRD_3;
 8004eec:	2303      	movs	r3, #3
 8004eee:	73fb      	strb	r3, [r7, #15]
					break;
 8004ef0:	bf00      	nop
			break;
 8004ef2:	e1cf      	b.n	8005294 <Parser_Update+0x47c>
			case '2':
				switch(Bluetooth_Rx_Data()[3]){
 8004ef4:	f7ff f8c4 	bl	8004080 <Bluetooth_Rx_Data>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	3303      	adds	r3, #3
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	2b33      	cmp	r3, #51	; 0x33
 8004f00:	d00d      	beq.n	8004f1e <Parser_Update+0x106>
 8004f02:	2b33      	cmp	r3, #51	; 0x33
 8004f04:	f300 81c8 	bgt.w	8005298 <Parser_Update+0x480>
 8004f08:	2b31      	cmp	r3, #49	; 0x31
 8004f0a:	d002      	beq.n	8004f12 <Parser_Update+0xfa>
 8004f0c:	2b32      	cmp	r3, #50	; 0x32
 8004f0e:	d003      	beq.n	8004f18 <Parser_Update+0x100>
					break;
					case '3':
						ret = PARSER_CMD_BACKWARD_3;
					break;
				}
			break;
 8004f10:	e1c2      	b.n	8005298 <Parser_Update+0x480>
						ret = PARSER_CMD_BACKWARD_1;
 8004f12:	2304      	movs	r3, #4
 8004f14:	73fb      	strb	r3, [r7, #15]
					break;
 8004f16:	e005      	b.n	8004f24 <Parser_Update+0x10c>
						ret = PARSER_CMD_BACKWARD_2;
 8004f18:	2305      	movs	r3, #5
 8004f1a:	73fb      	strb	r3, [r7, #15]
					break;
 8004f1c:	e002      	b.n	8004f24 <Parser_Update+0x10c>
						ret = PARSER_CMD_BACKWARD_3;
 8004f1e:	2306      	movs	r3, #6
 8004f20:	73fb      	strb	r3, [r7, #15]
					break;
 8004f22:	bf00      	nop
			break;
 8004f24:	e1b8      	b.n	8005298 <Parser_Update+0x480>
			case '3':
				switch(Bluetooth_Rx_Data()[3]){
 8004f26:	f7ff f8ab 	bl	8004080 <Bluetooth_Rx_Data>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	3303      	adds	r3, #3
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	2b33      	cmp	r3, #51	; 0x33
 8004f32:	d00d      	beq.n	8004f50 <Parser_Update+0x138>
 8004f34:	2b33      	cmp	r3, #51	; 0x33
 8004f36:	f300 81b1 	bgt.w	800529c <Parser_Update+0x484>
 8004f3a:	2b31      	cmp	r3, #49	; 0x31
 8004f3c:	d002      	beq.n	8004f44 <Parser_Update+0x12c>
 8004f3e:	2b32      	cmp	r3, #50	; 0x32
 8004f40:	d003      	beq.n	8004f4a <Parser_Update+0x132>
					break;
					case '3':
						ret = PARSER_CMD_TURN_LEFT_3;
					break;
				}
			break;
 8004f42:	e1ab      	b.n	800529c <Parser_Update+0x484>
						ret = PARSER_CMD_TURN_LEFT_1;
 8004f44:	2307      	movs	r3, #7
 8004f46:	73fb      	strb	r3, [r7, #15]
					break;
 8004f48:	e005      	b.n	8004f56 <Parser_Update+0x13e>
						ret = PARSER_CMD_TURN_LEFT_2;
 8004f4a:	2308      	movs	r3, #8
 8004f4c:	73fb      	strb	r3, [r7, #15]
					break;
 8004f4e:	e002      	b.n	8004f56 <Parser_Update+0x13e>
						ret = PARSER_CMD_TURN_LEFT_3;
 8004f50:	2309      	movs	r3, #9
 8004f52:	73fb      	strb	r3, [r7, #15]
					break;
 8004f54:	bf00      	nop
			break;
 8004f56:	e1a1      	b.n	800529c <Parser_Update+0x484>
			case '4':
				switch(Bluetooth_Rx_Data()[3]){
 8004f58:	f7ff f892 	bl	8004080 <Bluetooth_Rx_Data>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	3303      	adds	r3, #3
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	2b33      	cmp	r3, #51	; 0x33
 8004f64:	d00d      	beq.n	8004f82 <Parser_Update+0x16a>
 8004f66:	2b33      	cmp	r3, #51	; 0x33
 8004f68:	f300 819a 	bgt.w	80052a0 <Parser_Update+0x488>
 8004f6c:	2b31      	cmp	r3, #49	; 0x31
 8004f6e:	d002      	beq.n	8004f76 <Parser_Update+0x15e>
 8004f70:	2b32      	cmp	r3, #50	; 0x32
 8004f72:	d003      	beq.n	8004f7c <Parser_Update+0x164>
					break;
					case '3':
						ret = PARSER_CMD_TURN_RIGHT_3;
					break;
				}
			break;
 8004f74:	e194      	b.n	80052a0 <Parser_Update+0x488>
						ret = PARSER_CMD_TURN_RIGHT_1;
 8004f76:	230a      	movs	r3, #10
 8004f78:	73fb      	strb	r3, [r7, #15]
					break;
 8004f7a:	e005      	b.n	8004f88 <Parser_Update+0x170>
						ret = PARSER_CMD_TURN_RIGHT_2;
 8004f7c:	230b      	movs	r3, #11
 8004f7e:	73fb      	strb	r3, [r7, #15]
					break;
 8004f80:	e002      	b.n	8004f88 <Parser_Update+0x170>
						ret = PARSER_CMD_TURN_RIGHT_3;
 8004f82:	230c      	movs	r3, #12
 8004f84:	73fb      	strb	r3, [r7, #15]
					break;
 8004f86:	bf00      	nop
			break;
 8004f88:	e18a      	b.n	80052a0 <Parser_Update+0x488>
			case '5':
				switch(Bluetooth_Rx_Data()[3]){
 8004f8a:	f7ff f879 	bl	8004080 <Bluetooth_Rx_Data>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	3303      	adds	r3, #3
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	2b33      	cmp	r3, #51	; 0x33
 8004f96:	d00d      	beq.n	8004fb4 <Parser_Update+0x19c>
 8004f98:	2b33      	cmp	r3, #51	; 0x33
 8004f9a:	f300 8183 	bgt.w	80052a4 <Parser_Update+0x48c>
 8004f9e:	2b31      	cmp	r3, #49	; 0x31
 8004fa0:	d002      	beq.n	8004fa8 <Parser_Update+0x190>
 8004fa2:	2b32      	cmp	r3, #50	; 0x32
 8004fa4:	d003      	beq.n	8004fae <Parser_Update+0x196>
					break;
					case '3':
						ret = PARSER_CMD_SLIDE_LEFT_3;
					break;
				}
			break;
 8004fa6:	e17d      	b.n	80052a4 <Parser_Update+0x48c>
						ret = PARSER_CMD_SLIDE_LEFT_1;
 8004fa8:	230d      	movs	r3, #13
 8004faa:	73fb      	strb	r3, [r7, #15]
					break;
 8004fac:	e005      	b.n	8004fba <Parser_Update+0x1a2>
						ret = PARSER_CMD_SLIDE_LEFT_2;
 8004fae:	230e      	movs	r3, #14
 8004fb0:	73fb      	strb	r3, [r7, #15]
					break;
 8004fb2:	e002      	b.n	8004fba <Parser_Update+0x1a2>
						ret = PARSER_CMD_SLIDE_LEFT_3;
 8004fb4:	230f      	movs	r3, #15
 8004fb6:	73fb      	strb	r3, [r7, #15]
					break;
 8004fb8:	bf00      	nop
			break;
 8004fba:	e173      	b.n	80052a4 <Parser_Update+0x48c>
			case '6':
				switch(Bluetooth_Rx_Data()[3]){
 8004fbc:	f7ff f860 	bl	8004080 <Bluetooth_Rx_Data>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	3303      	adds	r3, #3
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	2b33      	cmp	r3, #51	; 0x33
 8004fc8:	d00d      	beq.n	8004fe6 <Parser_Update+0x1ce>
 8004fca:	2b33      	cmp	r3, #51	; 0x33
 8004fcc:	f300 816c 	bgt.w	80052a8 <Parser_Update+0x490>
 8004fd0:	2b31      	cmp	r3, #49	; 0x31
 8004fd2:	d002      	beq.n	8004fda <Parser_Update+0x1c2>
 8004fd4:	2b32      	cmp	r3, #50	; 0x32
 8004fd6:	d003      	beq.n	8004fe0 <Parser_Update+0x1c8>
					break;
					case '3':
						ret = PARSER_CMD_SLIDE_RIGHT_3;
					break;
				}
			break;
 8004fd8:	e166      	b.n	80052a8 <Parser_Update+0x490>
						ret = PARSER_CMD_SLIDE_RIGHT_1;
 8004fda:	2310      	movs	r3, #16
 8004fdc:	73fb      	strb	r3, [r7, #15]
					break;
 8004fde:	e005      	b.n	8004fec <Parser_Update+0x1d4>
						ret = PARSER_CMD_SLIDE_RIGHT_2;
 8004fe0:	2311      	movs	r3, #17
 8004fe2:	73fb      	strb	r3, [r7, #15]
					break;
 8004fe4:	e002      	b.n	8004fec <Parser_Update+0x1d4>
						ret = PARSER_CMD_SLIDE_RIGHT_3;
 8004fe6:	2312      	movs	r3, #18
 8004fe8:	73fb      	strb	r3, [r7, #15]
					break;
 8004fea:	bf00      	nop
			break;
 8004fec:	e15c      	b.n	80052a8 <Parser_Update+0x490>
			case 'L':
				//Kick
				//Data [DIRECTION][STRENGTH]
				data[0] = ((Bluetooth_Rx_Data()[2] - 48) * 100) + ((Bluetooth_Rx_Data()[3] - 48) * 10) + (Bluetooth_Rx_Data()[4] - 48);
 8004fee:	f7ff f847 	bl	8004080 <Bluetooth_Rx_Data>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	3302      	adds	r3, #2
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	0092      	lsls	r2, r2, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	461a      	mov	r2, r3
 8005000:	0091      	lsls	r1, r2, #2
 8005002:	461a      	mov	r2, r3
 8005004:	460b      	mov	r3, r1
 8005006:	4413      	add	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	b2dc      	uxtb	r4, r3
 800500c:	f7ff f838 	bl	8004080 <Bluetooth_Rx_Data>
 8005010:	4603      	mov	r3, r0
 8005012:	3303      	adds	r3, #3
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	461a      	mov	r2, r3
 8005018:	0092      	lsls	r2, r2, #2
 800501a:	4413      	add	r3, r2
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	b2db      	uxtb	r3, r3
 8005020:	4423      	add	r3, r4
 8005022:	b2dc      	uxtb	r4, r3
 8005024:	f7ff f82c 	bl	8004080 <Bluetooth_Rx_Data>
 8005028:	4603      	mov	r3, r0
 800502a:	3304      	adds	r3, #4
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	4423      	add	r3, r4
 8005030:	b2db      	uxtb	r3, r3
 8005032:	3330      	adds	r3, #48	; 0x30
 8005034:	b2da      	uxtb	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	701a      	strb	r2, [r3, #0]
				data[1] = ((Bluetooth_Rx_Data()[6] - 48) * 100) + ((Bluetooth_Rx_Data()[7] - 48) * 10) + (Bluetooth_Rx_Data()[8] - 48);
 800503a:	f7ff f821 	bl	8004080 <Bluetooth_Rx_Data>
 800503e:	4603      	mov	r3, r0
 8005040:	3306      	adds	r3, #6
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	461a      	mov	r2, r3
 8005046:	0092      	lsls	r2, r2, #2
 8005048:	4413      	add	r3, r2
 800504a:	461a      	mov	r2, r3
 800504c:	0091      	lsls	r1, r2, #2
 800504e:	461a      	mov	r2, r3
 8005050:	460b      	mov	r3, r1
 8005052:	4413      	add	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	b2dc      	uxtb	r4, r3
 8005058:	f7ff f812 	bl	8004080 <Bluetooth_Rx_Data>
 800505c:	4603      	mov	r3, r0
 800505e:	3307      	adds	r3, #7
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	461a      	mov	r2, r3
 8005064:	0092      	lsls	r2, r2, #2
 8005066:	4413      	add	r3, r2
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	b2db      	uxtb	r3, r3
 800506c:	4423      	add	r3, r4
 800506e:	b2dc      	uxtb	r4, r3
 8005070:	f7ff f806 	bl	8004080 <Bluetooth_Rx_Data>
 8005074:	4603      	mov	r3, r0
 8005076:	3308      	adds	r3, #8
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	4423      	add	r3, r4
 800507c:	b2da      	uxtb	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	3301      	adds	r3, #1
 8005082:	3230      	adds	r2, #48	; 0x30
 8005084:	b2d2      	uxtb	r2, r2
 8005086:	701a      	strb	r2, [r3, #0]
				if((data[0] <= ANIM_DATA_KICK_DIRECTION_MAX) && (data[1] <= ANIM_DATA_KICK_STRENGHT_MAX)){
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2bb4      	cmp	r3, #180	; 0xb4
 800508e:	f200 810d 	bhi.w	80052ac <Parser_Update+0x494>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3301      	adds	r3, #1
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	2b64      	cmp	r3, #100	; 0x64
 800509a:	f200 8107 	bhi.w	80052ac <Parser_Update+0x494>
					ret = PARSER_CMD_KICK;
 800509e:	2313      	movs	r3, #19
 80050a0:	73fb      	strb	r3, [r7, #15]
				}
			break;
 80050a2:	e103      	b.n	80052ac <Parser_Update+0x494>
			case 'K':
				//Drive
				//Data [DIRECTION][STRENGTH]
				data[0] = ((Bluetooth_Rx_Data()[2] - 48) * 100) + ((Bluetooth_Rx_Data()[3] - 48) * 10) + (Bluetooth_Rx_Data()[4] - 48);
 80050a4:	f7fe ffec 	bl	8004080 <Bluetooth_Rx_Data>
 80050a8:	4603      	mov	r3, r0
 80050aa:	3302      	adds	r3, #2
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	461a      	mov	r2, r3
 80050b0:	0092      	lsls	r2, r2, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	461a      	mov	r2, r3
 80050b6:	0091      	lsls	r1, r2, #2
 80050b8:	461a      	mov	r2, r3
 80050ba:	460b      	mov	r3, r1
 80050bc:	4413      	add	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	b2dc      	uxtb	r4, r3
 80050c2:	f7fe ffdd 	bl	8004080 <Bluetooth_Rx_Data>
 80050c6:	4603      	mov	r3, r0
 80050c8:	3303      	adds	r3, #3
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	461a      	mov	r2, r3
 80050ce:	0092      	lsls	r2, r2, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	4423      	add	r3, r4
 80050d8:	b2dc      	uxtb	r4, r3
 80050da:	f7fe ffd1 	bl	8004080 <Bluetooth_Rx_Data>
 80050de:	4603      	mov	r3, r0
 80050e0:	3304      	adds	r3, #4
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	4423      	add	r3, r4
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	3330      	adds	r3, #48	; 0x30
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	701a      	strb	r2, [r3, #0]
				data[1] = ((Bluetooth_Rx_Data()[6] - 48) * 100) + ((Bluetooth_Rx_Data()[7] - 48) * 10) + (Bluetooth_Rx_Data()[8] - 48);
 80050f0:	f7fe ffc6 	bl	8004080 <Bluetooth_Rx_Data>
 80050f4:	4603      	mov	r3, r0
 80050f6:	3306      	adds	r3, #6
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	461a      	mov	r2, r3
 80050fc:	0092      	lsls	r2, r2, #2
 80050fe:	4413      	add	r3, r2
 8005100:	461a      	mov	r2, r3
 8005102:	0091      	lsls	r1, r2, #2
 8005104:	461a      	mov	r2, r3
 8005106:	460b      	mov	r3, r1
 8005108:	4413      	add	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	b2dc      	uxtb	r4, r3
 800510e:	f7fe ffb7 	bl	8004080 <Bluetooth_Rx_Data>
 8005112:	4603      	mov	r3, r0
 8005114:	3307      	adds	r3, #7
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	461a      	mov	r2, r3
 800511a:	0092      	lsls	r2, r2, #2
 800511c:	4413      	add	r3, r2
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	b2db      	uxtb	r3, r3
 8005122:	4423      	add	r3, r4
 8005124:	b2dc      	uxtb	r4, r3
 8005126:	f7fe ffab 	bl	8004080 <Bluetooth_Rx_Data>
 800512a:	4603      	mov	r3, r0
 800512c:	3308      	adds	r3, #8
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	4423      	add	r3, r4
 8005132:	b2da      	uxtb	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3301      	adds	r3, #1
 8005138:	3230      	adds	r2, #48	; 0x30
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	701a      	strb	r2, [r3, #0]
				if((data[0] <= ANIM_DATA_DRIVE_DIRECTION_MAX) && (data[1] <= ANIM_DATA_DRIVE_STRENGHT_MAX)){
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	2bb4      	cmp	r3, #180	; 0xb4
 8005144:	f200 80b4 	bhi.w	80052b0 <Parser_Update+0x498>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	3301      	adds	r3, #1
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	2b64      	cmp	r3, #100	; 0x64
 8005150:	f200 80ae 	bhi.w	80052b0 <Parser_Update+0x498>
					ret = PARSER_CMD_DRIVE;
 8005154:	2314      	movs	r3, #20
 8005156:	73fb      	strb	r3, [r7, #15]
				}
			break;
 8005158:	e0aa      	b.n	80052b0 <Parser_Update+0x498>
			case 'D':
				//Tricks
				switch(Bluetooth_Rx_Data()[3]){
 800515a:	f7fe ff91 	bl	8004080 <Bluetooth_Rx_Data>
 800515e:	4603      	mov	r3, r0
 8005160:	3303      	adds	r3, #3
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	2b33      	cmp	r3, #51	; 0x33
 8005166:	d00d      	beq.n	8005184 <Parser_Update+0x36c>
 8005168:	2b33      	cmp	r3, #51	; 0x33
 800516a:	f300 80a3 	bgt.w	80052b4 <Parser_Update+0x49c>
 800516e:	2b31      	cmp	r3, #49	; 0x31
 8005170:	d002      	beq.n	8005178 <Parser_Update+0x360>
 8005172:	2b32      	cmp	r3, #50	; 0x32
 8005174:	d003      	beq.n	800517e <Parser_Update+0x366>
					break;
					case '3':
						ret = PARSER_CMD_TRICK_3_HELLO;
					break;
				}
			break;
 8005176:	e09d      	b.n	80052b4 <Parser_Update+0x49c>
						ret = PARSER_CMD_TRICK_1_SWIM;
 8005178:	2315      	movs	r3, #21
 800517a:	73fb      	strb	r3, [r7, #15]
					break;
 800517c:	e005      	b.n	800518a <Parser_Update+0x372>
						ret = PARSER_CMD_TRICK_2_WORKOUT;
 800517e:	2316      	movs	r3, #22
 8005180:	73fb      	strb	r3, [r7, #15]
					break;
 8005182:	e002      	b.n	800518a <Parser_Update+0x372>
						ret = PARSER_CMD_TRICK_3_HELLO;
 8005184:	2317      	movs	r3, #23
 8005186:	73fb      	strb	r3, [r7, #15]
					break;
 8005188:	bf00      	nop
			break;
 800518a:	e093      	b.n	80052b4 <Parser_Update+0x49c>
 800518c:	08006a1c 	.word	0x08006a1c
			case 'E':
				//LED Enable/disable from settings page
				LED_Enable(Bluetooth_Rx_Data()[2] - 48);
 8005190:	f7fe ff76 	bl	8004080 <Bluetooth_Rx_Data>
 8005194:	4603      	mov	r3, r0
 8005196:	3302      	adds	r3, #2
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	3b30      	subs	r3, #48	; 0x30
 800519c:	b2db      	uxtb	r3, r3
 800519e:	4618      	mov	r0, r3
 80051a0:	f7ff f9b4 	bl	800450c <LED_Enable>
				Settings_Write_LED(Bluetooth_Rx_Data()[2] - 48);
 80051a4:	f7fe ff6c 	bl	8004080 <Bluetooth_Rx_Data>
 80051a8:	4603      	mov	r3, r0
 80051aa:	3302      	adds	r3, #2
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	3b30      	subs	r3, #48	; 0x30
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 f9e2 	bl	800557c <Settings_Write_LED>
			break;
 80051b8:	e07d      	b.n	80052b6 <Parser_Update+0x49e>
			case 'F':
				//Settings page opened
				Animation_Stop();
 80051ba:	f7ff fb5d 	bl	8004878 <Animation_Stop>
				LED_Set_Mode(LED_CONSTANT);
 80051be:	2000      	movs	r0, #0
 80051c0:	f7ff f994 	bl	80044ec <LED_Set_Mode>
				Servo_Set((float *)&anim_data_calib[0]);
 80051c4:	4845      	ldr	r0, [pc, #276]	; (80052dc <Parser_Update+0x4c4>)
 80051c6:	f7ff f9e7 	bl	8004598 <Servo_Set>
				Bluetooth_Transmit(Settings_Data(), 34);
 80051ca:	f000 f97f 	bl	80054cc <Settings_Data>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2122      	movs	r1, #34	; 0x22
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fe ff3c 	bl	8004050 <Bluetooth_Transmit>
				ret = PARSER_CMD_SETT;
 80051d8:	2318      	movs	r3, #24
 80051da:	73fb      	strb	r3, [r7, #15]
			break;
 80051dc:	e06b      	b.n	80052b6 <Parser_Update+0x49e>
			case 'G':
				//Write settings to flash request
				Settings_Write();
 80051de:	f000 f911 	bl	8005404 <Settings_Write>
			break;
 80051e2:	e068      	b.n	80052b6 <Parser_Update+0x49e>
			case 'H':
				//Settings page closed
				Servo_Set((float *)&anim_data_standby[0]);
 80051e4:	483e      	ldr	r0, [pc, #248]	; (80052e0 <Parser_Update+0x4c8>)
 80051e6:	f7ff f9d7 	bl	8004598 <Servo_Set>
			break;
 80051ea:	e064      	b.n	80052b6 <Parser_Update+0x49e>
			case 'I':
				//Servo calibration reqeuest
				if(Bluetooth_Rx_Data()[2] == '-'){
 80051ec:	f7fe ff48 	bl	8004080 <Bluetooth_Rx_Data>
 80051f0:	4603      	mov	r3, r0
 80051f2:	3302      	adds	r3, #2
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	2b2d      	cmp	r3, #45	; 0x2d
 80051f8:	d11e      	bne.n	8005238 <Parser_Update+0x420>
					Servo_Set_Calib((int8_t)(Bluetooth_Rx_Data()[3]-48) - (2 * (Bluetooth_Rx_Data()[3]-48)), Bluetooth_Rx_Data()[4]-48);
 80051fa:	f7fe ff41 	bl	8004080 <Bluetooth_Rx_Data>
 80051fe:	4603      	mov	r3, r0
 8005200:	3303      	adds	r3, #3
 8005202:	781c      	ldrb	r4, [r3, #0]
 8005204:	f7fe ff3c 	bl	8004080 <Bluetooth_Rx_Data>
 8005208:	4603      	mov	r3, r0
 800520a:	3303      	adds	r3, #3
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	3b30      	subs	r3, #48	; 0x30
 8005210:	b2db      	uxtb	r3, r3
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	b2db      	uxtb	r3, r3
 8005216:	1ae3      	subs	r3, r4, r3
 8005218:	b2db      	uxtb	r3, r3
 800521a:	3b30      	subs	r3, #48	; 0x30
 800521c:	b2db      	uxtb	r3, r3
 800521e:	b25c      	sxtb	r4, r3
 8005220:	f7fe ff2e 	bl	8004080 <Bluetooth_Rx_Data>
 8005224:	4603      	mov	r3, r0
 8005226:	3304      	adds	r3, #4
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	3b30      	subs	r3, #48	; 0x30
 800522c:	b2db      	uxtb	r3, r3
 800522e:	4619      	mov	r1, r3
 8005230:	4620      	mov	r0, r4
 8005232:	f7ff f997 	bl	8004564 <Servo_Set_Calib>
 8005236:	e012      	b.n	800525e <Parser_Update+0x446>
				}else{
					Servo_Set_Calib(Bluetooth_Rx_Data()[3]-48, Bluetooth_Rx_Data()[4]-48);
 8005238:	f7fe ff22 	bl	8004080 <Bluetooth_Rx_Data>
 800523c:	4603      	mov	r3, r0
 800523e:	3303      	adds	r3, #3
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	3b30      	subs	r3, #48	; 0x30
 8005244:	b2db      	uxtb	r3, r3
 8005246:	b25c      	sxtb	r4, r3
 8005248:	f7fe ff1a 	bl	8004080 <Bluetooth_Rx_Data>
 800524c:	4603      	mov	r3, r0
 800524e:	3304      	adds	r3, #4
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	3b30      	subs	r3, #48	; 0x30
 8005254:	b2db      	uxtb	r3, r3
 8005256:	4619      	mov	r1, r3
 8005258:	4620      	mov	r0, r4
 800525a:	f7ff f983 	bl	8004564 <Servo_Set_Calib>
				}
				Settings_Set_Calib(Servo_Calib_Data());
 800525e:	f7ff f977 	bl	8004550 <Servo_Calib_Data>
 8005262:	4603      	mov	r3, r0
 8005264:	4618      	mov	r0, r3
 8005266:	f000 f93b 	bl	80054e0 <Settings_Set_Calib>
				Servo_Set((float *)&anim_data_calib[0]);
 800526a:	481c      	ldr	r0, [pc, #112]	; (80052dc <Parser_Update+0x4c4>)
 800526c:	f7ff f994 	bl	8004598 <Servo_Set>
			break;
 8005270:	e021      	b.n	80052b6 <Parser_Update+0x49e>
			case 'J':
				//Bluetooth name/password change request
				Settings_Write_Bluetooth(&Bluetooth_Rx_Data()[12], &Bluetooth_Rx_Data()[2]);
 8005272:	f7fe ff05 	bl	8004080 <Bluetooth_Rx_Data>
 8005276:	4603      	mov	r3, r0
 8005278:	f103 040c 	add.w	r4, r3, #12
 800527c:	f7fe ff00 	bl	8004080 <Bluetooth_Rx_Data>
 8005280:	4603      	mov	r3, r0
 8005282:	3302      	adds	r3, #2
 8005284:	4619      	mov	r1, r3
 8005286:	4620      	mov	r0, r4
 8005288:	f000 f98c 	bl	80055a4 <Settings_Write_Bluetooth>
				Servo_Set((float *)&anim_data_standby[0]);
 800528c:	4814      	ldr	r0, [pc, #80]	; (80052e0 <Parser_Update+0x4c8>)
 800528e:	f7ff f983 	bl	8004598 <Servo_Set>
			break;
 8005292:	e010      	b.n	80052b6 <Parser_Update+0x49e>
			break;
 8005294:	bf00      	nop
 8005296:	e00e      	b.n	80052b6 <Parser_Update+0x49e>
			break;
 8005298:	bf00      	nop
 800529a:	e00c      	b.n	80052b6 <Parser_Update+0x49e>
			break;
 800529c:	bf00      	nop
 800529e:	e00a      	b.n	80052b6 <Parser_Update+0x49e>
			break;
 80052a0:	bf00      	nop
 80052a2:	e008      	b.n	80052b6 <Parser_Update+0x49e>
			break;
 80052a4:	bf00      	nop
 80052a6:	e006      	b.n	80052b6 <Parser_Update+0x49e>
			break;
 80052a8:	bf00      	nop
 80052aa:	e004      	b.n	80052b6 <Parser_Update+0x49e>
			break;
 80052ac:	bf00      	nop
 80052ae:	e002      	b.n	80052b6 <Parser_Update+0x49e>
			break;
 80052b0:	bf00      	nop
 80052b2:	e000      	b.n	80052b6 <Parser_Update+0x49e>
			break;
 80052b4:	bf00      	nop
		}
		Bluetooth_Listen();
 80052b6:	f7fe fead 	bl	8004014 <Bluetooth_Listen>
 80052ba:	e009      	b.n	80052d0 <Parser_Update+0x4b8>
	}else if(!Bluetooth_Connected_Debounce()){
 80052bc:	f7fe fdd2 	bl	8003e64 <Bluetooth_Connected_Debounce>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d104      	bne.n	80052d0 <Parser_Update+0x4b8>
		Animation_Stop();
 80052c6:	f7ff fad7 	bl	8004878 <Animation_Stop>
		Servo_Set((float *)&anim_data_standby[0]);
 80052ca:	4805      	ldr	r0, [pc, #20]	; (80052e0 <Parser_Update+0x4c8>)
 80052cc:	f7ff f964 	bl	8004598 <Servo_Set>
	}
	return ret;
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd90      	pop	{r4, r7, pc}
 80052da:	bf00      	nop
 80052dc:	08006a54 	.word	0x08006a54
 80052e0:	08006a34 	.word	0x08006a34

080052e4 <Parser_Init>:
void Parser_Init(){
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
	Bluetooth_Init('#', parser_symbols, parser_lengths, sizeof(parser_lengths));
 80052e8:	230f      	movs	r3, #15
 80052ea:	4a03      	ldr	r2, [pc, #12]	; (80052f8 <Parser_Init+0x14>)
 80052ec:	4903      	ldr	r1, [pc, #12]	; (80052fc <Parser_Init+0x18>)
 80052ee:	2023      	movs	r0, #35	; 0x23
 80052f0:	f7fe fee2 	bl	80040b8 <Bluetooth_Init>
}
 80052f4:	bf00      	nop
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	20000018 	.word	0x20000018
 80052fc:	20000008 	.word	0x20000008

08005300 <Settings_Verify>:
#include "Device/servo.h"

static uint8_t settings_act[35];
static const uint8_t settings_def[35] = "#C+0+0+0+0+0+0+0+01234Quadruped 1\n";

uint8_t Settings_Verify(){
 8005300:	b480      	push	{r7}
 8005302:	af00      	add	r7, sp, #0
	if(
		(settings_act[0] != '#')||
 8005304:	4b3e      	ldr	r3, [pc, #248]	; (8005400 <Settings_Verify+0x100>)
 8005306:	781b      	ldrb	r3, [r3, #0]
	if(
 8005308:	2b23      	cmp	r3, #35	; 0x23
 800530a:	d172      	bne.n	80053f2 <Settings_Verify+0xf2>
		(settings_act[1] != 'C')||
 800530c:	4b3c      	ldr	r3, [pc, #240]	; (8005400 <Settings_Verify+0x100>)
 800530e:	785b      	ldrb	r3, [r3, #1]
		(settings_act[0] != '#')||
 8005310:	2b43      	cmp	r3, #67	; 0x43
 8005312:	d16e      	bne.n	80053f2 <Settings_Verify+0xf2>
		((settings_act[2] != '+') && (settings_act[2] != '-')) ||
 8005314:	4b3a      	ldr	r3, [pc, #232]	; (8005400 <Settings_Verify+0x100>)
 8005316:	789b      	ldrb	r3, [r3, #2]
		(settings_act[1] != 'C')||
 8005318:	2b2b      	cmp	r3, #43	; 0x2b
 800531a:	d003      	beq.n	8005324 <Settings_Verify+0x24>
		((settings_act[2] != '+') && (settings_act[2] != '-')) ||
 800531c:	4b38      	ldr	r3, [pc, #224]	; (8005400 <Settings_Verify+0x100>)
 800531e:	789b      	ldrb	r3, [r3, #2]
 8005320:	2b2d      	cmp	r3, #45	; 0x2d
 8005322:	d166      	bne.n	80053f2 <Settings_Verify+0xf2>
		((settings_act[4] != '+') && (settings_act[4] != '-')) ||
 8005324:	4b36      	ldr	r3, [pc, #216]	; (8005400 <Settings_Verify+0x100>)
 8005326:	791b      	ldrb	r3, [r3, #4]
		((settings_act[2] != '+') && (settings_act[2] != '-')) ||
 8005328:	2b2b      	cmp	r3, #43	; 0x2b
 800532a:	d003      	beq.n	8005334 <Settings_Verify+0x34>
		((settings_act[4] != '+') && (settings_act[4] != '-')) ||
 800532c:	4b34      	ldr	r3, [pc, #208]	; (8005400 <Settings_Verify+0x100>)
 800532e:	791b      	ldrb	r3, [r3, #4]
 8005330:	2b2d      	cmp	r3, #45	; 0x2d
 8005332:	d15e      	bne.n	80053f2 <Settings_Verify+0xf2>
		((settings_act[6] != '+') && (settings_act[6] != '-')) ||
 8005334:	4b32      	ldr	r3, [pc, #200]	; (8005400 <Settings_Verify+0x100>)
 8005336:	799b      	ldrb	r3, [r3, #6]
		((settings_act[4] != '+') && (settings_act[4] != '-')) ||
 8005338:	2b2b      	cmp	r3, #43	; 0x2b
 800533a:	d003      	beq.n	8005344 <Settings_Verify+0x44>
		((settings_act[6] != '+') && (settings_act[6] != '-')) ||
 800533c:	4b30      	ldr	r3, [pc, #192]	; (8005400 <Settings_Verify+0x100>)
 800533e:	799b      	ldrb	r3, [r3, #6]
 8005340:	2b2d      	cmp	r3, #45	; 0x2d
 8005342:	d156      	bne.n	80053f2 <Settings_Verify+0xf2>
		((settings_act[8] != '+') && (settings_act[8] != '-')) ||
 8005344:	4b2e      	ldr	r3, [pc, #184]	; (8005400 <Settings_Verify+0x100>)
 8005346:	7a1b      	ldrb	r3, [r3, #8]
		((settings_act[6] != '+') && (settings_act[6] != '-')) ||
 8005348:	2b2b      	cmp	r3, #43	; 0x2b
 800534a:	d003      	beq.n	8005354 <Settings_Verify+0x54>
		((settings_act[8] != '+') && (settings_act[8] != '-')) ||
 800534c:	4b2c      	ldr	r3, [pc, #176]	; (8005400 <Settings_Verify+0x100>)
 800534e:	7a1b      	ldrb	r3, [r3, #8]
 8005350:	2b2d      	cmp	r3, #45	; 0x2d
 8005352:	d14e      	bne.n	80053f2 <Settings_Verify+0xf2>
		((settings_act[10] != '+') && (settings_act[10] != '-')) ||
 8005354:	4b2a      	ldr	r3, [pc, #168]	; (8005400 <Settings_Verify+0x100>)
 8005356:	7a9b      	ldrb	r3, [r3, #10]
		((settings_act[8] != '+') && (settings_act[8] != '-')) ||
 8005358:	2b2b      	cmp	r3, #43	; 0x2b
 800535a:	d003      	beq.n	8005364 <Settings_Verify+0x64>
		((settings_act[10] != '+') && (settings_act[10] != '-')) ||
 800535c:	4b28      	ldr	r3, [pc, #160]	; (8005400 <Settings_Verify+0x100>)
 800535e:	7a9b      	ldrb	r3, [r3, #10]
 8005360:	2b2d      	cmp	r3, #45	; 0x2d
 8005362:	d146      	bne.n	80053f2 <Settings_Verify+0xf2>
		((settings_act[12] != '+') && (settings_act[12] != '-')) ||
 8005364:	4b26      	ldr	r3, [pc, #152]	; (8005400 <Settings_Verify+0x100>)
 8005366:	7b1b      	ldrb	r3, [r3, #12]
		((settings_act[10] != '+') && (settings_act[10] != '-')) ||
 8005368:	2b2b      	cmp	r3, #43	; 0x2b
 800536a:	d003      	beq.n	8005374 <Settings_Verify+0x74>
		((settings_act[12] != '+') && (settings_act[12] != '-')) ||
 800536c:	4b24      	ldr	r3, [pc, #144]	; (8005400 <Settings_Verify+0x100>)
 800536e:	7b1b      	ldrb	r3, [r3, #12]
 8005370:	2b2d      	cmp	r3, #45	; 0x2d
 8005372:	d13e      	bne.n	80053f2 <Settings_Verify+0xf2>
		((settings_act[14] != '+') && (settings_act[14] != '-')) ||
 8005374:	4b22      	ldr	r3, [pc, #136]	; (8005400 <Settings_Verify+0x100>)
 8005376:	7b9b      	ldrb	r3, [r3, #14]
		((settings_act[12] != '+') && (settings_act[12] != '-')) ||
 8005378:	2b2b      	cmp	r3, #43	; 0x2b
 800537a:	d003      	beq.n	8005384 <Settings_Verify+0x84>
		((settings_act[14] != '+') && (settings_act[14] != '-')) ||
 800537c:	4b20      	ldr	r3, [pc, #128]	; (8005400 <Settings_Verify+0x100>)
 800537e:	7b9b      	ldrb	r3, [r3, #14]
 8005380:	2b2d      	cmp	r3, #45	; 0x2d
 8005382:	d136      	bne.n	80053f2 <Settings_Verify+0xf2>
		((settings_act[16] != '+') && (settings_act[16] != '-')) ||
 8005384:	4b1e      	ldr	r3, [pc, #120]	; (8005400 <Settings_Verify+0x100>)
 8005386:	7c1b      	ldrb	r3, [r3, #16]
		((settings_act[14] != '+') && (settings_act[14] != '-')) ||
 8005388:	2b2b      	cmp	r3, #43	; 0x2b
 800538a:	d003      	beq.n	8005394 <Settings_Verify+0x94>
		((settings_act[16] != '+') && (settings_act[16] != '-')) ||
 800538c:	4b1c      	ldr	r3, [pc, #112]	; (8005400 <Settings_Verify+0x100>)
 800538e:	7c1b      	ldrb	r3, [r3, #16]
 8005390:	2b2d      	cmp	r3, #45	; 0x2d
 8005392:	d12e      	bne.n	80053f2 <Settings_Verify+0xf2>
		((settings_act[3] - 48) > 9) ||
 8005394:	4b1a      	ldr	r3, [pc, #104]	; (8005400 <Settings_Verify+0x100>)
 8005396:	78db      	ldrb	r3, [r3, #3]
		((settings_act[16] != '+') && (settings_act[16] != '-')) ||
 8005398:	2b39      	cmp	r3, #57	; 0x39
 800539a:	d82a      	bhi.n	80053f2 <Settings_Verify+0xf2>
		((settings_act[5] - 48) > 9) ||
 800539c:	4b18      	ldr	r3, [pc, #96]	; (8005400 <Settings_Verify+0x100>)
 800539e:	795b      	ldrb	r3, [r3, #5]
		((settings_act[3] - 48) > 9) ||
 80053a0:	2b39      	cmp	r3, #57	; 0x39
 80053a2:	d826      	bhi.n	80053f2 <Settings_Verify+0xf2>
		((settings_act[7] - 48) > 9) ||
 80053a4:	4b16      	ldr	r3, [pc, #88]	; (8005400 <Settings_Verify+0x100>)
 80053a6:	79db      	ldrb	r3, [r3, #7]
		((settings_act[5] - 48) > 9) ||
 80053a8:	2b39      	cmp	r3, #57	; 0x39
 80053aa:	d822      	bhi.n	80053f2 <Settings_Verify+0xf2>
		((settings_act[9] - 48) > 9) ||
 80053ac:	4b14      	ldr	r3, [pc, #80]	; (8005400 <Settings_Verify+0x100>)
 80053ae:	7a5b      	ldrb	r3, [r3, #9]
		((settings_act[7] - 48) > 9) ||
 80053b0:	2b39      	cmp	r3, #57	; 0x39
 80053b2:	d81e      	bhi.n	80053f2 <Settings_Verify+0xf2>
		((settings_act[11] - 48) > 9) ||
 80053b4:	4b12      	ldr	r3, [pc, #72]	; (8005400 <Settings_Verify+0x100>)
 80053b6:	7adb      	ldrb	r3, [r3, #11]
		((settings_act[9] - 48) > 9) ||
 80053b8:	2b39      	cmp	r3, #57	; 0x39
 80053ba:	d81a      	bhi.n	80053f2 <Settings_Verify+0xf2>
		((settings_act[13] - 48) > 9) ||
 80053bc:	4b10      	ldr	r3, [pc, #64]	; (8005400 <Settings_Verify+0x100>)
 80053be:	7b5b      	ldrb	r3, [r3, #13]
		((settings_act[11] - 48) > 9) ||
 80053c0:	2b39      	cmp	r3, #57	; 0x39
 80053c2:	d816      	bhi.n	80053f2 <Settings_Verify+0xf2>
		((settings_act[15] - 48) > 9) ||
 80053c4:	4b0e      	ldr	r3, [pc, #56]	; (8005400 <Settings_Verify+0x100>)
 80053c6:	7bdb      	ldrb	r3, [r3, #15]
		((settings_act[13] - 48) > 9) ||
 80053c8:	2b39      	cmp	r3, #57	; 0x39
 80053ca:	d812      	bhi.n	80053f2 <Settings_Verify+0xf2>
		((settings_act[17] - 48) > 9) ||
 80053cc:	4b0c      	ldr	r3, [pc, #48]	; (8005400 <Settings_Verify+0x100>)
 80053ce:	7c5b      	ldrb	r3, [r3, #17]
		((settings_act[15] - 48) > 9) ||
 80053d0:	2b39      	cmp	r3, #57	; 0x39
 80053d2:	d80e      	bhi.n	80053f2 <Settings_Verify+0xf2>
		((settings_act[32] - 48) > 1) ||
 80053d4:	4b0a      	ldr	r3, [pc, #40]	; (8005400 <Settings_Verify+0x100>)
 80053d6:	f893 3020 	ldrb.w	r3, [r3, #32]
		((settings_act[17] - 48) > 9) ||
 80053da:	2b31      	cmp	r3, #49	; 0x31
 80053dc:	d809      	bhi.n	80053f2 <Settings_Verify+0xf2>
		(settings_act[33] != '\n') ||
 80053de:	4b08      	ldr	r3, [pc, #32]	; (8005400 <Settings_Verify+0x100>)
 80053e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		((settings_act[32] - 48) > 1) ||
 80053e4:	2b0a      	cmp	r3, #10
 80053e6:	d104      	bne.n	80053f2 <Settings_Verify+0xf2>
		(settings_act[34] != 0)
 80053e8:	4b05      	ldr	r3, [pc, #20]	; (8005400 <Settings_Verify+0x100>)
 80053ea:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
		(settings_act[33] != '\n') ||
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <Settings_Verify+0xf6>
	){
		//Wrong data
		return 0;
 80053f2:	2300      	movs	r3, #0
 80053f4:	e000      	b.n	80053f8 <Settings_Verify+0xf8>
	}
	return 1;
 80053f6:	2301      	movs	r3, #1
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bc80      	pop	{r7}
 80053fe:	4770      	bx	lr
 8005400:	20000a74 	.word	0x20000a74

08005404 <Settings_Write>:
void Settings_Write(){
 8005404:	b580      	push	{r7, lr}
 8005406:	af00      	add	r7, sp, #0
	//Verify
	if(!Settings_Verify()){
 8005408:	f7ff ff7a 	bl	8005300 <Settings_Verify>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d104      	bne.n	800541c <Settings_Write+0x18>
		memcpy(&settings_act[0], &settings_def[0], 35);
 8005412:	2223      	movs	r2, #35	; 0x23
 8005414:	4904      	ldr	r1, [pc, #16]	; (8005428 <Settings_Write+0x24>)
 8005416:	4805      	ldr	r0, [pc, #20]	; (800542c <Settings_Write+0x28>)
 8005418:	f001 f930 	bl	800667c <memcpy>
	}

	//Write
	Flash_Write((uint8_t *)&settings_act[0], 35);
 800541c:	2123      	movs	r1, #35	; 0x23
 800541e:	4803      	ldr	r0, [pc, #12]	; (800542c <Settings_Write+0x28>)
 8005420:	f7fe ff00 	bl	8004224 <Flash_Write>
}
 8005424:	bf00      	nop
 8005426:	bd80      	pop	{r7, pc}
 8005428:	0800744c 	.word	0x0800744c
 800542c:	20000a74 	.word	0x20000a74

08005430 <Settings_Read>:
void Settings_Reset(){
	memcpy(&settings_act[0], &settings_def[0], 35);
	Flash_Write((uint8_t *)&settings_def[0], 35);
	Settings_Write_Bluetooth(&settings_act[18], &settings_act[22]);
}
void Settings_Read(int8_t *calib, uint8_t *led){
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
	Flash_Read(settings_act, 35);
 800543a:	2123      	movs	r1, #35	; 0x23
 800543c:	4821      	ldr	r0, [pc, #132]	; (80054c4 <Settings_Read+0x94>)
 800543e:	f7fe fe69 	bl	8004114 <Flash_Read>
	//Verify
	if(!Settings_Verify()){
 8005442:	f7ff ff5d 	bl	8005300 <Settings_Verify>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d104      	bne.n	8005456 <Settings_Read+0x26>
		memcpy(&settings_act[0], &settings_def[0], 35);
 800544c:	2223      	movs	r2, #35	; 0x23
 800544e:	491e      	ldr	r1, [pc, #120]	; (80054c8 <Settings_Read+0x98>)
 8005450:	481c      	ldr	r0, [pc, #112]	; (80054c4 <Settings_Read+0x94>)
 8005452:	f001 f913 	bl	800667c <memcpy>
	}

	//Calibration
	uint8_t i = 0;
 8005456:	2300      	movs	r3, #0
 8005458:	73fb      	strb	r3, [r7, #15]
	while(i != 8){
 800545a:	e024      	b.n	80054a6 <Settings_Read+0x76>
		i++;
 800545c:	7bfb      	ldrb	r3, [r7, #15]
 800545e:	3301      	adds	r3, #1
 8005460:	73fb      	strb	r3, [r7, #15]
		if(settings_act[(2 * i)] == '-'){
 8005462:	7bfb      	ldrb	r3, [r7, #15]
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	4a17      	ldr	r2, [pc, #92]	; (80054c4 <Settings_Read+0x94>)
 8005468:	5cd3      	ldrb	r3, [r2, r3]
 800546a:	2b2d      	cmp	r3, #45	; 0x2d
 800546c:	d10e      	bne.n	800548c <Settings_Read+0x5c>
			calib[i - 1] = (settings_act[(2 * i) + 1] - 48) - (2 * (settings_act[(2 * i) + 1] - 48));
 800546e:	7bfb      	ldrb	r3, [r7, #15]
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	3301      	adds	r3, #1
 8005474:	4a13      	ldr	r2, [pc, #76]	; (80054c4 <Settings_Read+0x94>)
 8005476:	5cd3      	ldrb	r3, [r2, r3]
 8005478:	f1c3 0330 	rsb	r3, r3, #48	; 0x30
 800547c:	b2d9      	uxtb	r1, r3
 800547e:	7bfb      	ldrb	r3, [r7, #15]
 8005480:	3b01      	subs	r3, #1
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	4413      	add	r3, r2
 8005486:	b24a      	sxtb	r2, r1
 8005488:	701a      	strb	r2, [r3, #0]
 800548a:	e00c      	b.n	80054a6 <Settings_Read+0x76>
		}else{
			calib[i - 1] = settings_act[(2 * i) + 1] - 48;
 800548c:	7bfb      	ldrb	r3, [r7, #15]
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	3301      	adds	r3, #1
 8005492:	4a0c      	ldr	r2, [pc, #48]	; (80054c4 <Settings_Read+0x94>)
 8005494:	5cd3      	ldrb	r3, [r2, r3]
 8005496:	3b30      	subs	r3, #48	; 0x30
 8005498:	b2d9      	uxtb	r1, r3
 800549a:	7bfb      	ldrb	r3, [r7, #15]
 800549c:	3b01      	subs	r3, #1
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	4413      	add	r3, r2
 80054a2:	b24a      	sxtb	r2, r1
 80054a4:	701a      	strb	r2, [r3, #0]
	while(i != 8){
 80054a6:	7bfb      	ldrb	r3, [r7, #15]
 80054a8:	2b08      	cmp	r3, #8
 80054aa:	d1d7      	bne.n	800545c <Settings_Read+0x2c>
		}
	}
	//LED
	*led = settings_act[32] - 48;
 80054ac:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <Settings_Read+0x94>)
 80054ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054b2:	3b30      	subs	r3, #48	; 0x30
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	701a      	strb	r2, [r3, #0]
}
 80054ba:	bf00      	nop
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	20000a74 	.word	0x20000a74
 80054c8:	0800744c 	.word	0x0800744c

080054cc <Settings_Data>:
uint8_t *Settings_Data(){
 80054cc:	b480      	push	{r7}
 80054ce:	af00      	add	r7, sp, #0
	return (uint8_t *)&settings_act[0];
 80054d0:	4b02      	ldr	r3, [pc, #8]	; (80054dc <Settings_Data+0x10>)
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bc80      	pop	{r7}
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	20000a74 	.word	0x20000a74

080054e0 <Settings_Set_Calib>:
void Settings_Set_Calib(int8_t *calib){
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
	//Calibration
	uint8_t i = 0;
 80054e8:	2300      	movs	r3, #0
 80054ea:	73fb      	strb	r3, [r7, #15]
	while(i != 8){
 80054ec:	e031      	b.n	8005552 <Settings_Set_Calib+0x72>
		if(calib[i] >= 0){
 80054ee:	7bfb      	ldrb	r3, [r7, #15]
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	4413      	add	r3, r2
 80054f4:	f993 3000 	ldrsb.w	r3, [r3]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	db13      	blt.n	8005524 <Settings_Set_Calib+0x44>
			settings_act[2 + (i * 2)] = '+';
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
 80054fe:	3301      	adds	r3, #1
 8005500:	005b      	lsls	r3, r3, #1
 8005502:	4a1c      	ldr	r2, [pc, #112]	; (8005574 <Settings_Set_Calib+0x94>)
 8005504:	212b      	movs	r1, #43	; 0x2b
 8005506:	54d1      	strb	r1, [r2, r3]
			settings_act[3 + (i * 2)] = (uint8_t)calib[i] + (uint8_t)48;
 8005508:	7bfb      	ldrb	r3, [r7, #15]
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	4413      	add	r3, r2
 800550e:	f993 3000 	ldrsb.w	r3, [r3]
 8005512:	b2da      	uxtb	r2, r3
 8005514:	7bfb      	ldrb	r3, [r7, #15]
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	3303      	adds	r3, #3
 800551a:	3230      	adds	r2, #48	; 0x30
 800551c:	b2d1      	uxtb	r1, r2
 800551e:	4a15      	ldr	r2, [pc, #84]	; (8005574 <Settings_Set_Calib+0x94>)
 8005520:	54d1      	strb	r1, [r2, r3]
 8005522:	e013      	b.n	800554c <Settings_Set_Calib+0x6c>
		}else{
			settings_act[2 + (i * 2)] = '-';
 8005524:	7bfb      	ldrb	r3, [r7, #15]
 8005526:	3301      	adds	r3, #1
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	4a12      	ldr	r2, [pc, #72]	; (8005574 <Settings_Set_Calib+0x94>)
 800552c:	212d      	movs	r1, #45	; 0x2d
 800552e:	54d1      	strb	r1, [r2, r3]
			settings_act[3 + (i * 2)] = (uint8_t)((int8_t)calib[i] - (2 * (int8_t)calib[i])) + (uint8_t)48;
 8005530:	7bfb      	ldrb	r3, [r7, #15]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	4413      	add	r3, r2
 8005536:	f993 3000 	ldrsb.w	r3, [r3]
 800553a:	b2da      	uxtb	r2, r3
 800553c:	7bfb      	ldrb	r3, [r7, #15]
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	3303      	adds	r3, #3
 8005542:	f1c2 0230 	rsb	r2, r2, #48	; 0x30
 8005546:	b2d1      	uxtb	r1, r2
 8005548:	4a0a      	ldr	r2, [pc, #40]	; (8005574 <Settings_Set_Calib+0x94>)
 800554a:	54d1      	strb	r1, [r2, r3]
		}
		i++;
 800554c:	7bfb      	ldrb	r3, [r7, #15]
 800554e:	3301      	adds	r3, #1
 8005550:	73fb      	strb	r3, [r7, #15]
	while(i != 8){
 8005552:	7bfb      	ldrb	r3, [r7, #15]
 8005554:	2b08      	cmp	r3, #8
 8005556:	d1ca      	bne.n	80054ee <Settings_Set_Calib+0xe>
	}
	
	//Verify
	if(!Settings_Verify()){
 8005558:	f7ff fed2 	bl	8005300 <Settings_Verify>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d104      	bne.n	800556c <Settings_Set_Calib+0x8c>
		memcpy(&settings_act[0], &settings_def[0], 35);
 8005562:	2223      	movs	r2, #35	; 0x23
 8005564:	4904      	ldr	r1, [pc, #16]	; (8005578 <Settings_Set_Calib+0x98>)
 8005566:	4803      	ldr	r0, [pc, #12]	; (8005574 <Settings_Set_Calib+0x94>)
 8005568:	f001 f888 	bl	800667c <memcpy>
	}
}
 800556c:	bf00      	nop
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	20000a74 	.word	0x20000a74
 8005578:	0800744c 	.word	0x0800744c

0800557c <Settings_Write_LED>:
void Settings_Write_LED(uint8_t led){
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	4603      	mov	r3, r0
 8005584:	71fb      	strb	r3, [r7, #7]
	settings_act[32] = led + 48;
 8005586:	79fb      	ldrb	r3, [r7, #7]
 8005588:	3330      	adds	r3, #48	; 0x30
 800558a:	b2da      	uxtb	r2, r3
 800558c:	4b04      	ldr	r3, [pc, #16]	; (80055a0 <Settings_Write_LED+0x24>)
 800558e:	f883 2020 	strb.w	r2, [r3, #32]
	Settings_Write();
 8005592:	f7ff ff37 	bl	8005404 <Settings_Write>
}
 8005596:	bf00      	nop
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	20000a74 	.word	0x20000a74

080055a4 <Settings_Write_Bluetooth>:
void Settings_Write_Bluetooth(uint8_t *bt_password, uint8_t *bt_name){
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
	if(!Settings_Verify()){
 80055ae:	f7ff fea7 	bl	8005300 <Settings_Verify>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d104      	bne.n	80055c2 <Settings_Write_Bluetooth+0x1e>
		memcpy(&settings_act[0], &settings_def[0], 35);
 80055b8:	2223      	movs	r2, #35	; 0x23
 80055ba:	494e      	ldr	r1, [pc, #312]	; (80056f4 <Settings_Write_Bluetooth+0x150>)
 80055bc:	484e      	ldr	r0, [pc, #312]	; (80056f8 <Settings_Write_Bluetooth+0x154>)
 80055be:	f001 f85d 	bl	800667c <memcpy>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	461a      	mov	r2, r3
	}

	//Password
	memcpy(&settings_act[18], bt_password, 4);
 80055c8:	4b4b      	ldr	r3, [pc, #300]	; (80056f8 <Settings_Write_Bluetooth+0x154>)
 80055ca:	f8c3 2012 	str.w	r2, [r3, #18]
	//Name
	memcpy(&settings_act[22], bt_name, 10);
 80055ce:	220a      	movs	r2, #10
 80055d0:	6839      	ldr	r1, [r7, #0]
 80055d2:	484a      	ldr	r0, [pc, #296]	; (80056fc <Settings_Write_Bluetooth+0x158>)
 80055d4:	f001 f852 	bl	800667c <memcpy>

	//Write
	Flash_Write((uint8_t *)&settings_act[0], 35);
 80055d8:	2123      	movs	r1, #35	; 0x23
 80055da:	4847      	ldr	r0, [pc, #284]	; (80056f8 <Settings_Write_Bluetooth+0x154>)
 80055dc:	f7fe fe22 	bl	8004224 <Flash_Write>

	//Reset Bluetooth
	HAL_GPIO_WritePin(BT_RESET_GPIO_Port, BT_RESET_Pin, GPIO_PIN_RESET);
 80055e0:	2200      	movs	r2, #0
 80055e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80055e6:	4846      	ldr	r0, [pc, #280]	; (8005700 <Settings_Write_Bluetooth+0x15c>)
 80055e8:	f7fc fadb 	bl	8001ba2 <HAL_GPIO_WritePin>
	HAL_Delay(400);
 80055ec:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80055f0:	f7fb fb46 	bl	8000c80 <HAL_Delay>
	HAL_GPIO_WritePin(BT_RESET_GPIO_Port, BT_RESET_Pin, GPIO_PIN_SET);
 80055f4:	2201      	movs	r2, #1
 80055f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80055fa:	4841      	ldr	r0, [pc, #260]	; (8005700 <Settings_Write_Bluetooth+0x15c>)
 80055fc:	f7fc fad1 	bl	8001ba2 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8005600:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005604:	f7fb fb3c 	bl	8000c80 <HAL_Delay>

	//Wait for Bluetooth disconnect
	while(HAL_GPIO_ReadPin(BT_STAT_GPIO_Port, BT_STAT_Pin) != GPIO_PIN_RESET);
 8005608:	bf00      	nop
 800560a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800560e:	483c      	ldr	r0, [pc, #240]	; (8005700 <Settings_Write_Bluetooth+0x15c>)
 8005610:	f7fc fab0 	bl	8001b74 <HAL_GPIO_ReadPin>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1f7      	bne.n	800560a <Settings_Write_Bluetooth+0x66>
	HAL_Delay(300);
 800561a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800561e:	f7fb fb2f 	bl	8000c80 <HAL_Delay>

	//Set Bluetooth password
	uint8_t *tmp = malloc(18);
 8005622:	2012      	movs	r0, #18
 8005624:	f000 fde6 	bl	80061f4 <malloc>
 8005628:	4603      	mov	r3, r0
 800562a:	60bb      	str	r3, [r7, #8]
	memcpy(&tmp[0], (uint8_t *)"AT+PIN", 6);
 800562c:	2206      	movs	r2, #6
 800562e:	4935      	ldr	r1, [pc, #212]	; (8005704 <Settings_Write_Bluetooth+0x160>)
 8005630:	68b8      	ldr	r0, [r7, #8]
 8005632:	f001 f823 	bl	800667c <memcpy>
	memcpy(&tmp[6], (uint8_t *)&bt_password[0], 4);
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	3306      	adds	r3, #6
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	6812      	ldr	r2, [r2, #0]
 800563e:	601a      	str	r2, [r3, #0]
	memcpy(&tmp[10], (uint8_t *)"\r\n", 2);
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	330a      	adds	r3, #10
 8005644:	2202      	movs	r2, #2
 8005646:	4930      	ldr	r1, [pc, #192]	; (8005708 <Settings_Write_Bluetooth+0x164>)
 8005648:	4618      	mov	r0, r3
 800564a:	f001 f817 	bl	800667c <memcpy>
	Bluetooth_Transmit((uint8_t *)tmp, 12);
 800564e:	210c      	movs	r1, #12
 8005650:	68b8      	ldr	r0, [r7, #8]
 8005652:	f7fe fcfd 	bl	8004050 <Bluetooth_Transmit>
	HAL_Delay(50);
 8005656:	2032      	movs	r0, #50	; 0x32
 8005658:	f7fb fb12 	bl	8000c80 <HAL_Delay>

	//Set Bluetooth name
	memcpy(&tmp[0], (uint8_t *)"AT+NAME", 7);
 800565c:	2207      	movs	r2, #7
 800565e:	492b      	ldr	r1, [pc, #172]	; (800570c <Settings_Write_Bluetooth+0x168>)
 8005660:	68b8      	ldr	r0, [r7, #8]
 8005662:	f001 f80b 	bl	800667c <memcpy>
	//Detect spaces at the end of the name
	uint8_t i = 10;
 8005666:	230a      	movs	r3, #10
 8005668:	73fb      	strb	r3, [r7, #15]
	while(i != 0){
 800566a:	e008      	b.n	800567e <Settings_Write_Bluetooth+0xda>
		i--;
 800566c:	7bfb      	ldrb	r3, [r7, #15]
 800566e:	3b01      	subs	r3, #1
 8005670:	73fb      	strb	r3, [r7, #15]
		if(bt_name[i] != ' '){
 8005672:	7bfb      	ldrb	r3, [r7, #15]
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	4413      	add	r3, r2
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	2b20      	cmp	r3, #32
 800567c:	d103      	bne.n	8005686 <Settings_Write_Bluetooth+0xe2>
	while(i != 0){
 800567e:	7bfb      	ldrb	r3, [r7, #15]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1f3      	bne.n	800566c <Settings_Write_Bluetooth+0xc8>
 8005684:	e000      	b.n	8005688 <Settings_Write_Bluetooth+0xe4>
			break;
 8005686:	bf00      	nop
		}
	}
	memcpy(&tmp[7], (uint8_t *)&bt_name[0], i + 1);
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	1dd8      	adds	r0, r3, #7
 800568c:	7bfb      	ldrb	r3, [r7, #15]
 800568e:	3301      	adds	r3, #1
 8005690:	461a      	mov	r2, r3
 8005692:	6839      	ldr	r1, [r7, #0]
 8005694:	f000 fff2 	bl	800667c <memcpy>
	memcpy(&tmp[i + 8], (uint8_t *)"\r\n", 2);
 8005698:	7bfb      	ldrb	r3, [r7, #15]
 800569a:	3308      	adds	r3, #8
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	4413      	add	r3, r2
 80056a0:	2202      	movs	r2, #2
 80056a2:	4919      	ldr	r1, [pc, #100]	; (8005708 <Settings_Write_Bluetooth+0x164>)
 80056a4:	4618      	mov	r0, r3
 80056a6:	f000 ffe9 	bl	800667c <memcpy>
	Bluetooth_Transmit((uint8_t *)tmp, 12);
 80056aa:	210c      	movs	r1, #12
 80056ac:	68b8      	ldr	r0, [r7, #8]
 80056ae:	f7fe fccf 	bl	8004050 <Bluetooth_Transmit>
	Bluetooth_Transmit((uint8_t *)tmp, 18);
 80056b2:	2112      	movs	r1, #18
 80056b4:	68b8      	ldr	r0, [r7, #8]
 80056b6:	f7fe fccb 	bl	8004050 <Bluetooth_Transmit>
	HAL_Delay(800);
 80056ba:	f44f 7048 	mov.w	r0, #800	; 0x320
 80056be:	f7fb fadf 	bl	8000c80 <HAL_Delay>

	//Reset Bluetooth
	HAL_GPIO_WritePin(BT_RESET_GPIO_Port, BT_RESET_Pin, GPIO_PIN_RESET);
 80056c2:	2200      	movs	r2, #0
 80056c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80056c8:	480d      	ldr	r0, [pc, #52]	; (8005700 <Settings_Write_Bluetooth+0x15c>)
 80056ca:	f7fc fa6a 	bl	8001ba2 <HAL_GPIO_WritePin>
	HAL_Delay(400);
 80056ce:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80056d2:	f7fb fad5 	bl	8000c80 <HAL_Delay>
	HAL_GPIO_WritePin(BT_RESET_GPIO_Port, BT_RESET_Pin, GPIO_PIN_SET);
 80056d6:	2201      	movs	r2, #1
 80056d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80056dc:	4808      	ldr	r0, [pc, #32]	; (8005700 <Settings_Write_Bluetooth+0x15c>)
 80056de:	f7fc fa60 	bl	8001ba2 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80056e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80056e6:	f7fb facb 	bl	8000c80 <HAL_Delay>
}
 80056ea:	bf00      	nop
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	0800744c 	.word	0x0800744c
 80056f8:	20000a74 	.word	0x20000a74
 80056fc:	20000a8a 	.word	0x20000a8a
 8005700:	40010800 	.word	0x40010800
 8005704:	08006a20 	.word	0x08006a20
 8005708:	08006a28 	.word	0x08006a28
 800570c:	08006a2c 	.word	0x08006a2c

08005710 <Settings_Init>:
void Settings_Init(){
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
	uint8_t led = 0;
 8005716:	2300      	movs	r3, #0
 8005718:	71fb      	strb	r3, [r7, #7]
	Settings_Read(Servo_Calib_Data(), &led);
 800571a:	f7fe ff19 	bl	8004550 <Servo_Calib_Data>
 800571e:	4602      	mov	r2, r0
 8005720:	1dfb      	adds	r3, r7, #7
 8005722:	4619      	mov	r1, r3
 8005724:	4610      	mov	r0, r2
 8005726:	f7ff fe83 	bl	8005430 <Settings_Read>

	//Enable LED
	LED_Enable(led);
 800572a:	79fb      	ldrb	r3, [r7, #7]
 800572c:	4618      	mov	r0, r3
 800572e:	f7fe feed 	bl	800450c <LED_Enable>
	LED_Init();
 8005732:	f7fe ff03 	bl	800453c <LED_Init>

	//Enable servos
	Servo_Init();
 8005736:	f7ff f865 	bl	8004804 <Servo_Init>
	Servo_Set((float *)&anim_data_standby[0]);
 800573a:	4803      	ldr	r0, [pc, #12]	; (8005748 <Settings_Init+0x38>)
 800573c:	f7fe ff2c 	bl	8004598 <Servo_Set>
}
 8005740:	bf00      	nop
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	08006a34 	.word	0x08006a34

0800574c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005750:	f7fb fa34 	bl	8000bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005754:	f000 f813 	bl	800577e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005758:	f000 fa52 	bl	8005c00 <MX_GPIO_Init>
  MX_CRC_Init();
 800575c:	f000 f850 	bl	8005800 <MX_CRC_Init>
  MX_TIM2_Init();
 8005760:	f000 f862 	bl	8005828 <MX_TIM2_Init>
  MX_TIM3_Init();
 8005764:	f000 f8d4 	bl	8005910 <MX_TIM3_Init>
  MX_DMA_Init();
 8005768:	f000 fa2c 	bl	8005bc4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800576c:	f000 fa00 	bl	8005b70 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8005770:	f000 f966 	bl	8005a40 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  App_Init();
 8005774:	f7ff fa20 	bl	8004bb8 <App_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    App_Loop();
 8005778:	f7ff fa26 	bl	8004bc8 <App_Loop>
 800577c:	e7fc      	b.n	8005778 <main+0x2c>

0800577e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b090      	sub	sp, #64	; 0x40
 8005782:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005784:	f107 0318 	add.w	r3, r7, #24
 8005788:	2228      	movs	r2, #40	; 0x28
 800578a:	2100      	movs	r1, #0
 800578c:	4618      	mov	r0, r3
 800578e:	f000 ff83 	bl	8006698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005792:	1d3b      	adds	r3, r7, #4
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	605a      	str	r2, [r3, #4]
 800579a:	609a      	str	r2, [r3, #8]
 800579c:	60da      	str	r2, [r3, #12]
 800579e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80057a0:	2302      	movs	r3, #2
 80057a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80057a4:	2301      	movs	r3, #1
 80057a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80057a8:	2310      	movs	r3, #16
 80057aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80057ac:	2302      	movs	r3, #2
 80057ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80057b0:	2300      	movs	r3, #0
 80057b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80057b4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80057b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80057ba:	f107 0318 	add.w	r3, r7, #24
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fc fa20 	bl	8001c04 <HAL_RCC_OscConfig>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <SystemClock_Config+0x50>
  {
    Error_Handler();
 80057ca:	f000 fa7b 	bl	8005cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80057ce:	230f      	movs	r3, #15
 80057d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80057d2:	2302      	movs	r3, #2
 80057d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80057d6:	2300      	movs	r3, #0
 80057d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80057da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80057e0:	2300      	movs	r3, #0
 80057e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80057e4:	1d3b      	adds	r3, r7, #4
 80057e6:	2102      	movs	r1, #2
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7fc fc8d 	bl	8002108 <HAL_RCC_ClockConfig>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80057f4:	f000 fa66 	bl	8005cc4 <Error_Handler>
  }
}
 80057f8:	bf00      	nop
 80057fa:	3740      	adds	r7, #64	; 0x40
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8005804:	4b06      	ldr	r3, [pc, #24]	; (8005820 <MX_CRC_Init+0x20>)
 8005806:	4a07      	ldr	r2, [pc, #28]	; (8005824 <MX_CRC_Init+0x24>)
 8005808:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800580a:	4805      	ldr	r0, [pc, #20]	; (8005820 <MX_CRC_Init+0x20>)
 800580c:	f7fb fb69 	bl	8000ee2 <HAL_CRC_Init>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8005816:	f000 fa55 	bl	8005cc4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800581a:	bf00      	nop
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	20000a98 	.word	0x20000a98
 8005824:	40023000 	.word	0x40023000

08005828 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b08e      	sub	sp, #56	; 0x38
 800582c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800582e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005832:	2200      	movs	r2, #0
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	605a      	str	r2, [r3, #4]
 8005838:	609a      	str	r2, [r3, #8]
 800583a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800583c:	f107 0320 	add.w	r3, r7, #32
 8005840:	2200      	movs	r2, #0
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005846:	1d3b      	adds	r3, r7, #4
 8005848:	2200      	movs	r2, #0
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	605a      	str	r2, [r3, #4]
 800584e:	609a      	str	r2, [r3, #8]
 8005850:	60da      	str	r2, [r3, #12]
 8005852:	611a      	str	r2, [r3, #16]
 8005854:	615a      	str	r2, [r3, #20]
 8005856:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005858:	4b2c      	ldr	r3, [pc, #176]	; (800590c <MX_TIM2_Init+0xe4>)
 800585a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800585e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8005860:	4b2a      	ldr	r3, [pc, #168]	; (800590c <MX_TIM2_Init+0xe4>)
 8005862:	221f      	movs	r2, #31
 8005864:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005866:	4b29      	ldr	r3, [pc, #164]	; (800590c <MX_TIM2_Init+0xe4>)
 8005868:	2200      	movs	r2, #0
 800586a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 800586c:	4b27      	ldr	r3, [pc, #156]	; (800590c <MX_TIM2_Init+0xe4>)
 800586e:	223f      	movs	r2, #63	; 0x3f
 8005870:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005872:	4b26      	ldr	r3, [pc, #152]	; (800590c <MX_TIM2_Init+0xe4>)
 8005874:	2200      	movs	r2, #0
 8005876:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005878:	4b24      	ldr	r3, [pc, #144]	; (800590c <MX_TIM2_Init+0xe4>)
 800587a:	2200      	movs	r2, #0
 800587c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800587e:	4823      	ldr	r0, [pc, #140]	; (800590c <MX_TIM2_Init+0xe4>)
 8005880:	f7fc fdda 	bl	8002438 <HAL_TIM_Base_Init>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800588a:	f000 fa1b 	bl	8005cc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800588e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005892:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005894:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005898:	4619      	mov	r1, r3
 800589a:	481c      	ldr	r0, [pc, #112]	; (800590c <MX_TIM2_Init+0xe4>)
 800589c:	f7fc ffd4 	bl	8002848 <HAL_TIM_ConfigClockSource>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80058a6:	f000 fa0d 	bl	8005cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80058aa:	4818      	ldr	r0, [pc, #96]	; (800590c <MX_TIM2_Init+0xe4>)
 80058ac:	f7fc fe13 	bl	80024d6 <HAL_TIM_PWM_Init>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80058b6:	f000 fa05 	bl	8005cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058ba:	2300      	movs	r3, #0
 80058bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058be:	2300      	movs	r3, #0
 80058c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80058c2:	f107 0320 	add.w	r3, r7, #32
 80058c6:	4619      	mov	r1, r3
 80058c8:	4810      	ldr	r0, [pc, #64]	; (800590c <MX_TIM2_Init+0xe4>)
 80058ca:	f7fd fb25 	bl	8002f18 <HAL_TIMEx_MasterConfigSynchronization>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d001      	beq.n	80058d8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80058d4:	f000 f9f6 	bl	8005cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80058d8:	2360      	movs	r3, #96	; 0x60
 80058da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80058dc:	2300      	movs	r3, #0
 80058de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80058e0:	2300      	movs	r3, #0
 80058e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80058e4:	2300      	movs	r3, #0
 80058e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80058e8:	1d3b      	adds	r3, r7, #4
 80058ea:	2204      	movs	r2, #4
 80058ec:	4619      	mov	r1, r3
 80058ee:	4807      	ldr	r0, [pc, #28]	; (800590c <MX_TIM2_Init+0xe4>)
 80058f0:	f7fc feec 	bl	80026cc <HAL_TIM_PWM_ConfigChannel>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80058fa:	f000 f9e3 	bl	8005cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80058fe:	4803      	ldr	r0, [pc, #12]	; (800590c <MX_TIM2_Init+0xe4>)
 8005900:	f000 fa7a 	bl	8005df8 <HAL_TIM_MspPostInit>

}
 8005904:	bf00      	nop
 8005906:	3738      	adds	r7, #56	; 0x38
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	20000aa0 	.word	0x20000aa0

08005910 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b08e      	sub	sp, #56	; 0x38
 8005914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005916:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800591a:	2200      	movs	r2, #0
 800591c:	601a      	str	r2, [r3, #0]
 800591e:	605a      	str	r2, [r3, #4]
 8005920:	609a      	str	r2, [r3, #8]
 8005922:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005924:	f107 0320 	add.w	r3, r7, #32
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800592e:	1d3b      	adds	r3, r7, #4
 8005930:	2200      	movs	r2, #0
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	605a      	str	r2, [r3, #4]
 8005936:	609a      	str	r2, [r3, #8]
 8005938:	60da      	str	r2, [r3, #12]
 800593a:	611a      	str	r2, [r3, #16]
 800593c:	615a      	str	r2, [r3, #20]
 800593e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005940:	4b3d      	ldr	r3, [pc, #244]	; (8005a38 <MX_TIM3_Init+0x128>)
 8005942:	4a3e      	ldr	r2, [pc, #248]	; (8005a3c <MX_TIM3_Init+0x12c>)
 8005944:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8005946:	4b3c      	ldr	r3, [pc, #240]	; (8005a38 <MX_TIM3_Init+0x128>)
 8005948:	223f      	movs	r2, #63	; 0x3f
 800594a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800594c:	4b3a      	ldr	r3, [pc, #232]	; (8005a38 <MX_TIM3_Init+0x128>)
 800594e:	2200      	movs	r2, #0
 8005950:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8005952:	4b39      	ldr	r3, [pc, #228]	; (8005a38 <MX_TIM3_Init+0x128>)
 8005954:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005958:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800595a:	4b37      	ldr	r3, [pc, #220]	; (8005a38 <MX_TIM3_Init+0x128>)
 800595c:	2200      	movs	r2, #0
 800595e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005960:	4b35      	ldr	r3, [pc, #212]	; (8005a38 <MX_TIM3_Init+0x128>)
 8005962:	2200      	movs	r2, #0
 8005964:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005966:	4834      	ldr	r0, [pc, #208]	; (8005a38 <MX_TIM3_Init+0x128>)
 8005968:	f7fc fd66 	bl	8002438 <HAL_TIM_Base_Init>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d001      	beq.n	8005976 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8005972:	f000 f9a7 	bl	8005cc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800597a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800597c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005980:	4619      	mov	r1, r3
 8005982:	482d      	ldr	r0, [pc, #180]	; (8005a38 <MX_TIM3_Init+0x128>)
 8005984:	f7fc ff60 	bl	8002848 <HAL_TIM_ConfigClockSource>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800598e:	f000 f999 	bl	8005cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005992:	4829      	ldr	r0, [pc, #164]	; (8005a38 <MX_TIM3_Init+0x128>)
 8005994:	f7fc fd9f 	bl	80024d6 <HAL_TIM_PWM_Init>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800599e:	f000 f991 	bl	8005cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059a2:	2300      	movs	r3, #0
 80059a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059a6:	2300      	movs	r3, #0
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80059aa:	f107 0320 	add.w	r3, r7, #32
 80059ae:	4619      	mov	r1, r3
 80059b0:	4821      	ldr	r0, [pc, #132]	; (8005a38 <MX_TIM3_Init+0x128>)
 80059b2:	f7fd fab1 	bl	8002f18 <HAL_TIMEx_MasterConfigSynchronization>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80059bc:	f000 f982 	bl	8005cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80059c0:	2360      	movs	r3, #96	; 0x60
 80059c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80059c4:	2300      	movs	r3, #0
 80059c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80059c8:	2300      	movs	r3, #0
 80059ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80059cc:	2300      	movs	r3, #0
 80059ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80059d0:	1d3b      	adds	r3, r7, #4
 80059d2:	2200      	movs	r2, #0
 80059d4:	4619      	mov	r1, r3
 80059d6:	4818      	ldr	r0, [pc, #96]	; (8005a38 <MX_TIM3_Init+0x128>)
 80059d8:	f7fc fe78 	bl	80026cc <HAL_TIM_PWM_ConfigChannel>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80059e2:	f000 f96f 	bl	8005cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80059e6:	1d3b      	adds	r3, r7, #4
 80059e8:	2204      	movs	r2, #4
 80059ea:	4619      	mov	r1, r3
 80059ec:	4812      	ldr	r0, [pc, #72]	; (8005a38 <MX_TIM3_Init+0x128>)
 80059ee:	f7fc fe6d 	bl	80026cc <HAL_TIM_PWM_ConfigChannel>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80059f8:	f000 f964 	bl	8005cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80059fc:	1d3b      	adds	r3, r7, #4
 80059fe:	2208      	movs	r2, #8
 8005a00:	4619      	mov	r1, r3
 8005a02:	480d      	ldr	r0, [pc, #52]	; (8005a38 <MX_TIM3_Init+0x128>)
 8005a04:	f7fc fe62 	bl	80026cc <HAL_TIM_PWM_ConfigChannel>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8005a0e:	f000 f959 	bl	8005cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005a12:	1d3b      	adds	r3, r7, #4
 8005a14:	220c      	movs	r2, #12
 8005a16:	4619      	mov	r1, r3
 8005a18:	4807      	ldr	r0, [pc, #28]	; (8005a38 <MX_TIM3_Init+0x128>)
 8005a1a:	f7fc fe57 	bl	80026cc <HAL_TIM_PWM_ConfigChannel>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d001      	beq.n	8005a28 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8005a24:	f000 f94e 	bl	8005cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005a28:	4803      	ldr	r0, [pc, #12]	; (8005a38 <MX_TIM3_Init+0x128>)
 8005a2a:	f000 f9e5 	bl	8005df8 <HAL_TIM_MspPostInit>

}
 8005a2e:	bf00      	nop
 8005a30:	3738      	adds	r7, #56	; 0x38
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	20000ae8 	.word	0x20000ae8
 8005a3c:	40000400 	.word	0x40000400

08005a40 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b08e      	sub	sp, #56	; 0x38
 8005a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	601a      	str	r2, [r3, #0]
 8005a4e:	605a      	str	r2, [r3, #4]
 8005a50:	609a      	str	r2, [r3, #8]
 8005a52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a54:	f107 0320 	add.w	r3, r7, #32
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]
 8005a5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a5e:	1d3b      	adds	r3, r7, #4
 8005a60:	2200      	movs	r2, #0
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	605a      	str	r2, [r3, #4]
 8005a66:	609a      	str	r2, [r3, #8]
 8005a68:	60da      	str	r2, [r3, #12]
 8005a6a:	611a      	str	r2, [r3, #16]
 8005a6c:	615a      	str	r2, [r3, #20]
 8005a6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005a70:	4b3d      	ldr	r3, [pc, #244]	; (8005b68 <MX_TIM4_Init+0x128>)
 8005a72:	4a3e      	ldr	r2, [pc, #248]	; (8005b6c <MX_TIM4_Init+0x12c>)
 8005a74:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63;
 8005a76:	4b3c      	ldr	r3, [pc, #240]	; (8005b68 <MX_TIM4_Init+0x128>)
 8005a78:	223f      	movs	r2, #63	; 0x3f
 8005a7a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a7c:	4b3a      	ldr	r3, [pc, #232]	; (8005b68 <MX_TIM4_Init+0x128>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8005a82:	4b39      	ldr	r3, [pc, #228]	; (8005b68 <MX_TIM4_Init+0x128>)
 8005a84:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005a88:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a8a:	4b37      	ldr	r3, [pc, #220]	; (8005b68 <MX_TIM4_Init+0x128>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a90:	4b35      	ldr	r3, [pc, #212]	; (8005b68 <MX_TIM4_Init+0x128>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005a96:	4834      	ldr	r0, [pc, #208]	; (8005b68 <MX_TIM4_Init+0x128>)
 8005a98:	f7fc fcce 	bl	8002438 <HAL_TIM_Base_Init>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8005aa2:	f000 f90f 	bl	8005cc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005aac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	482d      	ldr	r0, [pc, #180]	; (8005b68 <MX_TIM4_Init+0x128>)
 8005ab4:	f7fc fec8 	bl	8002848 <HAL_TIM_ConfigClockSource>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8005abe:	f000 f901 	bl	8005cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005ac2:	4829      	ldr	r0, [pc, #164]	; (8005b68 <MX_TIM4_Init+0x128>)
 8005ac4:	f7fc fd07 	bl	80024d6 <HAL_TIM_PWM_Init>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8005ace:	f000 f8f9 	bl	8005cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005ada:	f107 0320 	add.w	r3, r7, #32
 8005ade:	4619      	mov	r1, r3
 8005ae0:	4821      	ldr	r0, [pc, #132]	; (8005b68 <MX_TIM4_Init+0x128>)
 8005ae2:	f7fd fa19 	bl	8002f18 <HAL_TIMEx_MasterConfigSynchronization>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8005aec:	f000 f8ea 	bl	8005cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005af0:	2360      	movs	r3, #96	; 0x60
 8005af2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005af4:	2300      	movs	r3, #0
 8005af6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005af8:	2300      	movs	r3, #0
 8005afa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005afc:	2300      	movs	r3, #0
 8005afe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005b00:	1d3b      	adds	r3, r7, #4
 8005b02:	2200      	movs	r2, #0
 8005b04:	4619      	mov	r1, r3
 8005b06:	4818      	ldr	r0, [pc, #96]	; (8005b68 <MX_TIM4_Init+0x128>)
 8005b08:	f7fc fde0 	bl	80026cc <HAL_TIM_PWM_ConfigChannel>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8005b12:	f000 f8d7 	bl	8005cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005b16:	1d3b      	adds	r3, r7, #4
 8005b18:	2204      	movs	r2, #4
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	4812      	ldr	r0, [pc, #72]	; (8005b68 <MX_TIM4_Init+0x128>)
 8005b1e:	f7fc fdd5 	bl	80026cc <HAL_TIM_PWM_ConfigChannel>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d001      	beq.n	8005b2c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8005b28:	f000 f8cc 	bl	8005cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005b2c:	1d3b      	adds	r3, r7, #4
 8005b2e:	2208      	movs	r2, #8
 8005b30:	4619      	mov	r1, r3
 8005b32:	480d      	ldr	r0, [pc, #52]	; (8005b68 <MX_TIM4_Init+0x128>)
 8005b34:	f7fc fdca 	bl	80026cc <HAL_TIM_PWM_ConfigChannel>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d001      	beq.n	8005b42 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8005b3e:	f000 f8c1 	bl	8005cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005b42:	1d3b      	adds	r3, r7, #4
 8005b44:	220c      	movs	r2, #12
 8005b46:	4619      	mov	r1, r3
 8005b48:	4807      	ldr	r0, [pc, #28]	; (8005b68 <MX_TIM4_Init+0x128>)
 8005b4a:	f7fc fdbf 	bl	80026cc <HAL_TIM_PWM_ConfigChannel>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8005b54:	f000 f8b6 	bl	8005cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005b58:	4803      	ldr	r0, [pc, #12]	; (8005b68 <MX_TIM4_Init+0x128>)
 8005b5a:	f000 f94d 	bl	8005df8 <HAL_TIM_MspPostInit>

}
 8005b5e:	bf00      	nop
 8005b60:	3738      	adds	r7, #56	; 0x38
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	20000b30 	.word	0x20000b30
 8005b6c:	40000800 	.word	0x40000800

08005b70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005b74:	4b11      	ldr	r3, [pc, #68]	; (8005bbc <MX_USART1_UART_Init+0x4c>)
 8005b76:	4a12      	ldr	r2, [pc, #72]	; (8005bc0 <MX_USART1_UART_Init+0x50>)
 8005b78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8005b7a:	4b10      	ldr	r3, [pc, #64]	; (8005bbc <MX_USART1_UART_Init+0x4c>)
 8005b7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005b80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005b82:	4b0e      	ldr	r3, [pc, #56]	; (8005bbc <MX_USART1_UART_Init+0x4c>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005b88:	4b0c      	ldr	r3, [pc, #48]	; (8005bbc <MX_USART1_UART_Init+0x4c>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005b8e:	4b0b      	ldr	r3, [pc, #44]	; (8005bbc <MX_USART1_UART_Init+0x4c>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005b94:	4b09      	ldr	r3, [pc, #36]	; (8005bbc <MX_USART1_UART_Init+0x4c>)
 8005b96:	220c      	movs	r2, #12
 8005b98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b9a:	4b08      	ldr	r3, [pc, #32]	; (8005bbc <MX_USART1_UART_Init+0x4c>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ba0:	4b06      	ldr	r3, [pc, #24]	; (8005bbc <MX_USART1_UART_Init+0x4c>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005ba6:	4805      	ldr	r0, [pc, #20]	; (8005bbc <MX_USART1_UART_Init+0x4c>)
 8005ba8:	f7fd fa14 	bl	8002fd4 <HAL_UART_Init>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d001      	beq.n	8005bb6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005bb2:	f000 f887 	bl	8005cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005bb6:	bf00      	nop
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	20000b78 	.word	0x20000b78
 8005bc0:	40013800 	.word	0x40013800

08005bc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005bca:	4b0c      	ldr	r3, [pc, #48]	; (8005bfc <MX_DMA_Init+0x38>)
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	4a0b      	ldr	r2, [pc, #44]	; (8005bfc <MX_DMA_Init+0x38>)
 8005bd0:	f043 0301 	orr.w	r3, r3, #1
 8005bd4:	6153      	str	r3, [r2, #20]
 8005bd6:	4b09      	ldr	r3, [pc, #36]	; (8005bfc <MX_DMA_Init+0x38>)
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	607b      	str	r3, [r7, #4]
 8005be0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8005be2:	2200      	movs	r2, #0
 8005be4:	2100      	movs	r1, #0
 8005be6:	200f      	movs	r0, #15
 8005be8:	f7fb f945 	bl	8000e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8005bec:	200f      	movs	r0, #15
 8005bee:	f7fb f95e 	bl	8000eae <HAL_NVIC_EnableIRQ>

}
 8005bf2:	bf00      	nop
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	40021000 	.word	0x40021000

08005c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c06:	f107 0308 	add.w	r3, r7, #8
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	605a      	str	r2, [r3, #4]
 8005c10:	609a      	str	r2, [r3, #8]
 8005c12:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c14:	4b28      	ldr	r3, [pc, #160]	; (8005cb8 <MX_GPIO_Init+0xb8>)
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	4a27      	ldr	r2, [pc, #156]	; (8005cb8 <MX_GPIO_Init+0xb8>)
 8005c1a:	f043 0304 	orr.w	r3, r3, #4
 8005c1e:	6193      	str	r3, [r2, #24]
 8005c20:	4b25      	ldr	r3, [pc, #148]	; (8005cb8 <MX_GPIO_Init+0xb8>)
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	f003 0304 	and.w	r3, r3, #4
 8005c28:	607b      	str	r3, [r7, #4]
 8005c2a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c2c:	4b22      	ldr	r3, [pc, #136]	; (8005cb8 <MX_GPIO_Init+0xb8>)
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	4a21      	ldr	r2, [pc, #132]	; (8005cb8 <MX_GPIO_Init+0xb8>)
 8005c32:	f043 0308 	orr.w	r3, r3, #8
 8005c36:	6193      	str	r3, [r2, #24]
 8005c38:	4b1f      	ldr	r3, [pc, #124]	; (8005cb8 <MX_GPIO_Init+0xb8>)
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	f003 0308 	and.w	r3, r3, #8
 8005c40:	603b      	str	r3, [r7, #0]
 8005c42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BT_RESET_GPIO_Port, BT_RESET_Pin, GPIO_PIN_SET);
 8005c44:	2201      	movs	r2, #1
 8005c46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005c4a:	481c      	ldr	r0, [pc, #112]	; (8005cbc <MX_GPIO_Init+0xbc>)
 8005c4c:	f7fb ffa9 	bl	8001ba2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_RESET_Pin */
  GPIO_InitStruct.Pin = BUTTON_RESET_Pin;
 8005c50:	2308      	movs	r3, #8
 8005c52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005c54:	4b1a      	ldr	r3, [pc, #104]	; (8005cc0 <MX_GPIO_Init+0xc0>)
 8005c56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON_RESET_GPIO_Port, &GPIO_InitStruct);
 8005c5c:	f107 0308 	add.w	r3, r7, #8
 8005c60:	4619      	mov	r1, r3
 8005c62:	4816      	ldr	r0, [pc, #88]	; (8005cbc <MX_GPIO_Init+0xbc>)
 8005c64:	f7fb fe02 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_STAT_Pin */
  GPIO_InitStruct.Pin = BT_STAT_Pin;
 8005c68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c72:	2301      	movs	r3, #1
 8005c74:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BT_STAT_GPIO_Port, &GPIO_InitStruct);
 8005c76:	f107 0308 	add.w	r3, r7, #8
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	480f      	ldr	r0, [pc, #60]	; (8005cbc <MX_GPIO_Init+0xbc>)
 8005c7e:	f7fb fdf5 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_RESET_Pin */
  GPIO_InitStruct.Pin = BT_RESET_Pin;
 8005c82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c90:	2303      	movs	r3, #3
 8005c92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BT_RESET_GPIO_Port, &GPIO_InitStruct);
 8005c94:	f107 0308 	add.w	r3, r7, #8
 8005c98:	4619      	mov	r1, r3
 8005c9a:	4808      	ldr	r0, [pc, #32]	; (8005cbc <MX_GPIO_Init+0xbc>)
 8005c9c:	f7fb fde6 	bl	800186c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	2009      	movs	r0, #9
 8005ca6:	f7fb f8e6 	bl	8000e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8005caa:	2009      	movs	r0, #9
 8005cac:	f7fb f8ff 	bl	8000eae <HAL_NVIC_EnableIRQ>

}
 8005cb0:	bf00      	nop
 8005cb2:	3718      	adds	r7, #24
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	40021000 	.word	0x40021000
 8005cbc:	40010800 	.word	0x40010800
 8005cc0:	10210000 	.word	0x10210000

08005cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005cc8:	bf00      	nop
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bc80      	pop	{r7}
 8005cce:	4770      	bx	lr

08005cd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005cd6:	4b15      	ldr	r3, [pc, #84]	; (8005d2c <HAL_MspInit+0x5c>)
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	4a14      	ldr	r2, [pc, #80]	; (8005d2c <HAL_MspInit+0x5c>)
 8005cdc:	f043 0301 	orr.w	r3, r3, #1
 8005ce0:	6193      	str	r3, [r2, #24]
 8005ce2:	4b12      	ldr	r3, [pc, #72]	; (8005d2c <HAL_MspInit+0x5c>)
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	60bb      	str	r3, [r7, #8]
 8005cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005cee:	4b0f      	ldr	r3, [pc, #60]	; (8005d2c <HAL_MspInit+0x5c>)
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	4a0e      	ldr	r2, [pc, #56]	; (8005d2c <HAL_MspInit+0x5c>)
 8005cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cf8:	61d3      	str	r3, [r2, #28]
 8005cfa:	4b0c      	ldr	r3, [pc, #48]	; (8005d2c <HAL_MspInit+0x5c>)
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d02:	607b      	str	r3, [r7, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005d06:	4b0a      	ldr	r3, [pc, #40]	; (8005d30 <HAL_MspInit+0x60>)
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	60fb      	str	r3, [r7, #12]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005d12:	60fb      	str	r3, [r7, #12]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005d1a:	60fb      	str	r3, [r7, #12]
 8005d1c:	4a04      	ldr	r2, [pc, #16]	; (8005d30 <HAL_MspInit+0x60>)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005d22:	bf00      	nop
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bc80      	pop	{r7}
 8005d2a:	4770      	bx	lr
 8005d2c:	40021000 	.word	0x40021000
 8005d30:	40010000 	.word	0x40010000

08005d34 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a09      	ldr	r2, [pc, #36]	; (8005d68 <HAL_CRC_MspInit+0x34>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d10b      	bne.n	8005d5e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8005d46:	4b09      	ldr	r3, [pc, #36]	; (8005d6c <HAL_CRC_MspInit+0x38>)
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	4a08      	ldr	r2, [pc, #32]	; (8005d6c <HAL_CRC_MspInit+0x38>)
 8005d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d50:	6153      	str	r3, [r2, #20]
 8005d52:	4b06      	ldr	r3, [pc, #24]	; (8005d6c <HAL_CRC_MspInit+0x38>)
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8005d5e:	bf00      	nop
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bc80      	pop	{r7}
 8005d66:	4770      	bx	lr
 8005d68:	40023000 	.word	0x40023000
 8005d6c:	40021000 	.word	0x40021000

08005d70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d80:	d10c      	bne.n	8005d9c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005d82:	4b1a      	ldr	r3, [pc, #104]	; (8005dec <HAL_TIM_Base_MspInit+0x7c>)
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	4a19      	ldr	r2, [pc, #100]	; (8005dec <HAL_TIM_Base_MspInit+0x7c>)
 8005d88:	f043 0301 	orr.w	r3, r3, #1
 8005d8c:	61d3      	str	r3, [r2, #28]
 8005d8e:	4b17      	ldr	r3, [pc, #92]	; (8005dec <HAL_TIM_Base_MspInit+0x7c>)
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	617b      	str	r3, [r7, #20]
 8005d98:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005d9a:	e022      	b.n	8005de2 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a13      	ldr	r2, [pc, #76]	; (8005df0 <HAL_TIM_Base_MspInit+0x80>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d10c      	bne.n	8005dc0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005da6:	4b11      	ldr	r3, [pc, #68]	; (8005dec <HAL_TIM_Base_MspInit+0x7c>)
 8005da8:	69db      	ldr	r3, [r3, #28]
 8005daa:	4a10      	ldr	r2, [pc, #64]	; (8005dec <HAL_TIM_Base_MspInit+0x7c>)
 8005dac:	f043 0302 	orr.w	r3, r3, #2
 8005db0:	61d3      	str	r3, [r2, #28]
 8005db2:	4b0e      	ldr	r3, [pc, #56]	; (8005dec <HAL_TIM_Base_MspInit+0x7c>)
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	613b      	str	r3, [r7, #16]
 8005dbc:	693b      	ldr	r3, [r7, #16]
}
 8005dbe:	e010      	b.n	8005de2 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a0b      	ldr	r2, [pc, #44]	; (8005df4 <HAL_TIM_Base_MspInit+0x84>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d10b      	bne.n	8005de2 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005dca:	4b08      	ldr	r3, [pc, #32]	; (8005dec <HAL_TIM_Base_MspInit+0x7c>)
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	4a07      	ldr	r2, [pc, #28]	; (8005dec <HAL_TIM_Base_MspInit+0x7c>)
 8005dd0:	f043 0304 	orr.w	r3, r3, #4
 8005dd4:	61d3      	str	r3, [r2, #28]
 8005dd6:	4b05      	ldr	r3, [pc, #20]	; (8005dec <HAL_TIM_Base_MspInit+0x7c>)
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	f003 0304 	and.w	r3, r3, #4
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	68fb      	ldr	r3, [r7, #12]
}
 8005de2:	bf00      	nop
 8005de4:	371c      	adds	r7, #28
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bc80      	pop	{r7}
 8005dea:	4770      	bx	lr
 8005dec:	40021000 	.word	0x40021000
 8005df0:	40000400 	.word	0x40000400
 8005df4:	40000800 	.word	0x40000800

08005df8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b08a      	sub	sp, #40	; 0x28
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e00:	f107 0314 	add.w	r3, r7, #20
 8005e04:	2200      	movs	r2, #0
 8005e06:	601a      	str	r2, [r3, #0]
 8005e08:	605a      	str	r2, [r3, #4]
 8005e0a:	609a      	str	r2, [r3, #8]
 8005e0c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e16:	d118      	bne.n	8005e4a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e18:	4b35      	ldr	r3, [pc, #212]	; (8005ef0 <HAL_TIM_MspPostInit+0xf8>)
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	4a34      	ldr	r2, [pc, #208]	; (8005ef0 <HAL_TIM_MspPostInit+0xf8>)
 8005e1e:	f043 0304 	orr.w	r3, r3, #4
 8005e22:	6193      	str	r3, [r2, #24]
 8005e24:	4b32      	ldr	r3, [pc, #200]	; (8005ef0 <HAL_TIM_MspPostInit+0xf8>)
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	f003 0304 	and.w	r3, r3, #4
 8005e2c:	613b      	str	r3, [r7, #16]
 8005e2e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LED_STATUS_Pin;
 8005e30:	2302      	movs	r3, #2
 8005e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e34:	2302      	movs	r3, #2
 8005e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e38:	2302      	movs	r3, #2
 8005e3a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LED_STATUS_GPIO_Port, &GPIO_InitStruct);
 8005e3c:	f107 0314 	add.w	r3, r7, #20
 8005e40:	4619      	mov	r1, r3
 8005e42:	482c      	ldr	r0, [pc, #176]	; (8005ef4 <HAL_TIM_MspPostInit+0xfc>)
 8005e44:	f7fb fd12 	bl	800186c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005e48:	e04d      	b.n	8005ee6 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a2a      	ldr	r2, [pc, #168]	; (8005ef8 <HAL_TIM_MspPostInit+0x100>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d12a      	bne.n	8005eaa <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e54:	4b26      	ldr	r3, [pc, #152]	; (8005ef0 <HAL_TIM_MspPostInit+0xf8>)
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	4a25      	ldr	r2, [pc, #148]	; (8005ef0 <HAL_TIM_MspPostInit+0xf8>)
 8005e5a:	f043 0308 	orr.w	r3, r3, #8
 8005e5e:	6193      	str	r3, [r2, #24]
 8005e60:	4b23      	ldr	r3, [pc, #140]	; (8005ef0 <HAL_TIM_MspPostInit+0xf8>)
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	f003 0308 	and.w	r3, r3, #8
 8005e68:	60fb      	str	r3, [r7, #12]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_3_Pin|SERVO_4_Pin|SERVO_1_Pin|SERVO_2_Pin;
 8005e6c:	2333      	movs	r3, #51	; 0x33
 8005e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e70:	2302      	movs	r3, #2
 8005e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e74:	2302      	movs	r3, #2
 8005e76:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e78:	f107 0314 	add.w	r3, r7, #20
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	481f      	ldr	r0, [pc, #124]	; (8005efc <HAL_TIM_MspPostInit+0x104>)
 8005e80:	f7fb fcf4 	bl	800186c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8005e84:	4b1e      	ldr	r3, [pc, #120]	; (8005f00 <HAL_TIM_MspPostInit+0x108>)
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	627b      	str	r3, [r7, #36]	; 0x24
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005e90:	627b      	str	r3, [r7, #36]	; 0x24
 8005e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e94:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005e98:	627b      	str	r3, [r7, #36]	; 0x24
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea2:	4a17      	ldr	r2, [pc, #92]	; (8005f00 <HAL_TIM_MspPostInit+0x108>)
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	6053      	str	r3, [r2, #4]
}
 8005ea8:	e01d      	b.n	8005ee6 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM4)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a15      	ldr	r2, [pc, #84]	; (8005f04 <HAL_TIM_MspPostInit+0x10c>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d118      	bne.n	8005ee6 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005eb4:	4b0e      	ldr	r3, [pc, #56]	; (8005ef0 <HAL_TIM_MspPostInit+0xf8>)
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	4a0d      	ldr	r2, [pc, #52]	; (8005ef0 <HAL_TIM_MspPostInit+0xf8>)
 8005eba:	f043 0308 	orr.w	r3, r3, #8
 8005ebe:	6193      	str	r3, [r2, #24]
 8005ec0:	4b0b      	ldr	r3, [pc, #44]	; (8005ef0 <HAL_TIM_MspPostInit+0xf8>)
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	f003 0308 	and.w	r3, r3, #8
 8005ec8:	60bb      	str	r3, [r7, #8]
 8005eca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SERVO_5_Pin|SERVO_6_Pin|SERVO_7_Pin|SERVO_8_Pin;
 8005ecc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ed2:	2302      	movs	r3, #2
 8005ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005eda:	f107 0314 	add.w	r3, r7, #20
 8005ede:	4619      	mov	r1, r3
 8005ee0:	4806      	ldr	r0, [pc, #24]	; (8005efc <HAL_TIM_MspPostInit+0x104>)
 8005ee2:	f7fb fcc3 	bl	800186c <HAL_GPIO_Init>
}
 8005ee6:	bf00      	nop
 8005ee8:	3728      	adds	r7, #40	; 0x28
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	40021000 	.word	0x40021000
 8005ef4:	40010800 	.word	0x40010800
 8005ef8:	40000400 	.word	0x40000400
 8005efc:	40010c00 	.word	0x40010c00
 8005f00:	40010000 	.word	0x40010000
 8005f04:	40000800 	.word	0x40000800

08005f08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b088      	sub	sp, #32
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f10:	f107 0310 	add.w	r3, r7, #16
 8005f14:	2200      	movs	r2, #0
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	605a      	str	r2, [r3, #4]
 8005f1a:	609a      	str	r2, [r3, #8]
 8005f1c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a33      	ldr	r2, [pc, #204]	; (8005ff0 <HAL_UART_MspInit+0xe8>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d15f      	bne.n	8005fe8 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005f28:	4b32      	ldr	r3, [pc, #200]	; (8005ff4 <HAL_UART_MspInit+0xec>)
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	4a31      	ldr	r2, [pc, #196]	; (8005ff4 <HAL_UART_MspInit+0xec>)
 8005f2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f32:	6193      	str	r3, [r2, #24]
 8005f34:	4b2f      	ldr	r3, [pc, #188]	; (8005ff4 <HAL_UART_MspInit+0xec>)
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f3c:	60fb      	str	r3, [r7, #12]
 8005f3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f40:	4b2c      	ldr	r3, [pc, #176]	; (8005ff4 <HAL_UART_MspInit+0xec>)
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	4a2b      	ldr	r2, [pc, #172]	; (8005ff4 <HAL_UART_MspInit+0xec>)
 8005f46:	f043 0304 	orr.w	r3, r3, #4
 8005f4a:	6193      	str	r3, [r2, #24]
 8005f4c:	4b29      	ldr	r3, [pc, #164]	; (8005ff4 <HAL_UART_MspInit+0xec>)
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	f003 0304 	and.w	r3, r3, #4
 8005f54:	60bb      	str	r3, [r7, #8]
 8005f56:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BT_TX_Pin;
 8005f58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f5e:	2302      	movs	r3, #2
 8005f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005f62:	2303      	movs	r3, #3
 8005f64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BT_TX_GPIO_Port, &GPIO_InitStruct);
 8005f66:	f107 0310 	add.w	r3, r7, #16
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	4822      	ldr	r0, [pc, #136]	; (8005ff8 <HAL_UART_MspInit+0xf0>)
 8005f6e:	f7fb fc7d 	bl	800186c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BT_RX_Pin;
 8005f72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BT_RX_GPIO_Port, &GPIO_InitStruct);
 8005f80:	f107 0310 	add.w	r3, r7, #16
 8005f84:	4619      	mov	r1, r3
 8005f86:	481c      	ldr	r0, [pc, #112]	; (8005ff8 <HAL_UART_MspInit+0xf0>)
 8005f88:	f7fb fc70 	bl	800186c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8005f8c:	4b1b      	ldr	r3, [pc, #108]	; (8005ffc <HAL_UART_MspInit+0xf4>)
 8005f8e:	4a1c      	ldr	r2, [pc, #112]	; (8006000 <HAL_UART_MspInit+0xf8>)
 8005f90:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005f92:	4b1a      	ldr	r3, [pc, #104]	; (8005ffc <HAL_UART_MspInit+0xf4>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f98:	4b18      	ldr	r3, [pc, #96]	; (8005ffc <HAL_UART_MspInit+0xf4>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005f9e:	4b17      	ldr	r3, [pc, #92]	; (8005ffc <HAL_UART_MspInit+0xf4>)
 8005fa0:	2280      	movs	r2, #128	; 0x80
 8005fa2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005fa4:	4b15      	ldr	r3, [pc, #84]	; (8005ffc <HAL_UART_MspInit+0xf4>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005faa:	4b14      	ldr	r3, [pc, #80]	; (8005ffc <HAL_UART_MspInit+0xf4>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8005fb0:	4b12      	ldr	r3, [pc, #72]	; (8005ffc <HAL_UART_MspInit+0xf4>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005fb6:	4b11      	ldr	r3, [pc, #68]	; (8005ffc <HAL_UART_MspInit+0xf4>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005fbc:	480f      	ldr	r0, [pc, #60]	; (8005ffc <HAL_UART_MspInit+0xf4>)
 8005fbe:	f7fa ffad 	bl	8000f1c <HAL_DMA_Init>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8005fc8:	f7ff fe7c 	bl	8005cc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a0b      	ldr	r2, [pc, #44]	; (8005ffc <HAL_UART_MspInit+0xf4>)
 8005fd0:	639a      	str	r2, [r3, #56]	; 0x38
 8005fd2:	4a0a      	ldr	r2, [pc, #40]	; (8005ffc <HAL_UART_MspInit+0xf4>)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005fd8:	2200      	movs	r2, #0
 8005fda:	2100      	movs	r1, #0
 8005fdc:	2025      	movs	r0, #37	; 0x25
 8005fde:	f7fa ff4a 	bl	8000e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005fe2:	2025      	movs	r0, #37	; 0x25
 8005fe4:	f7fa ff63 	bl	8000eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005fe8:	bf00      	nop
 8005fea:	3720      	adds	r7, #32
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	40013800 	.word	0x40013800
 8005ff4:	40021000 	.word	0x40021000
 8005ff8:	40010800 	.word	0x40010800
 8005ffc:	20000bbc 	.word	0x20000bbc
 8006000:	40020058 	.word	0x40020058

08006004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006008:	bf00      	nop
 800600a:	46bd      	mov	sp, r7
 800600c:	bc80      	pop	{r7}
 800600e:	4770      	bx	lr

08006010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006010:	b480      	push	{r7}
 8006012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006014:	e7fe      	b.n	8006014 <HardFault_Handler+0x4>

08006016 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006016:	b480      	push	{r7}
 8006018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800601a:	e7fe      	b.n	800601a <MemManage_Handler+0x4>

0800601c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800601c:	b480      	push	{r7}
 800601e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006020:	e7fe      	b.n	8006020 <BusFault_Handler+0x4>

08006022 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006022:	b480      	push	{r7}
 8006024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006026:	e7fe      	b.n	8006026 <UsageFault_Handler+0x4>

08006028 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006028:	b480      	push	{r7}
 800602a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800602c:	bf00      	nop
 800602e:	46bd      	mov	sp, r7
 8006030:	bc80      	pop	{r7}
 8006032:	4770      	bx	lr

08006034 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006034:	b480      	push	{r7}
 8006036:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006038:	bf00      	nop
 800603a:	46bd      	mov	sp, r7
 800603c:	bc80      	pop	{r7}
 800603e:	4770      	bx	lr

08006040 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006040:	b480      	push	{r7}
 8006042:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006044:	bf00      	nop
 8006046:	46bd      	mov	sp, r7
 8006048:	bc80      	pop	{r7}
 800604a:	4770      	bx	lr

0800604c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006050:	f7fa fdfa 	bl	8000c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Interrupts_SysTick();
 8006054:	f7fe f98e 	bl	8004374 <Interrupts_SysTick>
  /* USER CODE END SysTick_IRQn 1 */
}
 8006058:	bf00      	nop
 800605a:	bd80      	pop	{r7, pc}

0800605c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_RESET_Pin);
 8006060:	2008      	movs	r0, #8
 8006062:	f7fb fdb7 	bl	8001bd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8006066:	bf00      	nop
 8006068:	bd80      	pop	{r7, pc}
	...

0800606c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006070:	4802      	ldr	r0, [pc, #8]	; (800607c <DMA1_Channel5_IRQHandler+0x10>)
 8006072:	f7fb f8bd 	bl	80011f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8006076:	bf00      	nop
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	20000bbc 	.word	0x20000bbc

08006080 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006084:	4802      	ldr	r0, [pc, #8]	; (8006090 <USART1_IRQHandler+0x10>)
 8006086:	f7fd f975 	bl	8003374 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800608a:	bf00      	nop
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	20000b78 	.word	0x20000b78

08006094 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800609c:	4b11      	ldr	r3, [pc, #68]	; (80060e4 <_sbrk+0x50>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d102      	bne.n	80060aa <_sbrk+0x16>
		heap_end = &end;
 80060a4:	4b0f      	ldr	r3, [pc, #60]	; (80060e4 <_sbrk+0x50>)
 80060a6:	4a10      	ldr	r2, [pc, #64]	; (80060e8 <_sbrk+0x54>)
 80060a8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80060aa:	4b0e      	ldr	r3, [pc, #56]	; (80060e4 <_sbrk+0x50>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80060b0:	4b0c      	ldr	r3, [pc, #48]	; (80060e4 <_sbrk+0x50>)
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4413      	add	r3, r2
 80060b8:	466a      	mov	r2, sp
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d907      	bls.n	80060ce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80060be:	f000 f86f 	bl	80061a0 <__errno>
 80060c2:	4603      	mov	r3, r0
 80060c4:	220c      	movs	r2, #12
 80060c6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80060c8:	f04f 33ff 	mov.w	r3, #4294967295
 80060cc:	e006      	b.n	80060dc <_sbrk+0x48>
	}

	heap_end += incr;
 80060ce:	4b05      	ldr	r3, [pc, #20]	; (80060e4 <_sbrk+0x50>)
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4413      	add	r3, r2
 80060d6:	4a03      	ldr	r2, [pc, #12]	; (80060e4 <_sbrk+0x50>)
 80060d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80060da:	68fb      	ldr	r3, [r7, #12]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	20000c00 	.word	0x20000c00
 80060e8:	20000c40 	.word	0x20000c40

080060ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80060ec:	b480      	push	{r7}
 80060ee:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80060f0:	4b15      	ldr	r3, [pc, #84]	; (8006148 <SystemInit+0x5c>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a14      	ldr	r2, [pc, #80]	; (8006148 <SystemInit+0x5c>)
 80060f6:	f043 0301 	orr.w	r3, r3, #1
 80060fa:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80060fc:	4b12      	ldr	r3, [pc, #72]	; (8006148 <SystemInit+0x5c>)
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	4911      	ldr	r1, [pc, #68]	; (8006148 <SystemInit+0x5c>)
 8006102:	4b12      	ldr	r3, [pc, #72]	; (800614c <SystemInit+0x60>)
 8006104:	4013      	ands	r3, r2
 8006106:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006108:	4b0f      	ldr	r3, [pc, #60]	; (8006148 <SystemInit+0x5c>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a0e      	ldr	r2, [pc, #56]	; (8006148 <SystemInit+0x5c>)
 800610e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006116:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006118:	4b0b      	ldr	r3, [pc, #44]	; (8006148 <SystemInit+0x5c>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a0a      	ldr	r2, [pc, #40]	; (8006148 <SystemInit+0x5c>)
 800611e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006122:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8006124:	4b08      	ldr	r3, [pc, #32]	; (8006148 <SystemInit+0x5c>)
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	4a07      	ldr	r2, [pc, #28]	; (8006148 <SystemInit+0x5c>)
 800612a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800612e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8006130:	4b05      	ldr	r3, [pc, #20]	; (8006148 <SystemInit+0x5c>)
 8006132:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8006136:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8006138:	4b05      	ldr	r3, [pc, #20]	; (8006150 <SystemInit+0x64>)
 800613a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800613e:	609a      	str	r2, [r3, #8]
#endif 
}
 8006140:	bf00      	nop
 8006142:	46bd      	mov	sp, r7
 8006144:	bc80      	pop	{r7}
 8006146:	4770      	bx	lr
 8006148:	40021000 	.word	0x40021000
 800614c:	f8ff0000 	.word	0xf8ff0000
 8006150:	e000ed00 	.word	0xe000ed00

08006154 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006154:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006156:	e003      	b.n	8006160 <LoopCopyDataInit>

08006158 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006158:	4b0b      	ldr	r3, [pc, #44]	; (8006188 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800615a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800615c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800615e:	3104      	adds	r1, #4

08006160 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006160:	480a      	ldr	r0, [pc, #40]	; (800618c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8006162:	4b0b      	ldr	r3, [pc, #44]	; (8006190 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006164:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006166:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006168:	d3f6      	bcc.n	8006158 <CopyDataInit>
  ldr r2, =_sbss
 800616a:	4a0a      	ldr	r2, [pc, #40]	; (8006194 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800616c:	e002      	b.n	8006174 <LoopFillZerobss>

0800616e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800616e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006170:	f842 3b04 	str.w	r3, [r2], #4

08006174 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006174:	4b08      	ldr	r3, [pc, #32]	; (8006198 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8006176:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006178:	d3f9      	bcc.n	800616e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800617a:	f7ff ffb7 	bl	80060ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800617e:	f000 f815 	bl	80061ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006182:	f7ff fae3 	bl	800574c <main>
  bx lr
 8006186:	4770      	bx	lr
  ldr r3, =_sidata
 8006188:	08007498 	.word	0x08007498
  ldr r0, =_sdata
 800618c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006190:	2000086c 	.word	0x2000086c
  ldr r2, =_sbss
 8006194:	20000870 	.word	0x20000870
  ldr r3, = _ebss
 8006198:	20000c40 	.word	0x20000c40

0800619c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800619c:	e7fe      	b.n	800619c <ADC1_2_IRQHandler>
	...

080061a0 <__errno>:
 80061a0:	4b01      	ldr	r3, [pc, #4]	; (80061a8 <__errno+0x8>)
 80061a2:	6818      	ldr	r0, [r3, #0]
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	2000002c 	.word	0x2000002c

080061ac <__libc_init_array>:
 80061ac:	b570      	push	{r4, r5, r6, lr}
 80061ae:	2600      	movs	r6, #0
 80061b0:	4d0c      	ldr	r5, [pc, #48]	; (80061e4 <__libc_init_array+0x38>)
 80061b2:	4c0d      	ldr	r4, [pc, #52]	; (80061e8 <__libc_init_array+0x3c>)
 80061b4:	1b64      	subs	r4, r4, r5
 80061b6:	10a4      	asrs	r4, r4, #2
 80061b8:	42a6      	cmp	r6, r4
 80061ba:	d109      	bne.n	80061d0 <__libc_init_array+0x24>
 80061bc:	f000 fc1a 	bl	80069f4 <_init>
 80061c0:	2600      	movs	r6, #0
 80061c2:	4d0a      	ldr	r5, [pc, #40]	; (80061ec <__libc_init_array+0x40>)
 80061c4:	4c0a      	ldr	r4, [pc, #40]	; (80061f0 <__libc_init_array+0x44>)
 80061c6:	1b64      	subs	r4, r4, r5
 80061c8:	10a4      	asrs	r4, r4, #2
 80061ca:	42a6      	cmp	r6, r4
 80061cc:	d105      	bne.n	80061da <__libc_init_array+0x2e>
 80061ce:	bd70      	pop	{r4, r5, r6, pc}
 80061d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80061d4:	4798      	blx	r3
 80061d6:	3601      	adds	r6, #1
 80061d8:	e7ee      	b.n	80061b8 <__libc_init_array+0xc>
 80061da:	f855 3b04 	ldr.w	r3, [r5], #4
 80061de:	4798      	blx	r3
 80061e0:	3601      	adds	r6, #1
 80061e2:	e7f2      	b.n	80061ca <__libc_init_array+0x1e>
 80061e4:	0800748c 	.word	0x0800748c
 80061e8:	0800748c 	.word	0x0800748c
 80061ec:	0800748c 	.word	0x0800748c
 80061f0:	08007494 	.word	0x08007494

080061f4 <malloc>:
 80061f4:	4b02      	ldr	r3, [pc, #8]	; (8006200 <malloc+0xc>)
 80061f6:	4601      	mov	r1, r0
 80061f8:	6818      	ldr	r0, [r3, #0]
 80061fa:	f000 b803 	b.w	8006204 <_malloc_r>
 80061fe:	bf00      	nop
 8006200:	2000002c 	.word	0x2000002c

08006204 <_malloc_r>:
 8006204:	f101 030b 	add.w	r3, r1, #11
 8006208:	2b16      	cmp	r3, #22
 800620a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800620e:	4605      	mov	r5, r0
 8006210:	d906      	bls.n	8006220 <_malloc_r+0x1c>
 8006212:	f033 0707 	bics.w	r7, r3, #7
 8006216:	d504      	bpl.n	8006222 <_malloc_r+0x1e>
 8006218:	230c      	movs	r3, #12
 800621a:	602b      	str	r3, [r5, #0]
 800621c:	2400      	movs	r4, #0
 800621e:	e1a3      	b.n	8006568 <_malloc_r+0x364>
 8006220:	2710      	movs	r7, #16
 8006222:	42b9      	cmp	r1, r7
 8006224:	d8f8      	bhi.n	8006218 <_malloc_r+0x14>
 8006226:	4628      	mov	r0, r5
 8006228:	f000 fa3e 	bl	80066a8 <__malloc_lock>
 800622c:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8006230:	4eaf      	ldr	r6, [pc, #700]	; (80064f0 <_malloc_r+0x2ec>)
 8006232:	d237      	bcs.n	80062a4 <_malloc_r+0xa0>
 8006234:	f107 0208 	add.w	r2, r7, #8
 8006238:	4432      	add	r2, r6
 800623a:	6854      	ldr	r4, [r2, #4]
 800623c:	f1a2 0108 	sub.w	r1, r2, #8
 8006240:	428c      	cmp	r4, r1
 8006242:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8006246:	d102      	bne.n	800624e <_malloc_r+0x4a>
 8006248:	68d4      	ldr	r4, [r2, #12]
 800624a:	42a2      	cmp	r2, r4
 800624c:	d010      	beq.n	8006270 <_malloc_r+0x6c>
 800624e:	6863      	ldr	r3, [r4, #4]
 8006250:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8006254:	f023 0303 	bic.w	r3, r3, #3
 8006258:	60ca      	str	r2, [r1, #12]
 800625a:	4423      	add	r3, r4
 800625c:	6091      	str	r1, [r2, #8]
 800625e:	685a      	ldr	r2, [r3, #4]
 8006260:	f042 0201 	orr.w	r2, r2, #1
 8006264:	605a      	str	r2, [r3, #4]
 8006266:	4628      	mov	r0, r5
 8006268:	f000 fa24 	bl	80066b4 <__malloc_unlock>
 800626c:	3408      	adds	r4, #8
 800626e:	e17b      	b.n	8006568 <_malloc_r+0x364>
 8006270:	3302      	adds	r3, #2
 8006272:	6934      	ldr	r4, [r6, #16]
 8006274:	499f      	ldr	r1, [pc, #636]	; (80064f4 <_malloc_r+0x2f0>)
 8006276:	428c      	cmp	r4, r1
 8006278:	d077      	beq.n	800636a <_malloc_r+0x166>
 800627a:	6862      	ldr	r2, [r4, #4]
 800627c:	f022 0c03 	bic.w	ip, r2, #3
 8006280:	ebac 0007 	sub.w	r0, ip, r7
 8006284:	280f      	cmp	r0, #15
 8006286:	dd48      	ble.n	800631a <_malloc_r+0x116>
 8006288:	19e2      	adds	r2, r4, r7
 800628a:	f040 0301 	orr.w	r3, r0, #1
 800628e:	f047 0701 	orr.w	r7, r7, #1
 8006292:	6067      	str	r7, [r4, #4]
 8006294:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8006298:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800629c:	6053      	str	r3, [r2, #4]
 800629e:	f844 000c 	str.w	r0, [r4, ip]
 80062a2:	e7e0      	b.n	8006266 <_malloc_r+0x62>
 80062a4:	0a7b      	lsrs	r3, r7, #9
 80062a6:	d02a      	beq.n	80062fe <_malloc_r+0xfa>
 80062a8:	2b04      	cmp	r3, #4
 80062aa:	d812      	bhi.n	80062d2 <_malloc_r+0xce>
 80062ac:	09bb      	lsrs	r3, r7, #6
 80062ae:	3338      	adds	r3, #56	; 0x38
 80062b0:	1c5a      	adds	r2, r3, #1
 80062b2:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 80062b6:	6854      	ldr	r4, [r2, #4]
 80062b8:	f1a2 0c08 	sub.w	ip, r2, #8
 80062bc:	4564      	cmp	r4, ip
 80062be:	d006      	beq.n	80062ce <_malloc_r+0xca>
 80062c0:	6862      	ldr	r2, [r4, #4]
 80062c2:	f022 0203 	bic.w	r2, r2, #3
 80062c6:	1bd0      	subs	r0, r2, r7
 80062c8:	280f      	cmp	r0, #15
 80062ca:	dd1c      	ble.n	8006306 <_malloc_r+0x102>
 80062cc:	3b01      	subs	r3, #1
 80062ce:	3301      	adds	r3, #1
 80062d0:	e7cf      	b.n	8006272 <_malloc_r+0x6e>
 80062d2:	2b14      	cmp	r3, #20
 80062d4:	d801      	bhi.n	80062da <_malloc_r+0xd6>
 80062d6:	335b      	adds	r3, #91	; 0x5b
 80062d8:	e7ea      	b.n	80062b0 <_malloc_r+0xac>
 80062da:	2b54      	cmp	r3, #84	; 0x54
 80062dc:	d802      	bhi.n	80062e4 <_malloc_r+0xe0>
 80062de:	0b3b      	lsrs	r3, r7, #12
 80062e0:	336e      	adds	r3, #110	; 0x6e
 80062e2:	e7e5      	b.n	80062b0 <_malloc_r+0xac>
 80062e4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80062e8:	d802      	bhi.n	80062f0 <_malloc_r+0xec>
 80062ea:	0bfb      	lsrs	r3, r7, #15
 80062ec:	3377      	adds	r3, #119	; 0x77
 80062ee:	e7df      	b.n	80062b0 <_malloc_r+0xac>
 80062f0:	f240 5254 	movw	r2, #1364	; 0x554
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d804      	bhi.n	8006302 <_malloc_r+0xfe>
 80062f8:	0cbb      	lsrs	r3, r7, #18
 80062fa:	337c      	adds	r3, #124	; 0x7c
 80062fc:	e7d8      	b.n	80062b0 <_malloc_r+0xac>
 80062fe:	233f      	movs	r3, #63	; 0x3f
 8006300:	e7d6      	b.n	80062b0 <_malloc_r+0xac>
 8006302:	237e      	movs	r3, #126	; 0x7e
 8006304:	e7d4      	b.n	80062b0 <_malloc_r+0xac>
 8006306:	2800      	cmp	r0, #0
 8006308:	68e1      	ldr	r1, [r4, #12]
 800630a:	db04      	blt.n	8006316 <_malloc_r+0x112>
 800630c:	68a3      	ldr	r3, [r4, #8]
 800630e:	60d9      	str	r1, [r3, #12]
 8006310:	608b      	str	r3, [r1, #8]
 8006312:	18a3      	adds	r3, r4, r2
 8006314:	e7a3      	b.n	800625e <_malloc_r+0x5a>
 8006316:	460c      	mov	r4, r1
 8006318:	e7d0      	b.n	80062bc <_malloc_r+0xb8>
 800631a:	2800      	cmp	r0, #0
 800631c:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8006320:	db07      	blt.n	8006332 <_malloc_r+0x12e>
 8006322:	44a4      	add	ip, r4
 8006324:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8006328:	f043 0301 	orr.w	r3, r3, #1
 800632c:	f8cc 3004 	str.w	r3, [ip, #4]
 8006330:	e799      	b.n	8006266 <_malloc_r+0x62>
 8006332:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8006336:	6870      	ldr	r0, [r6, #4]
 8006338:	f080 8094 	bcs.w	8006464 <_malloc_r+0x260>
 800633c:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8006340:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8006344:	f04f 0c01 	mov.w	ip, #1
 8006348:	fa0c fc0e 	lsl.w	ip, ip, lr
 800634c:	ea4c 0000 	orr.w	r0, ip, r0
 8006350:	3201      	adds	r2, #1
 8006352:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8006356:	6070      	str	r0, [r6, #4]
 8006358:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800635c:	3808      	subs	r0, #8
 800635e:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8006362:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8006366:	f8cc 400c 	str.w	r4, [ip, #12]
 800636a:	2001      	movs	r0, #1
 800636c:	109a      	asrs	r2, r3, #2
 800636e:	fa00 f202 	lsl.w	r2, r0, r2
 8006372:	6870      	ldr	r0, [r6, #4]
 8006374:	4290      	cmp	r0, r2
 8006376:	d326      	bcc.n	80063c6 <_malloc_r+0x1c2>
 8006378:	4210      	tst	r0, r2
 800637a:	d106      	bne.n	800638a <_malloc_r+0x186>
 800637c:	f023 0303 	bic.w	r3, r3, #3
 8006380:	0052      	lsls	r2, r2, #1
 8006382:	4210      	tst	r0, r2
 8006384:	f103 0304 	add.w	r3, r3, #4
 8006388:	d0fa      	beq.n	8006380 <_malloc_r+0x17c>
 800638a:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800638e:	46c1      	mov	r9, r8
 8006390:	469e      	mov	lr, r3
 8006392:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8006396:	454c      	cmp	r4, r9
 8006398:	f040 80b8 	bne.w	800650c <_malloc_r+0x308>
 800639c:	f10e 0e01 	add.w	lr, lr, #1
 80063a0:	f01e 0f03 	tst.w	lr, #3
 80063a4:	f109 0908 	add.w	r9, r9, #8
 80063a8:	d1f3      	bne.n	8006392 <_malloc_r+0x18e>
 80063aa:	0798      	lsls	r0, r3, #30
 80063ac:	f040 80e2 	bne.w	8006574 <_malloc_r+0x370>
 80063b0:	6873      	ldr	r3, [r6, #4]
 80063b2:	ea23 0302 	bic.w	r3, r3, r2
 80063b6:	6073      	str	r3, [r6, #4]
 80063b8:	6870      	ldr	r0, [r6, #4]
 80063ba:	0052      	lsls	r2, r2, #1
 80063bc:	4290      	cmp	r0, r2
 80063be:	d302      	bcc.n	80063c6 <_malloc_r+0x1c2>
 80063c0:	2a00      	cmp	r2, #0
 80063c2:	f040 80e3 	bne.w	800658c <_malloc_r+0x388>
 80063c6:	f8d6 a008 	ldr.w	sl, [r6, #8]
 80063ca:	f8da 3004 	ldr.w	r3, [sl, #4]
 80063ce:	f023 0903 	bic.w	r9, r3, #3
 80063d2:	45b9      	cmp	r9, r7
 80063d4:	d304      	bcc.n	80063e0 <_malloc_r+0x1dc>
 80063d6:	eba9 0207 	sub.w	r2, r9, r7
 80063da:	2a0f      	cmp	r2, #15
 80063dc:	f300 8141 	bgt.w	8006662 <_malloc_r+0x45e>
 80063e0:	4b45      	ldr	r3, [pc, #276]	; (80064f8 <_malloc_r+0x2f4>)
 80063e2:	2008      	movs	r0, #8
 80063e4:	6819      	ldr	r1, [r3, #0]
 80063e6:	eb0a 0b09 	add.w	fp, sl, r9
 80063ea:	3110      	adds	r1, #16
 80063ec:	4439      	add	r1, r7
 80063ee:	9101      	str	r1, [sp, #4]
 80063f0:	f000 f976 	bl	80066e0 <sysconf>
 80063f4:	4a41      	ldr	r2, [pc, #260]	; (80064fc <_malloc_r+0x2f8>)
 80063f6:	9901      	ldr	r1, [sp, #4]
 80063f8:	6813      	ldr	r3, [r2, #0]
 80063fa:	4680      	mov	r8, r0
 80063fc:	3301      	adds	r3, #1
 80063fe:	bf1f      	itttt	ne
 8006400:	f101 31ff 	addne.w	r1, r1, #4294967295
 8006404:	1809      	addne	r1, r1, r0
 8006406:	4243      	negne	r3, r0
 8006408:	4019      	andne	r1, r3
 800640a:	4628      	mov	r0, r5
 800640c:	9101      	str	r1, [sp, #4]
 800640e:	f000 f957 	bl	80066c0 <_sbrk_r>
 8006412:	1c42      	adds	r2, r0, #1
 8006414:	4604      	mov	r4, r0
 8006416:	f000 80f7 	beq.w	8006608 <_malloc_r+0x404>
 800641a:	4583      	cmp	fp, r0
 800641c:	9901      	ldr	r1, [sp, #4]
 800641e:	4a37      	ldr	r2, [pc, #220]	; (80064fc <_malloc_r+0x2f8>)
 8006420:	d902      	bls.n	8006428 <_malloc_r+0x224>
 8006422:	45b2      	cmp	sl, r6
 8006424:	f040 80f0 	bne.w	8006608 <_malloc_r+0x404>
 8006428:	4b35      	ldr	r3, [pc, #212]	; (8006500 <_malloc_r+0x2fc>)
 800642a:	45a3      	cmp	fp, r4
 800642c:	6818      	ldr	r0, [r3, #0]
 800642e:	f108 3cff 	add.w	ip, r8, #4294967295
 8006432:	4408      	add	r0, r1
 8006434:	6018      	str	r0, [r3, #0]
 8006436:	f040 80ab 	bne.w	8006590 <_malloc_r+0x38c>
 800643a:	ea1b 0f0c 	tst.w	fp, ip
 800643e:	f040 80a7 	bne.w	8006590 <_malloc_r+0x38c>
 8006442:	68b2      	ldr	r2, [r6, #8]
 8006444:	4449      	add	r1, r9
 8006446:	f041 0101 	orr.w	r1, r1, #1
 800644a:	6051      	str	r1, [r2, #4]
 800644c:	4a2d      	ldr	r2, [pc, #180]	; (8006504 <_malloc_r+0x300>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6811      	ldr	r1, [r2, #0]
 8006452:	428b      	cmp	r3, r1
 8006454:	bf88      	it	hi
 8006456:	6013      	strhi	r3, [r2, #0]
 8006458:	4a2b      	ldr	r2, [pc, #172]	; (8006508 <_malloc_r+0x304>)
 800645a:	6811      	ldr	r1, [r2, #0]
 800645c:	428b      	cmp	r3, r1
 800645e:	bf88      	it	hi
 8006460:	6013      	strhi	r3, [r2, #0]
 8006462:	e0d1      	b.n	8006608 <_malloc_r+0x404>
 8006464:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8006468:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800646c:	d218      	bcs.n	80064a0 <_malloc_r+0x29c>
 800646e:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8006472:	3238      	adds	r2, #56	; 0x38
 8006474:	f102 0e01 	add.w	lr, r2, #1
 8006478:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800647c:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8006480:	45f0      	cmp	r8, lr
 8006482:	d12b      	bne.n	80064dc <_malloc_r+0x2d8>
 8006484:	f04f 0c01 	mov.w	ip, #1
 8006488:	1092      	asrs	r2, r2, #2
 800648a:	fa0c f202 	lsl.w	r2, ip, r2
 800648e:	4310      	orrs	r0, r2
 8006490:	6070      	str	r0, [r6, #4]
 8006492:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8006496:	f8c8 4008 	str.w	r4, [r8, #8]
 800649a:	f8ce 400c 	str.w	r4, [lr, #12]
 800649e:	e764      	b.n	800636a <_malloc_r+0x166>
 80064a0:	2a14      	cmp	r2, #20
 80064a2:	d801      	bhi.n	80064a8 <_malloc_r+0x2a4>
 80064a4:	325b      	adds	r2, #91	; 0x5b
 80064a6:	e7e5      	b.n	8006474 <_malloc_r+0x270>
 80064a8:	2a54      	cmp	r2, #84	; 0x54
 80064aa:	d803      	bhi.n	80064b4 <_malloc_r+0x2b0>
 80064ac:	ea4f 321c 	mov.w	r2, ip, lsr #12
 80064b0:	326e      	adds	r2, #110	; 0x6e
 80064b2:	e7df      	b.n	8006474 <_malloc_r+0x270>
 80064b4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80064b8:	d803      	bhi.n	80064c2 <_malloc_r+0x2be>
 80064ba:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 80064be:	3277      	adds	r2, #119	; 0x77
 80064c0:	e7d8      	b.n	8006474 <_malloc_r+0x270>
 80064c2:	f240 5e54 	movw	lr, #1364	; 0x554
 80064c6:	4572      	cmp	r2, lr
 80064c8:	bf96      	itet	ls
 80064ca:	ea4f 429c 	movls.w	r2, ip, lsr #18
 80064ce:	227e      	movhi	r2, #126	; 0x7e
 80064d0:	327c      	addls	r2, #124	; 0x7c
 80064d2:	e7cf      	b.n	8006474 <_malloc_r+0x270>
 80064d4:	f8de e008 	ldr.w	lr, [lr, #8]
 80064d8:	45f0      	cmp	r8, lr
 80064da:	d005      	beq.n	80064e8 <_malloc_r+0x2e4>
 80064dc:	f8de 2004 	ldr.w	r2, [lr, #4]
 80064e0:	f022 0203 	bic.w	r2, r2, #3
 80064e4:	4562      	cmp	r2, ip
 80064e6:	d8f5      	bhi.n	80064d4 <_malloc_r+0x2d0>
 80064e8:	f8de 800c 	ldr.w	r8, [lr, #12]
 80064ec:	e7d1      	b.n	8006492 <_malloc_r+0x28e>
 80064ee:	bf00      	nop
 80064f0:	20000458 	.word	0x20000458
 80064f4:	20000460 	.word	0x20000460
 80064f8:	20000c34 	.word	0x20000c34
 80064fc:	20000860 	.word	0x20000860
 8006500:	20000c04 	.word	0x20000c04
 8006504:	20000c2c 	.word	0x20000c2c
 8006508:	20000c30 	.word	0x20000c30
 800650c:	6860      	ldr	r0, [r4, #4]
 800650e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8006512:	f020 0003 	bic.w	r0, r0, #3
 8006516:	eba0 0a07 	sub.w	sl, r0, r7
 800651a:	f1ba 0f0f 	cmp.w	sl, #15
 800651e:	dd12      	ble.n	8006546 <_malloc_r+0x342>
 8006520:	68a3      	ldr	r3, [r4, #8]
 8006522:	19e2      	adds	r2, r4, r7
 8006524:	f047 0701 	orr.w	r7, r7, #1
 8006528:	6067      	str	r7, [r4, #4]
 800652a:	f8c3 c00c 	str.w	ip, [r3, #12]
 800652e:	f8cc 3008 	str.w	r3, [ip, #8]
 8006532:	f04a 0301 	orr.w	r3, sl, #1
 8006536:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800653a:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800653e:	6053      	str	r3, [r2, #4]
 8006540:	f844 a000 	str.w	sl, [r4, r0]
 8006544:	e68f      	b.n	8006266 <_malloc_r+0x62>
 8006546:	f1ba 0f00 	cmp.w	sl, #0
 800654a:	db11      	blt.n	8006570 <_malloc_r+0x36c>
 800654c:	4420      	add	r0, r4
 800654e:	6843      	ldr	r3, [r0, #4]
 8006550:	f043 0301 	orr.w	r3, r3, #1
 8006554:	6043      	str	r3, [r0, #4]
 8006556:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800655a:	4628      	mov	r0, r5
 800655c:	f8c3 c00c 	str.w	ip, [r3, #12]
 8006560:	f8cc 3008 	str.w	r3, [ip, #8]
 8006564:	f000 f8a6 	bl	80066b4 <__malloc_unlock>
 8006568:	4620      	mov	r0, r4
 800656a:	b003      	add	sp, #12
 800656c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006570:	4664      	mov	r4, ip
 8006572:	e710      	b.n	8006396 <_malloc_r+0x192>
 8006574:	f858 0908 	ldr.w	r0, [r8], #-8
 8006578:	3b01      	subs	r3, #1
 800657a:	4540      	cmp	r0, r8
 800657c:	f43f af15 	beq.w	80063aa <_malloc_r+0x1a6>
 8006580:	e71a      	b.n	80063b8 <_malloc_r+0x1b4>
 8006582:	3304      	adds	r3, #4
 8006584:	0052      	lsls	r2, r2, #1
 8006586:	4210      	tst	r0, r2
 8006588:	d0fb      	beq.n	8006582 <_malloc_r+0x37e>
 800658a:	e6fe      	b.n	800638a <_malloc_r+0x186>
 800658c:	4673      	mov	r3, lr
 800658e:	e7fa      	b.n	8006586 <_malloc_r+0x382>
 8006590:	f8d2 e000 	ldr.w	lr, [r2]
 8006594:	f1be 3fff 	cmp.w	lr, #4294967295
 8006598:	bf1b      	ittet	ne
 800659a:	eba4 0b0b 	subne.w	fp, r4, fp
 800659e:	eb0b 0200 	addne.w	r2, fp, r0
 80065a2:	6014      	streq	r4, [r2, #0]
 80065a4:	601a      	strne	r2, [r3, #0]
 80065a6:	f014 0b07 	ands.w	fp, r4, #7
 80065aa:	bf0e      	itee	eq
 80065ac:	4658      	moveq	r0, fp
 80065ae:	f1cb 0008 	rsbne	r0, fp, #8
 80065b2:	1824      	addne	r4, r4, r0
 80065b4:	1862      	adds	r2, r4, r1
 80065b6:	ea02 010c 	and.w	r1, r2, ip
 80065ba:	4480      	add	r8, r0
 80065bc:	eba8 0801 	sub.w	r8, r8, r1
 80065c0:	ea08 080c 	and.w	r8, r8, ip
 80065c4:	4641      	mov	r1, r8
 80065c6:	4628      	mov	r0, r5
 80065c8:	9201      	str	r2, [sp, #4]
 80065ca:	f000 f879 	bl	80066c0 <_sbrk_r>
 80065ce:	1c43      	adds	r3, r0, #1
 80065d0:	9a01      	ldr	r2, [sp, #4]
 80065d2:	4b29      	ldr	r3, [pc, #164]	; (8006678 <_malloc_r+0x474>)
 80065d4:	d107      	bne.n	80065e6 <_malloc_r+0x3e2>
 80065d6:	f1bb 0f00 	cmp.w	fp, #0
 80065da:	d023      	beq.n	8006624 <_malloc_r+0x420>
 80065dc:	f04f 0800 	mov.w	r8, #0
 80065e0:	f1ab 0008 	sub.w	r0, fp, #8
 80065e4:	4410      	add	r0, r2
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	1b00      	subs	r0, r0, r4
 80065ea:	4440      	add	r0, r8
 80065ec:	4442      	add	r2, r8
 80065ee:	f040 0001 	orr.w	r0, r0, #1
 80065f2:	45b2      	cmp	sl, r6
 80065f4:	60b4      	str	r4, [r6, #8]
 80065f6:	601a      	str	r2, [r3, #0]
 80065f8:	6060      	str	r0, [r4, #4]
 80065fa:	f43f af27 	beq.w	800644c <_malloc_r+0x248>
 80065fe:	f1b9 0f0f 	cmp.w	r9, #15
 8006602:	d812      	bhi.n	800662a <_malloc_r+0x426>
 8006604:	2301      	movs	r3, #1
 8006606:	6063      	str	r3, [r4, #4]
 8006608:	68b3      	ldr	r3, [r6, #8]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f023 0303 	bic.w	r3, r3, #3
 8006610:	42bb      	cmp	r3, r7
 8006612:	eba3 0207 	sub.w	r2, r3, r7
 8006616:	d301      	bcc.n	800661c <_malloc_r+0x418>
 8006618:	2a0f      	cmp	r2, #15
 800661a:	dc22      	bgt.n	8006662 <_malloc_r+0x45e>
 800661c:	4628      	mov	r0, r5
 800661e:	f000 f849 	bl	80066b4 <__malloc_unlock>
 8006622:	e5fb      	b.n	800621c <_malloc_r+0x18>
 8006624:	4610      	mov	r0, r2
 8006626:	46d8      	mov	r8, fp
 8006628:	e7dd      	b.n	80065e6 <_malloc_r+0x3e2>
 800662a:	2105      	movs	r1, #5
 800662c:	f8da 2004 	ldr.w	r2, [sl, #4]
 8006630:	f1a9 090c 	sub.w	r9, r9, #12
 8006634:	f029 0907 	bic.w	r9, r9, #7
 8006638:	f002 0201 	and.w	r2, r2, #1
 800663c:	ea42 0209 	orr.w	r2, r2, r9
 8006640:	f8ca 2004 	str.w	r2, [sl, #4]
 8006644:	f1b9 0f0f 	cmp.w	r9, #15
 8006648:	eb0a 0209 	add.w	r2, sl, r9
 800664c:	e9c2 1101 	strd	r1, r1, [r2, #4]
 8006650:	f67f aefc 	bls.w	800644c <_malloc_r+0x248>
 8006654:	4628      	mov	r0, r5
 8006656:	f10a 0108 	add.w	r1, sl, #8
 800665a:	f000 f8c7 	bl	80067ec <_free_r>
 800665e:	4b06      	ldr	r3, [pc, #24]	; (8006678 <_malloc_r+0x474>)
 8006660:	e6f4      	b.n	800644c <_malloc_r+0x248>
 8006662:	68b4      	ldr	r4, [r6, #8]
 8006664:	f047 0301 	orr.w	r3, r7, #1
 8006668:	f042 0201 	orr.w	r2, r2, #1
 800666c:	4427      	add	r7, r4
 800666e:	6063      	str	r3, [r4, #4]
 8006670:	60b7      	str	r7, [r6, #8]
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	e5f7      	b.n	8006266 <_malloc_r+0x62>
 8006676:	bf00      	nop
 8006678:	20000c04 	.word	0x20000c04

0800667c <memcpy>:
 800667c:	440a      	add	r2, r1
 800667e:	4291      	cmp	r1, r2
 8006680:	f100 33ff 	add.w	r3, r0, #4294967295
 8006684:	d100      	bne.n	8006688 <memcpy+0xc>
 8006686:	4770      	bx	lr
 8006688:	b510      	push	{r4, lr}
 800668a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800668e:	4291      	cmp	r1, r2
 8006690:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006694:	d1f9      	bne.n	800668a <memcpy+0xe>
 8006696:	bd10      	pop	{r4, pc}

08006698 <memset>:
 8006698:	4603      	mov	r3, r0
 800669a:	4402      	add	r2, r0
 800669c:	4293      	cmp	r3, r2
 800669e:	d100      	bne.n	80066a2 <memset+0xa>
 80066a0:	4770      	bx	lr
 80066a2:	f803 1b01 	strb.w	r1, [r3], #1
 80066a6:	e7f9      	b.n	800669c <memset+0x4>

080066a8 <__malloc_lock>:
 80066a8:	4801      	ldr	r0, [pc, #4]	; (80066b0 <__malloc_lock+0x8>)
 80066aa:	f000 b95f 	b.w	800696c <__retarget_lock_acquire_recursive>
 80066ae:	bf00      	nop
 80066b0:	20000c39 	.word	0x20000c39

080066b4 <__malloc_unlock>:
 80066b4:	4801      	ldr	r0, [pc, #4]	; (80066bc <__malloc_unlock+0x8>)
 80066b6:	f000 b95a 	b.w	800696e <__retarget_lock_release_recursive>
 80066ba:	bf00      	nop
 80066bc:	20000c39 	.word	0x20000c39

080066c0 <_sbrk_r>:
 80066c0:	b538      	push	{r3, r4, r5, lr}
 80066c2:	2300      	movs	r3, #0
 80066c4:	4d05      	ldr	r5, [pc, #20]	; (80066dc <_sbrk_r+0x1c>)
 80066c6:	4604      	mov	r4, r0
 80066c8:	4608      	mov	r0, r1
 80066ca:	602b      	str	r3, [r5, #0]
 80066cc:	f7ff fce2 	bl	8006094 <_sbrk>
 80066d0:	1c43      	adds	r3, r0, #1
 80066d2:	d102      	bne.n	80066da <_sbrk_r+0x1a>
 80066d4:	682b      	ldr	r3, [r5, #0]
 80066d6:	b103      	cbz	r3, 80066da <_sbrk_r+0x1a>
 80066d8:	6023      	str	r3, [r4, #0]
 80066da:	bd38      	pop	{r3, r4, r5, pc}
 80066dc:	20000c3c 	.word	0x20000c3c

080066e0 <sysconf>:
 80066e0:	2808      	cmp	r0, #8
 80066e2:	b508      	push	{r3, lr}
 80066e4:	d006      	beq.n	80066f4 <sysconf+0x14>
 80066e6:	f7ff fd5b 	bl	80061a0 <__errno>
 80066ea:	2316      	movs	r3, #22
 80066ec:	6003      	str	r3, [r0, #0]
 80066ee:	f04f 30ff 	mov.w	r0, #4294967295
 80066f2:	bd08      	pop	{r3, pc}
 80066f4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80066f8:	e7fb      	b.n	80066f2 <sysconf+0x12>
	...

080066fc <register_fini>:
 80066fc:	4b02      	ldr	r3, [pc, #8]	; (8006708 <register_fini+0xc>)
 80066fe:	b113      	cbz	r3, 8006706 <register_fini+0xa>
 8006700:	4802      	ldr	r0, [pc, #8]	; (800670c <register_fini+0x10>)
 8006702:	f000 b805 	b.w	8006710 <atexit>
 8006706:	4770      	bx	lr
 8006708:	00000000 	.word	0x00000000
 800670c:	0800671d 	.word	0x0800671d

08006710 <atexit>:
 8006710:	2300      	movs	r3, #0
 8006712:	4601      	mov	r1, r0
 8006714:	461a      	mov	r2, r3
 8006716:	4618      	mov	r0, r3
 8006718:	f000 b92a 	b.w	8006970 <__register_exitproc>

0800671c <__libc_fini_array>:
 800671c:	b538      	push	{r3, r4, r5, lr}
 800671e:	4d07      	ldr	r5, [pc, #28]	; (800673c <__libc_fini_array+0x20>)
 8006720:	4c07      	ldr	r4, [pc, #28]	; (8006740 <__libc_fini_array+0x24>)
 8006722:	1b64      	subs	r4, r4, r5
 8006724:	10a4      	asrs	r4, r4, #2
 8006726:	b91c      	cbnz	r4, 8006730 <__libc_fini_array+0x14>
 8006728:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800672c:	f000 b968 	b.w	8006a00 <_fini>
 8006730:	3c01      	subs	r4, #1
 8006732:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8006736:	4798      	blx	r3
 8006738:	e7f5      	b.n	8006726 <__libc_fini_array+0xa>
 800673a:	bf00      	nop
 800673c:	08007494 	.word	0x08007494
 8006740:	08007498 	.word	0x08007498

08006744 <_malloc_trim_r>:
 8006744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006748:	4606      	mov	r6, r0
 800674a:	2008      	movs	r0, #8
 800674c:	460c      	mov	r4, r1
 800674e:	f7ff ffc7 	bl	80066e0 <sysconf>
 8006752:	4680      	mov	r8, r0
 8006754:	4f22      	ldr	r7, [pc, #136]	; (80067e0 <_malloc_trim_r+0x9c>)
 8006756:	4630      	mov	r0, r6
 8006758:	f7ff ffa6 	bl	80066a8 <__malloc_lock>
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	685d      	ldr	r5, [r3, #4]
 8006760:	f025 0503 	bic.w	r5, r5, #3
 8006764:	1b2c      	subs	r4, r5, r4
 8006766:	3c11      	subs	r4, #17
 8006768:	4444      	add	r4, r8
 800676a:	fbb4 f4f8 	udiv	r4, r4, r8
 800676e:	3c01      	subs	r4, #1
 8006770:	fb08 f404 	mul.w	r4, r8, r4
 8006774:	45a0      	cmp	r8, r4
 8006776:	dd05      	ble.n	8006784 <_malloc_trim_r+0x40>
 8006778:	4630      	mov	r0, r6
 800677a:	f7ff ff9b 	bl	80066b4 <__malloc_unlock>
 800677e:	2000      	movs	r0, #0
 8006780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006784:	2100      	movs	r1, #0
 8006786:	4630      	mov	r0, r6
 8006788:	f7ff ff9a 	bl	80066c0 <_sbrk_r>
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	442b      	add	r3, r5
 8006790:	4298      	cmp	r0, r3
 8006792:	d1f1      	bne.n	8006778 <_malloc_trim_r+0x34>
 8006794:	4630      	mov	r0, r6
 8006796:	4261      	negs	r1, r4
 8006798:	f7ff ff92 	bl	80066c0 <_sbrk_r>
 800679c:	3001      	adds	r0, #1
 800679e:	d110      	bne.n	80067c2 <_malloc_trim_r+0x7e>
 80067a0:	2100      	movs	r1, #0
 80067a2:	4630      	mov	r0, r6
 80067a4:	f7ff ff8c 	bl	80066c0 <_sbrk_r>
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	1a83      	subs	r3, r0, r2
 80067ac:	2b0f      	cmp	r3, #15
 80067ae:	dde3      	ble.n	8006778 <_malloc_trim_r+0x34>
 80067b0:	490c      	ldr	r1, [pc, #48]	; (80067e4 <_malloc_trim_r+0xa0>)
 80067b2:	f043 0301 	orr.w	r3, r3, #1
 80067b6:	6809      	ldr	r1, [r1, #0]
 80067b8:	6053      	str	r3, [r2, #4]
 80067ba:	1a40      	subs	r0, r0, r1
 80067bc:	490a      	ldr	r1, [pc, #40]	; (80067e8 <_malloc_trim_r+0xa4>)
 80067be:	6008      	str	r0, [r1, #0]
 80067c0:	e7da      	b.n	8006778 <_malloc_trim_r+0x34>
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	4a08      	ldr	r2, [pc, #32]	; (80067e8 <_malloc_trim_r+0xa4>)
 80067c6:	1b2d      	subs	r5, r5, r4
 80067c8:	f045 0501 	orr.w	r5, r5, #1
 80067cc:	605d      	str	r5, [r3, #4]
 80067ce:	6813      	ldr	r3, [r2, #0]
 80067d0:	4630      	mov	r0, r6
 80067d2:	1b1b      	subs	r3, r3, r4
 80067d4:	6013      	str	r3, [r2, #0]
 80067d6:	f7ff ff6d 	bl	80066b4 <__malloc_unlock>
 80067da:	2001      	movs	r0, #1
 80067dc:	e7d0      	b.n	8006780 <_malloc_trim_r+0x3c>
 80067de:	bf00      	nop
 80067e0:	20000458 	.word	0x20000458
 80067e4:	20000860 	.word	0x20000860
 80067e8:	20000c04 	.word	0x20000c04

080067ec <_free_r>:
 80067ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ee:	4605      	mov	r5, r0
 80067f0:	460f      	mov	r7, r1
 80067f2:	2900      	cmp	r1, #0
 80067f4:	f000 80b1 	beq.w	800695a <_free_r+0x16e>
 80067f8:	f7ff ff56 	bl	80066a8 <__malloc_lock>
 80067fc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006800:	4856      	ldr	r0, [pc, #344]	; (800695c <_free_r+0x170>)
 8006802:	f022 0401 	bic.w	r4, r2, #1
 8006806:	f1a7 0308 	sub.w	r3, r7, #8
 800680a:	eb03 0c04 	add.w	ip, r3, r4
 800680e:	6881      	ldr	r1, [r0, #8]
 8006810:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8006814:	4561      	cmp	r1, ip
 8006816:	f026 0603 	bic.w	r6, r6, #3
 800681a:	f002 0201 	and.w	r2, r2, #1
 800681e:	d11b      	bne.n	8006858 <_free_r+0x6c>
 8006820:	4434      	add	r4, r6
 8006822:	b93a      	cbnz	r2, 8006834 <_free_r+0x48>
 8006824:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8006828:	1a9b      	subs	r3, r3, r2
 800682a:	4414      	add	r4, r2
 800682c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8006830:	60ca      	str	r2, [r1, #12]
 8006832:	6091      	str	r1, [r2, #8]
 8006834:	f044 0201 	orr.w	r2, r4, #1
 8006838:	605a      	str	r2, [r3, #4]
 800683a:	6083      	str	r3, [r0, #8]
 800683c:	4b48      	ldr	r3, [pc, #288]	; (8006960 <_free_r+0x174>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	42a3      	cmp	r3, r4
 8006842:	d804      	bhi.n	800684e <_free_r+0x62>
 8006844:	4b47      	ldr	r3, [pc, #284]	; (8006964 <_free_r+0x178>)
 8006846:	4628      	mov	r0, r5
 8006848:	6819      	ldr	r1, [r3, #0]
 800684a:	f7ff ff7b 	bl	8006744 <_malloc_trim_r>
 800684e:	4628      	mov	r0, r5
 8006850:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006854:	f7ff bf2e 	b.w	80066b4 <__malloc_unlock>
 8006858:	f8cc 6004 	str.w	r6, [ip, #4]
 800685c:	2a00      	cmp	r2, #0
 800685e:	d138      	bne.n	80068d2 <_free_r+0xe6>
 8006860:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8006864:	f100 0708 	add.w	r7, r0, #8
 8006868:	1a5b      	subs	r3, r3, r1
 800686a:	440c      	add	r4, r1
 800686c:	6899      	ldr	r1, [r3, #8]
 800686e:	42b9      	cmp	r1, r7
 8006870:	d031      	beq.n	80068d6 <_free_r+0xea>
 8006872:	68df      	ldr	r7, [r3, #12]
 8006874:	60cf      	str	r7, [r1, #12]
 8006876:	60b9      	str	r1, [r7, #8]
 8006878:	eb0c 0106 	add.w	r1, ip, r6
 800687c:	6849      	ldr	r1, [r1, #4]
 800687e:	07c9      	lsls	r1, r1, #31
 8006880:	d40b      	bmi.n	800689a <_free_r+0xae>
 8006882:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8006886:	4434      	add	r4, r6
 8006888:	bb3a      	cbnz	r2, 80068da <_free_r+0xee>
 800688a:	4e37      	ldr	r6, [pc, #220]	; (8006968 <_free_r+0x17c>)
 800688c:	42b1      	cmp	r1, r6
 800688e:	d124      	bne.n	80068da <_free_r+0xee>
 8006890:	2201      	movs	r2, #1
 8006892:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006896:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800689a:	f044 0101 	orr.w	r1, r4, #1
 800689e:	6059      	str	r1, [r3, #4]
 80068a0:	511c      	str	r4, [r3, r4]
 80068a2:	2a00      	cmp	r2, #0
 80068a4:	d1d3      	bne.n	800684e <_free_r+0x62>
 80068a6:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 80068aa:	d21b      	bcs.n	80068e4 <_free_r+0xf8>
 80068ac:	0961      	lsrs	r1, r4, #5
 80068ae:	08e2      	lsrs	r2, r4, #3
 80068b0:	2401      	movs	r4, #1
 80068b2:	408c      	lsls	r4, r1
 80068b4:	6841      	ldr	r1, [r0, #4]
 80068b6:	3201      	adds	r2, #1
 80068b8:	430c      	orrs	r4, r1
 80068ba:	6044      	str	r4, [r0, #4]
 80068bc:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 80068c0:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 80068c4:	3908      	subs	r1, #8
 80068c6:	e9c3 4102 	strd	r4, r1, [r3, #8]
 80068ca:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 80068ce:	60e3      	str	r3, [r4, #12]
 80068d0:	e7bd      	b.n	800684e <_free_r+0x62>
 80068d2:	2200      	movs	r2, #0
 80068d4:	e7d0      	b.n	8006878 <_free_r+0x8c>
 80068d6:	2201      	movs	r2, #1
 80068d8:	e7ce      	b.n	8006878 <_free_r+0x8c>
 80068da:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80068de:	60ce      	str	r6, [r1, #12]
 80068e0:	60b1      	str	r1, [r6, #8]
 80068e2:	e7da      	b.n	800689a <_free_r+0xae>
 80068e4:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 80068e8:	ea4f 2254 	mov.w	r2, r4, lsr #9
 80068ec:	d214      	bcs.n	8006918 <_free_r+0x12c>
 80068ee:	09a2      	lsrs	r2, r4, #6
 80068f0:	3238      	adds	r2, #56	; 0x38
 80068f2:	1c51      	adds	r1, r2, #1
 80068f4:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 80068f8:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 80068fc:	428e      	cmp	r6, r1
 80068fe:	d125      	bne.n	800694c <_free_r+0x160>
 8006900:	2401      	movs	r4, #1
 8006902:	1092      	asrs	r2, r2, #2
 8006904:	fa04 f202 	lsl.w	r2, r4, r2
 8006908:	6844      	ldr	r4, [r0, #4]
 800690a:	4322      	orrs	r2, r4
 800690c:	6042      	str	r2, [r0, #4]
 800690e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8006912:	60b3      	str	r3, [r6, #8]
 8006914:	60cb      	str	r3, [r1, #12]
 8006916:	e79a      	b.n	800684e <_free_r+0x62>
 8006918:	2a14      	cmp	r2, #20
 800691a:	d801      	bhi.n	8006920 <_free_r+0x134>
 800691c:	325b      	adds	r2, #91	; 0x5b
 800691e:	e7e8      	b.n	80068f2 <_free_r+0x106>
 8006920:	2a54      	cmp	r2, #84	; 0x54
 8006922:	d802      	bhi.n	800692a <_free_r+0x13e>
 8006924:	0b22      	lsrs	r2, r4, #12
 8006926:	326e      	adds	r2, #110	; 0x6e
 8006928:	e7e3      	b.n	80068f2 <_free_r+0x106>
 800692a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800692e:	d802      	bhi.n	8006936 <_free_r+0x14a>
 8006930:	0be2      	lsrs	r2, r4, #15
 8006932:	3277      	adds	r2, #119	; 0x77
 8006934:	e7dd      	b.n	80068f2 <_free_r+0x106>
 8006936:	f240 5154 	movw	r1, #1364	; 0x554
 800693a:	428a      	cmp	r2, r1
 800693c:	bf96      	itet	ls
 800693e:	0ca2      	lsrls	r2, r4, #18
 8006940:	227e      	movhi	r2, #126	; 0x7e
 8006942:	327c      	addls	r2, #124	; 0x7c
 8006944:	e7d5      	b.n	80068f2 <_free_r+0x106>
 8006946:	6889      	ldr	r1, [r1, #8]
 8006948:	428e      	cmp	r6, r1
 800694a:	d004      	beq.n	8006956 <_free_r+0x16a>
 800694c:	684a      	ldr	r2, [r1, #4]
 800694e:	f022 0203 	bic.w	r2, r2, #3
 8006952:	42a2      	cmp	r2, r4
 8006954:	d8f7      	bhi.n	8006946 <_free_r+0x15a>
 8006956:	68ce      	ldr	r6, [r1, #12]
 8006958:	e7d9      	b.n	800690e <_free_r+0x122>
 800695a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800695c:	20000458 	.word	0x20000458
 8006960:	20000864 	.word	0x20000864
 8006964:	20000c34 	.word	0x20000c34
 8006968:	20000460 	.word	0x20000460

0800696c <__retarget_lock_acquire_recursive>:
 800696c:	4770      	bx	lr

0800696e <__retarget_lock_release_recursive>:
 800696e:	4770      	bx	lr

08006970 <__register_exitproc>:
 8006970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006974:	f8df a074 	ldr.w	sl, [pc, #116]	; 80069ec <__register_exitproc+0x7c>
 8006978:	4606      	mov	r6, r0
 800697a:	f8da 0000 	ldr.w	r0, [sl]
 800697e:	4698      	mov	r8, r3
 8006980:	460f      	mov	r7, r1
 8006982:	4691      	mov	r9, r2
 8006984:	f7ff fff2 	bl	800696c <__retarget_lock_acquire_recursive>
 8006988:	4b19      	ldr	r3, [pc, #100]	; (80069f0 <__register_exitproc+0x80>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8006990:	b91c      	cbnz	r4, 800699a <__register_exitproc+0x2a>
 8006992:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8006996:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 800699a:	6865      	ldr	r5, [r4, #4]
 800699c:	f8da 0000 	ldr.w	r0, [sl]
 80069a0:	2d1f      	cmp	r5, #31
 80069a2:	dd05      	ble.n	80069b0 <__register_exitproc+0x40>
 80069a4:	f7ff ffe3 	bl	800696e <__retarget_lock_release_recursive>
 80069a8:	f04f 30ff 	mov.w	r0, #4294967295
 80069ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069b0:	b19e      	cbz	r6, 80069da <__register_exitproc+0x6a>
 80069b2:	2201      	movs	r2, #1
 80069b4:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 80069b8:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 80069bc:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 80069c0:	40aa      	lsls	r2, r5
 80069c2:	4313      	orrs	r3, r2
 80069c4:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 80069c8:	2e02      	cmp	r6, #2
 80069ca:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 80069ce:	bf02      	ittt	eq
 80069d0:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 80069d4:	4313      	orreq	r3, r2
 80069d6:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 80069da:	1c6b      	adds	r3, r5, #1
 80069dc:	3502      	adds	r5, #2
 80069de:	6063      	str	r3, [r4, #4]
 80069e0:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 80069e4:	f7ff ffc3 	bl	800696e <__retarget_lock_release_recursive>
 80069e8:	2000      	movs	r0, #0
 80069ea:	e7df      	b.n	80069ac <__register_exitproc+0x3c>
 80069ec:	20000868 	.word	0x20000868
 80069f0:	08007488 	.word	0x08007488

080069f4 <_init>:
 80069f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f6:	bf00      	nop
 80069f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069fa:	bc08      	pop	{r3}
 80069fc:	469e      	mov	lr, r3
 80069fe:	4770      	bx	lr

08006a00 <_fini>:
 8006a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a02:	bf00      	nop
 8006a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a06:	bc08      	pop	{r3}
 8006a08:	469e      	mov	lr, r3
 8006a0a:	4770      	bx	lr
