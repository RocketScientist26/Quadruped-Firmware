
Quadruped.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c5c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec4  08006d68  08006d68  00016d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c2c  08007c2c  00020ba4  2**0
                  CONTENTS
  4 .ARM          00000000  08007c2c  08007c2c  00020ba4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c2c  08007c2c  00020ba4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007c2c  08007c2c  00017c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c34  08007c34  00017c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000ba4  20000000  08007c38  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  20000ba8  080087dc  00020ba8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000f80  080087dc  00020f80  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020ba4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f59e  00000000  00000000  00020bcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003338  00000000  00000000  0003016b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  000334a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec8  00000000  00000000  000344e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f9f  00000000  00000000  000353b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e68  00000000  00000000  0004e34f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c8d4  00000000  00000000  000621b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eea8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044c8  00000000  00000000  000eeadc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000ba8 	.word	0x20000ba8
 8000128:	00000000 	.word	0x00000000
 800012c:	08006d50 	.word	0x08006d50

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000bac 	.word	0x20000bac
 8000148:	08006d50 	.word	0x08006d50

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2uiz>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	d20e      	bcs.n	8000716 <__aeabi_f2uiz+0x22>
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30b      	bcc.n	8000716 <__aeabi_f2uiz+0x22>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d409      	bmi.n	800071c <__aeabi_f2uiz+0x28>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	fa23 f002 	lsr.w	r0, r3, r2
 8000714:	4770      	bx	lr
 8000716:	f04f 0000 	mov.w	r0, #0
 800071a:	4770      	bx	lr
 800071c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000720:	d101      	bne.n	8000726 <__aeabi_f2uiz+0x32>
 8000722:	0242      	lsls	r2, r0, #9
 8000724:	d102      	bne.n	800072c <__aeabi_f2uiz+0x38>
 8000726:	f04f 30ff 	mov.w	r0, #4294967295
 800072a:	4770      	bx	lr
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <HAL_Init+0x28>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a07      	ldr	r2, [pc, #28]	; (800075c <HAL_Init+0x28>)
 800073e:	f043 0310 	orr.w	r3, r3, #16
 8000742:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000744:	2003      	movs	r0, #3
 8000746:	f000 f947 	bl	80009d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800074a:	200f      	movs	r0, #15
 800074c:	f000 f808 	bl	8000760 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000750:	f005 fc6c 	bl	800602c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000754:	2300      	movs	r3, #0
}
 8000756:	4618      	mov	r0, r3
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40022000 	.word	0x40022000

08000760 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <HAL_InitTick+0x54>)
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <HAL_InitTick+0x58>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	4619      	mov	r1, r3
 8000772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000776:	fbb3 f3f1 	udiv	r3, r3, r1
 800077a:	fbb2 f3f3 	udiv	r3, r2, r3
 800077e:	4618      	mov	r0, r3
 8000780:	f000 f95f 	bl	8000a42 <HAL_SYSTICK_Config>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800078a:	2301      	movs	r3, #1
 800078c:	e00e      	b.n	80007ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2b0f      	cmp	r3, #15
 8000792:	d80a      	bhi.n	80007aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000794:	2200      	movs	r2, #0
 8000796:	6879      	ldr	r1, [r7, #4]
 8000798:	f04f 30ff 	mov.w	r0, #4294967295
 800079c:	f000 f927 	bl	80009ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007a0:	4a06      	ldr	r2, [pc, #24]	; (80007bc <HAL_InitTick+0x5c>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007a6:	2300      	movs	r3, #0
 80007a8:	e000      	b.n	80007ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007aa:	2301      	movs	r3, #1
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000035c 	.word	0x2000035c
 80007b8:	20000004 	.word	0x20000004
 80007bc:	20000000 	.word	0x20000000

080007c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <HAL_IncTick+0x1c>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	461a      	mov	r2, r3
 80007ca:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <HAL_IncTick+0x20>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4413      	add	r3, r2
 80007d0:	4a03      	ldr	r2, [pc, #12]	; (80007e0 <HAL_IncTick+0x20>)
 80007d2:	6013      	str	r3, [r2, #0]
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr
 80007dc:	20000004 	.word	0x20000004
 80007e0:	20000bc4 	.word	0x20000bc4

080007e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  return uwTick;
 80007e8:	4b02      	ldr	r3, [pc, #8]	; (80007f4 <HAL_GetTick+0x10>)
 80007ea:	681b      	ldr	r3, [r3, #0]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr
 80007f4:	20000bc4 	.word	0x20000bc4

080007f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000800:	f7ff fff0 	bl	80007e4 <HAL_GetTick>
 8000804:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000810:	d005      	beq.n	800081e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <HAL_Delay+0x44>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	461a      	mov	r2, r3
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	4413      	add	r3, r2
 800081c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800081e:	bf00      	nop
 8000820:	f7ff ffe0 	bl	80007e4 <HAL_GetTick>
 8000824:	4602      	mov	r2, r0
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	429a      	cmp	r2, r3
 800082e:	d8f7      	bhi.n	8000820 <HAL_Delay+0x28>
  {
  }
}
 8000830:	bf00      	nop
 8000832:	bf00      	nop
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000004 	.word	0x20000004

08000840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	f003 0307 	and.w	r3, r3, #7
 800084e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <__NVIC_SetPriorityGrouping+0x44>)
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000856:	68ba      	ldr	r2, [r7, #8]
 8000858:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800085c:	4013      	ands	r3, r2
 800085e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000868:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800086c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000872:	4a04      	ldr	r2, [pc, #16]	; (8000884 <__NVIC_SetPriorityGrouping+0x44>)
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	60d3      	str	r3, [r2, #12]
}
 8000878:	bf00      	nop
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <__NVIC_GetPriorityGrouping+0x18>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	0a1b      	lsrs	r3, r3, #8
 8000892:	f003 0307 	and.w	r3, r3, #7
}
 8000896:	4618      	mov	r0, r3
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	db0b      	blt.n	80008ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	f003 021f 	and.w	r2, r3, #31
 80008bc:	4906      	ldr	r1, [pc, #24]	; (80008d8 <__NVIC_EnableIRQ+0x34>)
 80008be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c2:	095b      	lsrs	r3, r3, #5
 80008c4:	2001      	movs	r0, #1
 80008c6:	fa00 f202 	lsl.w	r2, r0, r2
 80008ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr
 80008d8:	e000e100 	.word	0xe000e100

080008dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	6039      	str	r1, [r7, #0]
 80008e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	db0a      	blt.n	8000906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	490c      	ldr	r1, [pc, #48]	; (8000928 <__NVIC_SetPriority+0x4c>)
 80008f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fa:	0112      	lsls	r2, r2, #4
 80008fc:	b2d2      	uxtb	r2, r2
 80008fe:	440b      	add	r3, r1
 8000900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000904:	e00a      	b.n	800091c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4908      	ldr	r1, [pc, #32]	; (800092c <__NVIC_SetPriority+0x50>)
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	f003 030f 	and.w	r3, r3, #15
 8000912:	3b04      	subs	r3, #4
 8000914:	0112      	lsls	r2, r2, #4
 8000916:	b2d2      	uxtb	r2, r2
 8000918:	440b      	add	r3, r1
 800091a:	761a      	strb	r2, [r3, #24]
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000e100 	.word	0xe000e100
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000930:	b480      	push	{r7}
 8000932:	b089      	sub	sp, #36	; 0x24
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	f003 0307 	and.w	r3, r3, #7
 8000942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	f1c3 0307 	rsb	r3, r3, #7
 800094a:	2b04      	cmp	r3, #4
 800094c:	bf28      	it	cs
 800094e:	2304      	movcs	r3, #4
 8000950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	3304      	adds	r3, #4
 8000956:	2b06      	cmp	r3, #6
 8000958:	d902      	bls.n	8000960 <NVIC_EncodePriority+0x30>
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	3b03      	subs	r3, #3
 800095e:	e000      	b.n	8000962 <NVIC_EncodePriority+0x32>
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000964:	f04f 32ff 	mov.w	r2, #4294967295
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	43da      	mvns	r2, r3
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	401a      	ands	r2, r3
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000978:	f04f 31ff 	mov.w	r1, #4294967295
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	fa01 f303 	lsl.w	r3, r1, r3
 8000982:	43d9      	mvns	r1, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000988:	4313      	orrs	r3, r2
         );
}
 800098a:	4618      	mov	r0, r3
 800098c:	3724      	adds	r7, #36	; 0x24
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3b01      	subs	r3, #1
 80009a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009a4:	d301      	bcc.n	80009aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009a6:	2301      	movs	r3, #1
 80009a8:	e00f      	b.n	80009ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009aa:	4a0a      	ldr	r2, [pc, #40]	; (80009d4 <SysTick_Config+0x40>)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009b2:	210f      	movs	r1, #15
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295
 80009b8:	f7ff ff90 	bl	80008dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <SysTick_Config+0x40>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009c2:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <SysTick_Config+0x40>)
 80009c4:	2207      	movs	r2, #7
 80009c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	e000e010 	.word	0xe000e010

080009d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f7ff ff2d 	bl	8000840 <__NVIC_SetPriorityGrouping>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b086      	sub	sp, #24
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	4603      	mov	r3, r0
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	607a      	str	r2, [r7, #4]
 80009fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a00:	f7ff ff42 	bl	8000888 <__NVIC_GetPriorityGrouping>
 8000a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	68b9      	ldr	r1, [r7, #8]
 8000a0a:	6978      	ldr	r0, [r7, #20]
 8000a0c:	f7ff ff90 	bl	8000930 <NVIC_EncodePriority>
 8000a10:	4602      	mov	r2, r0
 8000a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a16:	4611      	mov	r1, r2
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff5f 	bl	80008dc <__NVIC_SetPriority>
}
 8000a1e:	bf00      	nop
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ff35 	bl	80008a4 <__NVIC_EnableIRQ>
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b082      	sub	sp, #8
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff ffa2 	bl	8000994 <SysTick_Config>
 8000a50:	4603      	mov	r3, r0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d101      	bne.n	8000a6c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e00e      	b.n	8000a8a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	795b      	ldrb	r3, [r3, #5]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d105      	bne.n	8000a82 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f005 fb07 	bl	8006090 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2201      	movs	r2, #1
 8000a86:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d101      	bne.n	8000aaa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e043      	b.n	8000b32 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4b22      	ldr	r3, [pc, #136]	; (8000b3c <HAL_DMA_Init+0xa8>)
 8000ab2:	4413      	add	r3, r2
 8000ab4:	4a22      	ldr	r2, [pc, #136]	; (8000b40 <HAL_DMA_Init+0xac>)
 8000ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aba:	091b      	lsrs	r3, r3, #4
 8000abc:	009a      	lsls	r2, r3, #2
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a1f      	ldr	r2, [pc, #124]	; (8000b44 <HAL_DMA_Init+0xb0>)
 8000ac6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2202      	movs	r2, #2
 8000acc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000ade:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ae2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	68db      	ldr	r3, [r3, #12]
 8000af2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000af8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2201      	movs	r2, #1
 8000b24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	bffdfff8 	.word	0xbffdfff8
 8000b40:	cccccccd 	.word	0xcccccccd
 8000b44:	40020000 	.word	0x40020000

08000b48 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
 8000b54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b56:	2300      	movs	r3, #0
 8000b58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d101      	bne.n	8000b68 <HAL_DMA_Start_IT+0x20>
 8000b64:	2302      	movs	r3, #2
 8000b66:	e04a      	b.n	8000bfe <HAL_DMA_Start_IT+0xb6>
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d13a      	bne.n	8000bf0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	2202      	movs	r2, #2
 8000b7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	2200      	movs	r2, #0
 8000b86:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f022 0201 	bic.w	r2, r2, #1
 8000b96:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	f000 f9f3 	bl	8000f8a <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d008      	beq.n	8000bbe <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f042 020e 	orr.w	r2, r2, #14
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	e00f      	b.n	8000bde <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f022 0204 	bic.w	r2, r2, #4
 8000bcc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f042 020a 	orr.w	r2, r2, #10
 8000bdc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f042 0201 	orr.w	r2, r2, #1
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	e005      	b.n	8000bfc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c06:	b480      	push	{r7}
 8000c08:	b085      	sub	sp, #20
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d008      	beq.n	8000c2e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2204      	movs	r2, #4
 8000c20:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2200      	movs	r2, #0
 8000c26:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e020      	b.n	8000c70 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f022 020e 	bic.w	r2, r2, #14
 8000c3c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f022 0201 	bic.w	r2, r2, #1
 8000c4c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c56:	2101      	movs	r1, #1
 8000c58:	fa01 f202 	lsl.w	r2, r1, r2
 8000c5c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2201      	movs	r2, #1
 8000c62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr
	...

08000c7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c84:	2300      	movs	r3, #0
 8000c86:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d005      	beq.n	8000c9e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2204      	movs	r2, #4
 8000c96:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	73fb      	strb	r3, [r7, #15]
 8000c9c:	e051      	b.n	8000d42 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f022 020e 	bic.w	r2, r2, #14
 8000cac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f022 0201 	bic.w	r2, r2, #1
 8000cbc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a22      	ldr	r2, [pc, #136]	; (8000d4c <HAL_DMA_Abort_IT+0xd0>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d029      	beq.n	8000d1c <HAL_DMA_Abort_IT+0xa0>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a20      	ldr	r2, [pc, #128]	; (8000d50 <HAL_DMA_Abort_IT+0xd4>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d022      	beq.n	8000d18 <HAL_DMA_Abort_IT+0x9c>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a1f      	ldr	r2, [pc, #124]	; (8000d54 <HAL_DMA_Abort_IT+0xd8>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d01a      	beq.n	8000d12 <HAL_DMA_Abort_IT+0x96>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a1d      	ldr	r2, [pc, #116]	; (8000d58 <HAL_DMA_Abort_IT+0xdc>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d012      	beq.n	8000d0c <HAL_DMA_Abort_IT+0x90>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a1c      	ldr	r2, [pc, #112]	; (8000d5c <HAL_DMA_Abort_IT+0xe0>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d00a      	beq.n	8000d06 <HAL_DMA_Abort_IT+0x8a>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a1a      	ldr	r2, [pc, #104]	; (8000d60 <HAL_DMA_Abort_IT+0xe4>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d102      	bne.n	8000d00 <HAL_DMA_Abort_IT+0x84>
 8000cfa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000cfe:	e00e      	b.n	8000d1e <HAL_DMA_Abort_IT+0xa2>
 8000d00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d04:	e00b      	b.n	8000d1e <HAL_DMA_Abort_IT+0xa2>
 8000d06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d0a:	e008      	b.n	8000d1e <HAL_DMA_Abort_IT+0xa2>
 8000d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d10:	e005      	b.n	8000d1e <HAL_DMA_Abort_IT+0xa2>
 8000d12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d16:	e002      	b.n	8000d1e <HAL_DMA_Abort_IT+0xa2>
 8000d18:	2310      	movs	r3, #16
 8000d1a:	e000      	b.n	8000d1e <HAL_DMA_Abort_IT+0xa2>
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	4a11      	ldr	r2, [pc, #68]	; (8000d64 <HAL_DMA_Abort_IT+0xe8>)
 8000d20:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2201      	movs	r2, #1
 8000d26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d003      	beq.n	8000d42 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	4798      	blx	r3
    } 
  }
  return status;
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40020008 	.word	0x40020008
 8000d50:	4002001c 	.word	0x4002001c
 8000d54:	40020030 	.word	0x40020030
 8000d58:	40020044 	.word	0x40020044
 8000d5c:	40020058 	.word	0x40020058
 8000d60:	4002006c 	.word	0x4002006c
 8000d64:	40020000 	.word	0x40020000

08000d68 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d84:	2204      	movs	r2, #4
 8000d86:	409a      	lsls	r2, r3
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d04f      	beq.n	8000e30 <HAL_DMA_IRQHandler+0xc8>
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d04a      	beq.n	8000e30 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f003 0320 	and.w	r3, r3, #32
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d107      	bne.n	8000db8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f022 0204 	bic.w	r2, r2, #4
 8000db6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a66      	ldr	r2, [pc, #408]	; (8000f58 <HAL_DMA_IRQHandler+0x1f0>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d029      	beq.n	8000e16 <HAL_DMA_IRQHandler+0xae>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a65      	ldr	r2, [pc, #404]	; (8000f5c <HAL_DMA_IRQHandler+0x1f4>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d022      	beq.n	8000e12 <HAL_DMA_IRQHandler+0xaa>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a63      	ldr	r2, [pc, #396]	; (8000f60 <HAL_DMA_IRQHandler+0x1f8>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d01a      	beq.n	8000e0c <HAL_DMA_IRQHandler+0xa4>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a62      	ldr	r2, [pc, #392]	; (8000f64 <HAL_DMA_IRQHandler+0x1fc>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d012      	beq.n	8000e06 <HAL_DMA_IRQHandler+0x9e>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a60      	ldr	r2, [pc, #384]	; (8000f68 <HAL_DMA_IRQHandler+0x200>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d00a      	beq.n	8000e00 <HAL_DMA_IRQHandler+0x98>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a5f      	ldr	r2, [pc, #380]	; (8000f6c <HAL_DMA_IRQHandler+0x204>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d102      	bne.n	8000dfa <HAL_DMA_IRQHandler+0x92>
 8000df4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000df8:	e00e      	b.n	8000e18 <HAL_DMA_IRQHandler+0xb0>
 8000dfa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000dfe:	e00b      	b.n	8000e18 <HAL_DMA_IRQHandler+0xb0>
 8000e00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e04:	e008      	b.n	8000e18 <HAL_DMA_IRQHandler+0xb0>
 8000e06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e0a:	e005      	b.n	8000e18 <HAL_DMA_IRQHandler+0xb0>
 8000e0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e10:	e002      	b.n	8000e18 <HAL_DMA_IRQHandler+0xb0>
 8000e12:	2340      	movs	r3, #64	; 0x40
 8000e14:	e000      	b.n	8000e18 <HAL_DMA_IRQHandler+0xb0>
 8000e16:	2304      	movs	r3, #4
 8000e18:	4a55      	ldr	r2, [pc, #340]	; (8000f70 <HAL_DMA_IRQHandler+0x208>)
 8000e1a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f000 8094 	beq.w	8000f4e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000e2e:	e08e      	b.n	8000f4e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e34:	2202      	movs	r2, #2
 8000e36:	409a      	lsls	r2, r3
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d056      	beq.n	8000eee <HAL_DMA_IRQHandler+0x186>
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d051      	beq.n	8000eee <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f003 0320 	and.w	r3, r3, #32
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d10b      	bne.n	8000e70 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f022 020a 	bic.w	r2, r2, #10
 8000e66:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a38      	ldr	r2, [pc, #224]	; (8000f58 <HAL_DMA_IRQHandler+0x1f0>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d029      	beq.n	8000ece <HAL_DMA_IRQHandler+0x166>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a37      	ldr	r2, [pc, #220]	; (8000f5c <HAL_DMA_IRQHandler+0x1f4>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d022      	beq.n	8000eca <HAL_DMA_IRQHandler+0x162>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a35      	ldr	r2, [pc, #212]	; (8000f60 <HAL_DMA_IRQHandler+0x1f8>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d01a      	beq.n	8000ec4 <HAL_DMA_IRQHandler+0x15c>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a34      	ldr	r2, [pc, #208]	; (8000f64 <HAL_DMA_IRQHandler+0x1fc>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d012      	beq.n	8000ebe <HAL_DMA_IRQHandler+0x156>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a32      	ldr	r2, [pc, #200]	; (8000f68 <HAL_DMA_IRQHandler+0x200>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d00a      	beq.n	8000eb8 <HAL_DMA_IRQHandler+0x150>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a31      	ldr	r2, [pc, #196]	; (8000f6c <HAL_DMA_IRQHandler+0x204>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d102      	bne.n	8000eb2 <HAL_DMA_IRQHandler+0x14a>
 8000eac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000eb0:	e00e      	b.n	8000ed0 <HAL_DMA_IRQHandler+0x168>
 8000eb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000eb6:	e00b      	b.n	8000ed0 <HAL_DMA_IRQHandler+0x168>
 8000eb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ebc:	e008      	b.n	8000ed0 <HAL_DMA_IRQHandler+0x168>
 8000ebe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ec2:	e005      	b.n	8000ed0 <HAL_DMA_IRQHandler+0x168>
 8000ec4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ec8:	e002      	b.n	8000ed0 <HAL_DMA_IRQHandler+0x168>
 8000eca:	2320      	movs	r3, #32
 8000ecc:	e000      	b.n	8000ed0 <HAL_DMA_IRQHandler+0x168>
 8000ece:	2302      	movs	r3, #2
 8000ed0:	4a27      	ldr	r2, [pc, #156]	; (8000f70 <HAL_DMA_IRQHandler+0x208>)
 8000ed2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d034      	beq.n	8000f4e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000eec:	e02f      	b.n	8000f4e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	2208      	movs	r2, #8
 8000ef4:	409a      	lsls	r2, r3
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d028      	beq.n	8000f50 <HAL_DMA_IRQHandler+0x1e8>
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	f003 0308 	and.w	r3, r3, #8
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d023      	beq.n	8000f50 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f022 020e 	bic.w	r2, r2, #14
 8000f16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f20:	2101      	movs	r1, #1
 8000f22:	fa01 f202 	lsl.w	r2, r1, r2
 8000f26:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2201      	movs	r2, #1
 8000f32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d004      	beq.n	8000f50 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	4798      	blx	r3
    }
  }
  return;
 8000f4e:	bf00      	nop
 8000f50:	bf00      	nop
}
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40020008 	.word	0x40020008
 8000f5c:	4002001c 	.word	0x4002001c
 8000f60:	40020030 	.word	0x40020030
 8000f64:	40020044 	.word	0x40020044
 8000f68:	40020058 	.word	0x40020058
 8000f6c:	4002006c 	.word	0x4002006c
 8000f70:	40020000 	.word	0x40020000

08000f74 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr

08000f8a <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b085      	sub	sp, #20
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	60f8      	str	r0, [r7, #12]
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	683a      	ldr	r2, [r7, #0]
 8000fae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b10      	cmp	r3, #16
 8000fb6:	d108      	bne.n	8000fca <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	68ba      	ldr	r2, [r7, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000fc8:	e007      	b.n	8000fda <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	60da      	str	r2, [r3, #12]
}
 8000fda:	bf00      	nop
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr

08000fe4 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000ffe:	4b2f      	ldr	r3, [pc, #188]	; (80010bc <HAL_FLASH_Program+0xd8>)
 8001000:	7e1b      	ldrb	r3, [r3, #24]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d101      	bne.n	800100a <HAL_FLASH_Program+0x26>
 8001006:	2302      	movs	r3, #2
 8001008:	e054      	b.n	80010b4 <HAL_FLASH_Program+0xd0>
 800100a:	4b2c      	ldr	r3, [pc, #176]	; (80010bc <HAL_FLASH_Program+0xd8>)
 800100c:	2201      	movs	r2, #1
 800100e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001010:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001014:	f000 f8a8 	bl	8001168 <FLASH_WaitForLastOperation>
 8001018:	4603      	mov	r3, r0
 800101a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800101c:	7dfb      	ldrb	r3, [r7, #23]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d144      	bne.n	80010ac <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d102      	bne.n	800102e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001028:	2301      	movs	r3, #1
 800102a:	757b      	strb	r3, [r7, #21]
 800102c:	e007      	b.n	800103e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2b02      	cmp	r3, #2
 8001032:	d102      	bne.n	800103a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001034:	2302      	movs	r3, #2
 8001036:	757b      	strb	r3, [r7, #21]
 8001038:	e001      	b.n	800103e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800103a:	2304      	movs	r3, #4
 800103c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800103e:	2300      	movs	r3, #0
 8001040:	75bb      	strb	r3, [r7, #22]
 8001042:	e02d      	b.n	80010a0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001044:	7dbb      	ldrb	r3, [r7, #22]
 8001046:	005a      	lsls	r2, r3, #1
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	eb02 0c03 	add.w	ip, r2, r3
 800104e:	7dbb      	ldrb	r3, [r7, #22]
 8001050:	0119      	lsls	r1, r3, #4
 8001052:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001056:	f1c1 0620 	rsb	r6, r1, #32
 800105a:	f1a1 0020 	sub.w	r0, r1, #32
 800105e:	fa22 f401 	lsr.w	r4, r2, r1
 8001062:	fa03 f606 	lsl.w	r6, r3, r6
 8001066:	4334      	orrs	r4, r6
 8001068:	fa23 f000 	lsr.w	r0, r3, r0
 800106c:	4304      	orrs	r4, r0
 800106e:	fa23 f501 	lsr.w	r5, r3, r1
 8001072:	b2a3      	uxth	r3, r4
 8001074:	4619      	mov	r1, r3
 8001076:	4660      	mov	r0, ip
 8001078:	f000 f85a 	bl	8001130 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800107c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001080:	f000 f872 	bl	8001168 <FLASH_WaitForLastOperation>
 8001084:	4603      	mov	r3, r0
 8001086:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <HAL_FLASH_Program+0xdc>)
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	4a0c      	ldr	r2, [pc, #48]	; (80010c0 <HAL_FLASH_Program+0xdc>)
 800108e:	f023 0301 	bic.w	r3, r3, #1
 8001092:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001094:	7dfb      	ldrb	r3, [r7, #23]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d107      	bne.n	80010aa <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800109a:	7dbb      	ldrb	r3, [r7, #22]
 800109c:	3301      	adds	r3, #1
 800109e:	75bb      	strb	r3, [r7, #22]
 80010a0:	7dba      	ldrb	r2, [r7, #22]
 80010a2:	7d7b      	ldrb	r3, [r7, #21]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d3cd      	bcc.n	8001044 <HAL_FLASH_Program+0x60>
 80010a8:	e000      	b.n	80010ac <HAL_FLASH_Program+0xc8>
      {
        break;
 80010aa:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <HAL_FLASH_Program+0xd8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	761a      	strb	r2, [r3, #24]

  return status;
 80010b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	371c      	adds	r7, #28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010bc:	20000bc8 	.word	0x20000bc8
 80010c0:	40022000 	.word	0x40022000

080010c4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <HAL_FLASH_Unlock+0x40>)
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d00d      	beq.n	80010f6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80010da:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <HAL_FLASH_Unlock+0x40>)
 80010dc:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <HAL_FLASH_Unlock+0x44>)
 80010de:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <HAL_FLASH_Unlock+0x40>)
 80010e2:	4a0a      	ldr	r2, [pc, #40]	; (800110c <HAL_FLASH_Unlock+0x48>)
 80010e4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80010e6:	4b07      	ldr	r3, [pc, #28]	; (8001104 <HAL_FLASH_Unlock+0x40>)
 80010e8:	691b      	ldr	r3, [r3, #16]
 80010ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80010f6:	79fb      	ldrb	r3, [r7, #7]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40022000 	.word	0x40022000
 8001108:	45670123 	.word	0x45670123
 800110c:	cdef89ab 	.word	0xcdef89ab

08001110 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <HAL_FLASH_Lock+0x1c>)
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <HAL_FLASH_Lock+0x1c>)
 800111a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800111e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40022000 	.word	0x40022000

08001130 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <FLASH_Program_HalfWord+0x30>)
 800113e:	2200      	movs	r2, #0
 8001140:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001142:	4b08      	ldr	r3, [pc, #32]	; (8001164 <FLASH_Program_HalfWord+0x34>)
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	4a07      	ldr	r2, [pc, #28]	; (8001164 <FLASH_Program_HalfWord+0x34>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	887a      	ldrh	r2, [r7, #2]
 8001152:	801a      	strh	r2, [r3, #0]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000bc8 	.word	0x20000bc8
 8001164:	40022000 	.word	0x40022000

08001168 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001170:	f7ff fb38 	bl	80007e4 <HAL_GetTick>
 8001174:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001176:	e010      	b.n	800119a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800117e:	d00c      	beq.n	800119a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d007      	beq.n	8001196 <FLASH_WaitForLastOperation+0x2e>
 8001186:	f7ff fb2d 	bl	80007e4 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	429a      	cmp	r2, r3
 8001194:	d201      	bcs.n	800119a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e025      	b.n	80011e6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <FLASH_WaitForLastOperation+0x88>)
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1e8      	bne.n	8001178 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80011a6:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <FLASH_WaitForLastOperation+0x88>)
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	f003 0320 	and.w	r3, r3, #32
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d002      	beq.n	80011b8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <FLASH_WaitForLastOperation+0x88>)
 80011b4:	2220      	movs	r2, #32
 80011b6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80011b8:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <FLASH_WaitForLastOperation+0x88>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	f003 0310 	and.w	r3, r3, #16
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d10b      	bne.n	80011dc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80011c4:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <FLASH_WaitForLastOperation+0x88>)
 80011c6:	69db      	ldr	r3, [r3, #28]
 80011c8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d105      	bne.n	80011dc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80011d0:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <FLASH_WaitForLastOperation+0x88>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80011dc:	f000 f80a 	bl	80011f4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e000      	b.n	80011e6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40022000 	.word	0x40022000

080011f4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80011fe:	4b23      	ldr	r3, [pc, #140]	; (800128c <FLASH_SetErrorCode+0x98>)
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	f003 0310 	and.w	r3, r3, #16
 8001206:	2b00      	cmp	r3, #0
 8001208:	d009      	beq.n	800121e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800120a:	4b21      	ldr	r3, [pc, #132]	; (8001290 <FLASH_SetErrorCode+0x9c>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	f043 0302 	orr.w	r3, r3, #2
 8001212:	4a1f      	ldr	r2, [pc, #124]	; (8001290 <FLASH_SetErrorCode+0x9c>)
 8001214:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f043 0310 	orr.w	r3, r3, #16
 800121c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800121e:	4b1b      	ldr	r3, [pc, #108]	; (800128c <FLASH_SetErrorCode+0x98>)
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	2b00      	cmp	r3, #0
 8001228:	d009      	beq.n	800123e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <FLASH_SetErrorCode+0x9c>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	4a17      	ldr	r2, [pc, #92]	; (8001290 <FLASH_SetErrorCode+0x9c>)
 8001234:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800123e:	4b13      	ldr	r3, [pc, #76]	; (800128c <FLASH_SetErrorCode+0x98>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00b      	beq.n	8001262 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <FLASH_SetErrorCode+0x9c>)
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	f043 0304 	orr.w	r3, r3, #4
 8001252:	4a0f      	ldr	r2, [pc, #60]	; (8001290 <FLASH_SetErrorCode+0x9c>)
 8001254:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001256:	4b0d      	ldr	r3, [pc, #52]	; (800128c <FLASH_SetErrorCode+0x98>)
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	4a0c      	ldr	r2, [pc, #48]	; (800128c <FLASH_SetErrorCode+0x98>)
 800125c:	f023 0301 	bic.w	r3, r3, #1
 8001260:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f240 1201 	movw	r2, #257	; 0x101
 8001268:	4293      	cmp	r3, r2
 800126a:	d106      	bne.n	800127a <FLASH_SetErrorCode+0x86>
 800126c:	4b07      	ldr	r3, [pc, #28]	; (800128c <FLASH_SetErrorCode+0x98>)
 800126e:	69db      	ldr	r3, [r3, #28]
 8001270:	4a06      	ldr	r2, [pc, #24]	; (800128c <FLASH_SetErrorCode+0x98>)
 8001272:	f023 0301 	bic.w	r3, r3, #1
 8001276:	61d3      	str	r3, [r2, #28]
}  
 8001278:	e002      	b.n	8001280 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800127a:	4a04      	ldr	r2, [pc, #16]	; (800128c <FLASH_SetErrorCode+0x98>)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	60d3      	str	r3, [r2, #12]
}  
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40022000 	.word	0x40022000
 8001290:	20000bc8 	.word	0x20000bc8

08001294 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80012a6:	4b2f      	ldr	r3, [pc, #188]	; (8001364 <HAL_FLASHEx_Erase+0xd0>)
 80012a8:	7e1b      	ldrb	r3, [r3, #24]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d101      	bne.n	80012b2 <HAL_FLASHEx_Erase+0x1e>
 80012ae:	2302      	movs	r3, #2
 80012b0:	e053      	b.n	800135a <HAL_FLASHEx_Erase+0xc6>
 80012b2:	4b2c      	ldr	r3, [pc, #176]	; (8001364 <HAL_FLASHEx_Erase+0xd0>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d116      	bne.n	80012ee <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80012c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012c4:	f7ff ff50 	bl	8001168 <FLASH_WaitForLastOperation>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d141      	bne.n	8001352 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80012ce:	2001      	movs	r0, #1
 80012d0:	f000 f84c 	bl	800136c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012d8:	f7ff ff46 	bl	8001168 <FLASH_WaitForLastOperation>
 80012dc:	4603      	mov	r3, r0
 80012de:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80012e0:	4b21      	ldr	r3, [pc, #132]	; (8001368 <HAL_FLASHEx_Erase+0xd4>)
 80012e2:	691b      	ldr	r3, [r3, #16]
 80012e4:	4a20      	ldr	r2, [pc, #128]	; (8001368 <HAL_FLASHEx_Erase+0xd4>)
 80012e6:	f023 0304 	bic.w	r3, r3, #4
 80012ea:	6113      	str	r3, [r2, #16]
 80012ec:	e031      	b.n	8001352 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80012ee:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012f2:	f7ff ff39 	bl	8001168 <FLASH_WaitForLastOperation>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d12a      	bne.n	8001352 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001302:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	e019      	b.n	8001340 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800130c:	68b8      	ldr	r0, [r7, #8]
 800130e:	f000 f849 	bl	80013a4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001312:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001316:	f7ff ff27 	bl	8001168 <FLASH_WaitForLastOperation>
 800131a:	4603      	mov	r3, r0
 800131c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_FLASHEx_Erase+0xd4>)
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	4a11      	ldr	r2, [pc, #68]	; (8001368 <HAL_FLASHEx_Erase+0xd4>)
 8001324:	f023 0302 	bic.w	r3, r3, #2
 8001328:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	601a      	str	r2, [r3, #0]
            break;
 8001336:	e00c      	b.n	8001352 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800133e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	029a      	lsls	r2, r3, #10
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800134c:	68ba      	ldr	r2, [r7, #8]
 800134e:	429a      	cmp	r2, r3
 8001350:	d3dc      	bcc.n	800130c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001352:	4b04      	ldr	r3, [pc, #16]	; (8001364 <HAL_FLASHEx_Erase+0xd0>)
 8001354:	2200      	movs	r2, #0
 8001356:	761a      	strb	r2, [r3, #24]

  return status;
 8001358:	7bfb      	ldrb	r3, [r7, #15]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000bc8 	.word	0x20000bc8
 8001368:	40022000 	.word	0x40022000

0800136c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <FLASH_MassErase+0x30>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <FLASH_MassErase+0x34>)
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	4a08      	ldr	r2, [pc, #32]	; (80013a0 <FLASH_MassErase+0x34>)
 8001380:	f043 0304 	orr.w	r3, r3, #4
 8001384:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <FLASH_MassErase+0x34>)
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <FLASH_MassErase+0x34>)
 800138c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001390:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	20000bc8 	.word	0x20000bc8
 80013a0:	40022000 	.word	0x40022000

080013a4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <FLASH_PageErase+0x38>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <FLASH_PageErase+0x3c>)
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <FLASH_PageErase+0x3c>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80013be:	4a08      	ldr	r2, [pc, #32]	; (80013e0 <FLASH_PageErase+0x3c>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <FLASH_PageErase+0x3c>)
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	4a05      	ldr	r2, [pc, #20]	; (80013e0 <FLASH_PageErase+0x3c>)
 80013ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ce:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000bc8 	.word	0x20000bc8
 80013e0:	40022000 	.word	0x40022000

080013e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b08b      	sub	sp, #44	; 0x2c
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013f2:	2300      	movs	r3, #0
 80013f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f6:	e169      	b.n	80016cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013f8:	2201      	movs	r2, #1
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	69fa      	ldr	r2, [r7, #28]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	429a      	cmp	r2, r3
 8001412:	f040 8158 	bne.w	80016c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	4a9a      	ldr	r2, [pc, #616]	; (8001684 <HAL_GPIO_Init+0x2a0>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d05e      	beq.n	80014de <HAL_GPIO_Init+0xfa>
 8001420:	4a98      	ldr	r2, [pc, #608]	; (8001684 <HAL_GPIO_Init+0x2a0>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d875      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 8001426:	4a98      	ldr	r2, [pc, #608]	; (8001688 <HAL_GPIO_Init+0x2a4>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d058      	beq.n	80014de <HAL_GPIO_Init+0xfa>
 800142c:	4a96      	ldr	r2, [pc, #600]	; (8001688 <HAL_GPIO_Init+0x2a4>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d86f      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 8001432:	4a96      	ldr	r2, [pc, #600]	; (800168c <HAL_GPIO_Init+0x2a8>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d052      	beq.n	80014de <HAL_GPIO_Init+0xfa>
 8001438:	4a94      	ldr	r2, [pc, #592]	; (800168c <HAL_GPIO_Init+0x2a8>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d869      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 800143e:	4a94      	ldr	r2, [pc, #592]	; (8001690 <HAL_GPIO_Init+0x2ac>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d04c      	beq.n	80014de <HAL_GPIO_Init+0xfa>
 8001444:	4a92      	ldr	r2, [pc, #584]	; (8001690 <HAL_GPIO_Init+0x2ac>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d863      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 800144a:	4a92      	ldr	r2, [pc, #584]	; (8001694 <HAL_GPIO_Init+0x2b0>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d046      	beq.n	80014de <HAL_GPIO_Init+0xfa>
 8001450:	4a90      	ldr	r2, [pc, #576]	; (8001694 <HAL_GPIO_Init+0x2b0>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d85d      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 8001456:	2b12      	cmp	r3, #18
 8001458:	d82a      	bhi.n	80014b0 <HAL_GPIO_Init+0xcc>
 800145a:	2b12      	cmp	r3, #18
 800145c:	d859      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 800145e:	a201      	add	r2, pc, #4	; (adr r2, 8001464 <HAL_GPIO_Init+0x80>)
 8001460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001464:	080014df 	.word	0x080014df
 8001468:	080014b9 	.word	0x080014b9
 800146c:	080014cb 	.word	0x080014cb
 8001470:	0800150d 	.word	0x0800150d
 8001474:	08001513 	.word	0x08001513
 8001478:	08001513 	.word	0x08001513
 800147c:	08001513 	.word	0x08001513
 8001480:	08001513 	.word	0x08001513
 8001484:	08001513 	.word	0x08001513
 8001488:	08001513 	.word	0x08001513
 800148c:	08001513 	.word	0x08001513
 8001490:	08001513 	.word	0x08001513
 8001494:	08001513 	.word	0x08001513
 8001498:	08001513 	.word	0x08001513
 800149c:	08001513 	.word	0x08001513
 80014a0:	08001513 	.word	0x08001513
 80014a4:	08001513 	.word	0x08001513
 80014a8:	080014c1 	.word	0x080014c1
 80014ac:	080014d5 	.word	0x080014d5
 80014b0:	4a79      	ldr	r2, [pc, #484]	; (8001698 <HAL_GPIO_Init+0x2b4>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d013      	beq.n	80014de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014b6:	e02c      	b.n	8001512 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	623b      	str	r3, [r7, #32]
          break;
 80014be:	e029      	b.n	8001514 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	3304      	adds	r3, #4
 80014c6:	623b      	str	r3, [r7, #32]
          break;
 80014c8:	e024      	b.n	8001514 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	3308      	adds	r3, #8
 80014d0:	623b      	str	r3, [r7, #32]
          break;
 80014d2:	e01f      	b.n	8001514 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	330c      	adds	r3, #12
 80014da:	623b      	str	r3, [r7, #32]
          break;
 80014dc:	e01a      	b.n	8001514 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d102      	bne.n	80014ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014e6:	2304      	movs	r3, #4
 80014e8:	623b      	str	r3, [r7, #32]
          break;
 80014ea:	e013      	b.n	8001514 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d105      	bne.n	8001500 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014f4:	2308      	movs	r3, #8
 80014f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69fa      	ldr	r2, [r7, #28]
 80014fc:	611a      	str	r2, [r3, #16]
          break;
 80014fe:	e009      	b.n	8001514 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001500:	2308      	movs	r3, #8
 8001502:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69fa      	ldr	r2, [r7, #28]
 8001508:	615a      	str	r2, [r3, #20]
          break;
 800150a:	e003      	b.n	8001514 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
          break;
 8001510:	e000      	b.n	8001514 <HAL_GPIO_Init+0x130>
          break;
 8001512:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	2bff      	cmp	r3, #255	; 0xff
 8001518:	d801      	bhi.n	800151e <HAL_GPIO_Init+0x13a>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	e001      	b.n	8001522 <HAL_GPIO_Init+0x13e>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3304      	adds	r3, #4
 8001522:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	2bff      	cmp	r3, #255	; 0xff
 8001528:	d802      	bhi.n	8001530 <HAL_GPIO_Init+0x14c>
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	e002      	b.n	8001536 <HAL_GPIO_Init+0x152>
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	3b08      	subs	r3, #8
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	210f      	movs	r1, #15
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	fa01 f303 	lsl.w	r3, r1, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	401a      	ands	r2, r3
 8001548:	6a39      	ldr	r1, [r7, #32]
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	fa01 f303 	lsl.w	r3, r1, r3
 8001550:	431a      	orrs	r2, r3
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 80b1 	beq.w	80016c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001564:	4b4d      	ldr	r3, [pc, #308]	; (800169c <HAL_GPIO_Init+0x2b8>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	4a4c      	ldr	r2, [pc, #304]	; (800169c <HAL_GPIO_Init+0x2b8>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6193      	str	r3, [r2, #24]
 8001570:	4b4a      	ldr	r3, [pc, #296]	; (800169c <HAL_GPIO_Init+0x2b8>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800157c:	4a48      	ldr	r2, [pc, #288]	; (80016a0 <HAL_GPIO_Init+0x2bc>)
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	3302      	adds	r3, #2
 8001584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001588:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	220f      	movs	r2, #15
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	4013      	ands	r3, r2
 800159e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a40      	ldr	r2, [pc, #256]	; (80016a4 <HAL_GPIO_Init+0x2c0>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d013      	beq.n	80015d0 <HAL_GPIO_Init+0x1ec>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a3f      	ldr	r2, [pc, #252]	; (80016a8 <HAL_GPIO_Init+0x2c4>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d00d      	beq.n	80015cc <HAL_GPIO_Init+0x1e8>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a3e      	ldr	r2, [pc, #248]	; (80016ac <HAL_GPIO_Init+0x2c8>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d007      	beq.n	80015c8 <HAL_GPIO_Init+0x1e4>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a3d      	ldr	r2, [pc, #244]	; (80016b0 <HAL_GPIO_Init+0x2cc>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d101      	bne.n	80015c4 <HAL_GPIO_Init+0x1e0>
 80015c0:	2303      	movs	r3, #3
 80015c2:	e006      	b.n	80015d2 <HAL_GPIO_Init+0x1ee>
 80015c4:	2304      	movs	r3, #4
 80015c6:	e004      	b.n	80015d2 <HAL_GPIO_Init+0x1ee>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e002      	b.n	80015d2 <HAL_GPIO_Init+0x1ee>
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <HAL_GPIO_Init+0x1ee>
 80015d0:	2300      	movs	r3, #0
 80015d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d4:	f002 0203 	and.w	r2, r2, #3
 80015d8:	0092      	lsls	r2, r2, #2
 80015da:	4093      	lsls	r3, r2
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	4313      	orrs	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015e2:	492f      	ldr	r1, [pc, #188]	; (80016a0 <HAL_GPIO_Init+0x2bc>)
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	089b      	lsrs	r3, r3, #2
 80015e8:	3302      	adds	r3, #2
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d006      	beq.n	800160a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015fc:	4b2d      	ldr	r3, [pc, #180]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	492c      	ldr	r1, [pc, #176]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	4313      	orrs	r3, r2
 8001606:	600b      	str	r3, [r1, #0]
 8001608:	e006      	b.n	8001618 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800160a:	4b2a      	ldr	r3, [pc, #168]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	43db      	mvns	r3, r3
 8001612:	4928      	ldr	r1, [pc, #160]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001614:	4013      	ands	r3, r2
 8001616:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d006      	beq.n	8001632 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001624:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	4922      	ldr	r1, [pc, #136]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	4313      	orrs	r3, r2
 800162e:	604b      	str	r3, [r1, #4]
 8001630:	e006      	b.n	8001640 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001632:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	43db      	mvns	r3, r3
 800163a:	491e      	ldr	r1, [pc, #120]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 800163c:	4013      	ands	r3, r2
 800163e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d006      	beq.n	800165a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800164c:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	4918      	ldr	r1, [pc, #96]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	4313      	orrs	r3, r2
 8001656:	608b      	str	r3, [r1, #8]
 8001658:	e006      	b.n	8001668 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800165a:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	43db      	mvns	r3, r3
 8001662:	4914      	ldr	r1, [pc, #80]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001664:	4013      	ands	r3, r2
 8001666:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d021      	beq.n	80016b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001676:	68da      	ldr	r2, [r3, #12]
 8001678:	490e      	ldr	r1, [pc, #56]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	4313      	orrs	r3, r2
 800167e:	60cb      	str	r3, [r1, #12]
 8001680:	e021      	b.n	80016c6 <HAL_GPIO_Init+0x2e2>
 8001682:	bf00      	nop
 8001684:	10320000 	.word	0x10320000
 8001688:	10310000 	.word	0x10310000
 800168c:	10220000 	.word	0x10220000
 8001690:	10210000 	.word	0x10210000
 8001694:	10120000 	.word	0x10120000
 8001698:	10110000 	.word	0x10110000
 800169c:	40021000 	.word	0x40021000
 80016a0:	40010000 	.word	0x40010000
 80016a4:	40010800 	.word	0x40010800
 80016a8:	40010c00 	.word	0x40010c00
 80016ac:	40011000 	.word	0x40011000
 80016b0:	40011400 	.word	0x40011400
 80016b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <HAL_GPIO_Init+0x304>)
 80016ba:	68da      	ldr	r2, [r3, #12]
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	43db      	mvns	r3, r3
 80016c0:	4909      	ldr	r1, [pc, #36]	; (80016e8 <HAL_GPIO_Init+0x304>)
 80016c2:	4013      	ands	r3, r2
 80016c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	3301      	adds	r3, #1
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	fa22 f303 	lsr.w	r3, r2, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f47f ae8e 	bne.w	80013f8 <HAL_GPIO_Init+0x14>
  }
}
 80016dc:	bf00      	nop
 80016de:	bf00      	nop
 80016e0:	372c      	adds	r7, #44	; 0x2c
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	40010400 	.word	0x40010400

080016ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	887b      	ldrh	r3, [r7, #2]
 80016fe:	4013      	ands	r3, r2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d002      	beq.n	800170a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001704:	2301      	movs	r3, #1
 8001706:	73fb      	strb	r3, [r7, #15]
 8001708:	e001      	b.n	800170e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800170e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr

0800171a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	460b      	mov	r3, r1
 8001724:	807b      	strh	r3, [r7, #2]
 8001726:	4613      	mov	r3, r2
 8001728:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800172a:	787b      	ldrb	r3, [r7, #1]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001730:	887a      	ldrh	r2, [r7, #2]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001736:	e003      	b.n	8001740 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001738:	887b      	ldrh	r3, [r7, #2]
 800173a:	041a      	lsls	r2, r3, #16
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	611a      	str	r2, [r3, #16]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
	...

0800174c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001756:	4b08      	ldr	r3, [pc, #32]	; (8001778 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001758:	695a      	ldr	r2, [r3, #20]
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	4013      	ands	r3, r2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d006      	beq.n	8001770 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001762:	4a05      	ldr	r2, [pc, #20]	; (8001778 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001764:	88fb      	ldrh	r3, [r7, #6]
 8001766:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001768:	88fb      	ldrh	r3, [r7, #6]
 800176a:	4618      	mov	r0, r3
 800176c:	f002 fc28 	bl	8003fc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40010400 	.word	0x40010400

0800177c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e272      	b.n	8001c74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 8087 	beq.w	80018aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800179c:	4b92      	ldr	r3, [pc, #584]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 030c 	and.w	r3, r3, #12
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	d00c      	beq.n	80017c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017a8:	4b8f      	ldr	r3, [pc, #572]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 030c 	and.w	r3, r3, #12
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	d112      	bne.n	80017da <HAL_RCC_OscConfig+0x5e>
 80017b4:	4b8c      	ldr	r3, [pc, #560]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c0:	d10b      	bne.n	80017da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c2:	4b89      	ldr	r3, [pc, #548]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d06c      	beq.n	80018a8 <HAL_RCC_OscConfig+0x12c>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d168      	bne.n	80018a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e24c      	b.n	8001c74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e2:	d106      	bne.n	80017f2 <HAL_RCC_OscConfig+0x76>
 80017e4:	4b80      	ldr	r3, [pc, #512]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a7f      	ldr	r2, [pc, #508]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 80017ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	e02e      	b.n	8001850 <HAL_RCC_OscConfig+0xd4>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10c      	bne.n	8001814 <HAL_RCC_OscConfig+0x98>
 80017fa:	4b7b      	ldr	r3, [pc, #492]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a7a      	ldr	r2, [pc, #488]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 8001800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	4b78      	ldr	r3, [pc, #480]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a77      	ldr	r2, [pc, #476]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 800180c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	e01d      	b.n	8001850 <HAL_RCC_OscConfig+0xd4>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800181c:	d10c      	bne.n	8001838 <HAL_RCC_OscConfig+0xbc>
 800181e:	4b72      	ldr	r3, [pc, #456]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a71      	ldr	r2, [pc, #452]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 8001824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	4b6f      	ldr	r3, [pc, #444]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a6e      	ldr	r2, [pc, #440]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 8001830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	e00b      	b.n	8001850 <HAL_RCC_OscConfig+0xd4>
 8001838:	4b6b      	ldr	r3, [pc, #428]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a6a      	ldr	r2, [pc, #424]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 800183e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	4b68      	ldr	r3, [pc, #416]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a67      	ldr	r2, [pc, #412]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 800184a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800184e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d013      	beq.n	8001880 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001858:	f7fe ffc4 	bl	80007e4 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001860:	f7fe ffc0 	bl	80007e4 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b64      	cmp	r3, #100	; 0x64
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e200      	b.n	8001c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001872:	4b5d      	ldr	r3, [pc, #372]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0xe4>
 800187e:	e014      	b.n	80018aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001880:	f7fe ffb0 	bl	80007e4 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001888:	f7fe ffac 	bl	80007e4 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b64      	cmp	r3, #100	; 0x64
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e1ec      	b.n	8001c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800189a:	4b53      	ldr	r3, [pc, #332]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x10c>
 80018a6:	e000      	b.n	80018aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d063      	beq.n	800197e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018b6:	4b4c      	ldr	r3, [pc, #304]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f003 030c 	and.w	r3, r3, #12
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00b      	beq.n	80018da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018c2:	4b49      	ldr	r3, [pc, #292]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 030c 	and.w	r3, r3, #12
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d11c      	bne.n	8001908 <HAL_RCC_OscConfig+0x18c>
 80018ce:	4b46      	ldr	r3, [pc, #280]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d116      	bne.n	8001908 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018da:	4b43      	ldr	r3, [pc, #268]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d005      	beq.n	80018f2 <HAL_RCC_OscConfig+0x176>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d001      	beq.n	80018f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e1c0      	b.n	8001c74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f2:	4b3d      	ldr	r3, [pc, #244]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	4939      	ldr	r1, [pc, #228]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 8001902:	4313      	orrs	r3, r2
 8001904:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001906:	e03a      	b.n	800197e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d020      	beq.n	8001952 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001910:	4b36      	ldr	r3, [pc, #216]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 8001912:	2201      	movs	r2, #1
 8001914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001916:	f7fe ff65 	bl	80007e4 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800191e:	f7fe ff61 	bl	80007e4 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e1a1      	b.n	8001c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001930:	4b2d      	ldr	r3, [pc, #180]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0f0      	beq.n	800191e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193c:	4b2a      	ldr	r3, [pc, #168]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	4927      	ldr	r1, [pc, #156]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 800194c:	4313      	orrs	r3, r2
 800194e:	600b      	str	r3, [r1, #0]
 8001950:	e015      	b.n	800197e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001952:	4b26      	ldr	r3, [pc, #152]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7fe ff44 	bl	80007e4 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001960:	f7fe ff40 	bl	80007e4 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e180      	b.n	8001c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001972:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f0      	bne.n	8001960 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	2b00      	cmp	r3, #0
 8001988:	d03a      	beq.n	8001a00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d019      	beq.n	80019c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001992:	4b17      	ldr	r3, [pc, #92]	; (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001994:	2201      	movs	r2, #1
 8001996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001998:	f7fe ff24 	bl	80007e4 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a0:	f7fe ff20 	bl	80007e4 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e160      	b.n	8001c74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b2:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f0      	beq.n	80019a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019be:	2001      	movs	r0, #1
 80019c0:	f000 fad8 	bl	8001f74 <RCC_Delay>
 80019c4:	e01c      	b.n	8001a00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019c6:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <HAL_RCC_OscConfig+0x274>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019cc:	f7fe ff0a 	bl	80007e4 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d2:	e00f      	b.n	80019f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d4:	f7fe ff06 	bl	80007e4 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d908      	bls.n	80019f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e146      	b.n	8001c74 <HAL_RCC_OscConfig+0x4f8>
 80019e6:	bf00      	nop
 80019e8:	40021000 	.word	0x40021000
 80019ec:	42420000 	.word	0x42420000
 80019f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f4:	4b92      	ldr	r3, [pc, #584]	; (8001c40 <HAL_RCC_OscConfig+0x4c4>)
 80019f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1e9      	bne.n	80019d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f000 80a6 	beq.w	8001b5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a12:	4b8b      	ldr	r3, [pc, #556]	; (8001c40 <HAL_RCC_OscConfig+0x4c4>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10d      	bne.n	8001a3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a1e:	4b88      	ldr	r3, [pc, #544]	; (8001c40 <HAL_RCC_OscConfig+0x4c4>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	4a87      	ldr	r2, [pc, #540]	; (8001c40 <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a28:	61d3      	str	r3, [r2, #28]
 8001a2a:	4b85      	ldr	r3, [pc, #532]	; (8001c40 <HAL_RCC_OscConfig+0x4c4>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a36:	2301      	movs	r3, #1
 8001a38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3a:	4b82      	ldr	r3, [pc, #520]	; (8001c44 <HAL_RCC_OscConfig+0x4c8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d118      	bne.n	8001a78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a46:	4b7f      	ldr	r3, [pc, #508]	; (8001c44 <HAL_RCC_OscConfig+0x4c8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a7e      	ldr	r2, [pc, #504]	; (8001c44 <HAL_RCC_OscConfig+0x4c8>)
 8001a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a52:	f7fe fec7 	bl	80007e4 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a5a:	f7fe fec3 	bl	80007e4 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b64      	cmp	r3, #100	; 0x64
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e103      	b.n	8001c74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6c:	4b75      	ldr	r3, [pc, #468]	; (8001c44 <HAL_RCC_OscConfig+0x4c8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0f0      	beq.n	8001a5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d106      	bne.n	8001a8e <HAL_RCC_OscConfig+0x312>
 8001a80:	4b6f      	ldr	r3, [pc, #444]	; (8001c40 <HAL_RCC_OscConfig+0x4c4>)
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	4a6e      	ldr	r2, [pc, #440]	; (8001c40 <HAL_RCC_OscConfig+0x4c4>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	6213      	str	r3, [r2, #32]
 8001a8c:	e02d      	b.n	8001aea <HAL_RCC_OscConfig+0x36e>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10c      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x334>
 8001a96:	4b6a      	ldr	r3, [pc, #424]	; (8001c40 <HAL_RCC_OscConfig+0x4c4>)
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	4a69      	ldr	r2, [pc, #420]	; (8001c40 <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	f023 0301 	bic.w	r3, r3, #1
 8001aa0:	6213      	str	r3, [r2, #32]
 8001aa2:	4b67      	ldr	r3, [pc, #412]	; (8001c40 <HAL_RCC_OscConfig+0x4c4>)
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	4a66      	ldr	r2, [pc, #408]	; (8001c40 <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	f023 0304 	bic.w	r3, r3, #4
 8001aac:	6213      	str	r3, [r2, #32]
 8001aae:	e01c      	b.n	8001aea <HAL_RCC_OscConfig+0x36e>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	2b05      	cmp	r3, #5
 8001ab6:	d10c      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x356>
 8001ab8:	4b61      	ldr	r3, [pc, #388]	; (8001c40 <HAL_RCC_OscConfig+0x4c4>)
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	4a60      	ldr	r2, [pc, #384]	; (8001c40 <HAL_RCC_OscConfig+0x4c4>)
 8001abe:	f043 0304 	orr.w	r3, r3, #4
 8001ac2:	6213      	str	r3, [r2, #32]
 8001ac4:	4b5e      	ldr	r3, [pc, #376]	; (8001c40 <HAL_RCC_OscConfig+0x4c4>)
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	4a5d      	ldr	r2, [pc, #372]	; (8001c40 <HAL_RCC_OscConfig+0x4c4>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	6213      	str	r3, [r2, #32]
 8001ad0:	e00b      	b.n	8001aea <HAL_RCC_OscConfig+0x36e>
 8001ad2:	4b5b      	ldr	r3, [pc, #364]	; (8001c40 <HAL_RCC_OscConfig+0x4c4>)
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	4a5a      	ldr	r2, [pc, #360]	; (8001c40 <HAL_RCC_OscConfig+0x4c4>)
 8001ad8:	f023 0301 	bic.w	r3, r3, #1
 8001adc:	6213      	str	r3, [r2, #32]
 8001ade:	4b58      	ldr	r3, [pc, #352]	; (8001c40 <HAL_RCC_OscConfig+0x4c4>)
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	4a57      	ldr	r2, [pc, #348]	; (8001c40 <HAL_RCC_OscConfig+0x4c4>)
 8001ae4:	f023 0304 	bic.w	r3, r3, #4
 8001ae8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d015      	beq.n	8001b1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af2:	f7fe fe77 	bl	80007e4 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af8:	e00a      	b.n	8001b10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001afa:	f7fe fe73 	bl	80007e4 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e0b1      	b.n	8001c74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b10:	4b4b      	ldr	r3, [pc, #300]	; (8001c40 <HAL_RCC_OscConfig+0x4c4>)
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0ee      	beq.n	8001afa <HAL_RCC_OscConfig+0x37e>
 8001b1c:	e014      	b.n	8001b48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1e:	f7fe fe61 	bl	80007e4 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b24:	e00a      	b.n	8001b3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b26:	f7fe fe5d 	bl	80007e4 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e09b      	b.n	8001c74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b3c:	4b40      	ldr	r3, [pc, #256]	; (8001c40 <HAL_RCC_OscConfig+0x4c4>)
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1ee      	bne.n	8001b26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b48:	7dfb      	ldrb	r3, [r7, #23]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d105      	bne.n	8001b5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b4e:	4b3c      	ldr	r3, [pc, #240]	; (8001c40 <HAL_RCC_OscConfig+0x4c4>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	4a3b      	ldr	r2, [pc, #236]	; (8001c40 <HAL_RCC_OscConfig+0x4c4>)
 8001b54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 8087 	beq.w	8001c72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b64:	4b36      	ldr	r3, [pc, #216]	; (8001c40 <HAL_RCC_OscConfig+0x4c4>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 030c 	and.w	r3, r3, #12
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d061      	beq.n	8001c34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d146      	bne.n	8001c06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b78:	4b33      	ldr	r3, [pc, #204]	; (8001c48 <HAL_RCC_OscConfig+0x4cc>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7e:	f7fe fe31 	bl	80007e4 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b86:	f7fe fe2d 	bl	80007e4 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e06d      	b.n	8001c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b98:	4b29      	ldr	r3, [pc, #164]	; (8001c40 <HAL_RCC_OscConfig+0x4c4>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1f0      	bne.n	8001b86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bac:	d108      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bae:	4b24      	ldr	r3, [pc, #144]	; (8001c40 <HAL_RCC_OscConfig+0x4c4>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	4921      	ldr	r1, [pc, #132]	; (8001c40 <HAL_RCC_OscConfig+0x4c4>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bc0:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <HAL_RCC_OscConfig+0x4c4>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a19      	ldr	r1, [r3, #32]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	430b      	orrs	r3, r1
 8001bd2:	491b      	ldr	r1, [pc, #108]	; (8001c40 <HAL_RCC_OscConfig+0x4c4>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd8:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <HAL_RCC_OscConfig+0x4cc>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bde:	f7fe fe01 	bl	80007e4 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be6:	f7fe fdfd 	bl	80007e4 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e03d      	b.n	8001c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <HAL_RCC_OscConfig+0x4c4>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0f0      	beq.n	8001be6 <HAL_RCC_OscConfig+0x46a>
 8001c04:	e035      	b.n	8001c72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <HAL_RCC_OscConfig+0x4cc>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0c:	f7fe fdea 	bl	80007e4 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c14:	f7fe fde6 	bl	80007e4 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e026      	b.n	8001c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_RCC_OscConfig+0x4c4>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x498>
 8001c32:	e01e      	b.n	8001c72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d107      	bne.n	8001c4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e019      	b.n	8001c74 <HAL_RCC_OscConfig+0x4f8>
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40007000 	.word	0x40007000
 8001c48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_RCC_OscConfig+0x500>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d106      	bne.n	8001c6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d001      	beq.n	8001c72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40021000 	.word	0x40021000

08001c80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0d0      	b.n	8001e36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c94:	4b6a      	ldr	r3, [pc, #424]	; (8001e40 <HAL_RCC_ClockConfig+0x1c0>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d910      	bls.n	8001cc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca2:	4b67      	ldr	r3, [pc, #412]	; (8001e40 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f023 0207 	bic.w	r2, r3, #7
 8001caa:	4965      	ldr	r1, [pc, #404]	; (8001e40 <HAL_RCC_ClockConfig+0x1c0>)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb2:	4b63      	ldr	r3, [pc, #396]	; (8001e40 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d001      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e0b8      	b.n	8001e36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d020      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cdc:	4b59      	ldr	r3, [pc, #356]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	4a58      	ldr	r2, [pc, #352]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ce6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0308 	and.w	r3, r3, #8
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d005      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cf4:	4b53      	ldr	r3, [pc, #332]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	4a52      	ldr	r2, [pc, #328]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d00:	4b50      	ldr	r3, [pc, #320]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	494d      	ldr	r1, [pc, #308]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d040      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d107      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d26:	4b47      	ldr	r3, [pc, #284]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d115      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e07f      	b.n	8001e36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d107      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d3e:	4b41      	ldr	r3, [pc, #260]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d109      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e073      	b.n	8001e36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4e:	4b3d      	ldr	r3, [pc, #244]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e06b      	b.n	8001e36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d5e:	4b39      	ldr	r3, [pc, #228]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f023 0203 	bic.w	r2, r3, #3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	4936      	ldr	r1, [pc, #216]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d70:	f7fe fd38 	bl	80007e4 <HAL_GetTick>
 8001d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d76:	e00a      	b.n	8001d8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d78:	f7fe fd34 	bl	80007e4 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e053      	b.n	8001e36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8e:	4b2d      	ldr	r3, [pc, #180]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 020c 	and.w	r2, r3, #12
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d1eb      	bne.n	8001d78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001da0:	4b27      	ldr	r3, [pc, #156]	; (8001e40 <HAL_RCC_ClockConfig+0x1c0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d210      	bcs.n	8001dd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dae:	4b24      	ldr	r3, [pc, #144]	; (8001e40 <HAL_RCC_ClockConfig+0x1c0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 0207 	bic.w	r2, r3, #7
 8001db6:	4922      	ldr	r1, [pc, #136]	; (8001e40 <HAL_RCC_ClockConfig+0x1c0>)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dbe:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d001      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e032      	b.n	8001e36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d008      	beq.n	8001dee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ddc:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	4916      	ldr	r1, [pc, #88]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d009      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dfa:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	490e      	ldr	r1, [pc, #56]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e0e:	f000 f821 	bl	8001e54 <HAL_RCC_GetSysClockFreq>
 8001e12:	4602      	mov	r2, r0
 8001e14:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	091b      	lsrs	r3, r3, #4
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	490a      	ldr	r1, [pc, #40]	; (8001e48 <HAL_RCC_ClockConfig+0x1c8>)
 8001e20:	5ccb      	ldrb	r3, [r1, r3]
 8001e22:	fa22 f303 	lsr.w	r3, r2, r3
 8001e26:	4a09      	ldr	r2, [pc, #36]	; (8001e4c <HAL_RCC_ClockConfig+0x1cc>)
 8001e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e2a:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <HAL_RCC_ClockConfig+0x1d0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fc96 	bl	8000760 <HAL_InitTick>

  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40022000 	.word	0x40022000
 8001e44:	40021000 	.word	0x40021000
 8001e48:	08007c10 	.word	0x08007c10
 8001e4c:	2000035c 	.word	0x2000035c
 8001e50:	20000000 	.word	0x20000000

08001e54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e54:	b490      	push	{r4, r7}
 8001e56:	b08a      	sub	sp, #40	; 0x28
 8001e58:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e5a:	4b29      	ldr	r3, [pc, #164]	; (8001f00 <HAL_RCC_GetSysClockFreq+0xac>)
 8001e5c:	1d3c      	adds	r4, r7, #4
 8001e5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e64:	f240 2301 	movw	r3, #513	; 0x201
 8001e68:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61bb      	str	r3, [r7, #24]
 8001e72:	2300      	movs	r3, #0
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e7e:	4b21      	ldr	r3, [pc, #132]	; (8001f04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	d002      	beq.n	8001e94 <HAL_RCC_GetSysClockFreq+0x40>
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d003      	beq.n	8001e9a <HAL_RCC_GetSysClockFreq+0x46>
 8001e92:	e02b      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e94:	4b1c      	ldr	r3, [pc, #112]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e96:	623b      	str	r3, [r7, #32]
      break;
 8001e98:	e02b      	b.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	0c9b      	lsrs	r3, r3, #18
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	3328      	adds	r3, #40	; 0x28
 8001ea4:	443b      	add	r3, r7
 8001ea6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001eaa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d012      	beq.n	8001edc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001eb6:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	0c5b      	lsrs	r3, r3, #17
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	3328      	adds	r3, #40	; 0x28
 8001ec2:	443b      	add	r3, r7
 8001ec4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ec8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	4a0e      	ldr	r2, [pc, #56]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ece:	fb03 f202 	mul.w	r2, r3, r2
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eda:	e004      	b.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	4a0b      	ldr	r2, [pc, #44]	; (8001f0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ee0:	fb02 f303 	mul.w	r3, r2, r3
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	623b      	str	r3, [r7, #32]
      break;
 8001eea:	e002      	b.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001eee:	623b      	str	r3, [r7, #32]
      break;
 8001ef0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ef2:	6a3b      	ldr	r3, [r7, #32]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3728      	adds	r7, #40	; 0x28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc90      	pop	{r4, r7}
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	08006d68 	.word	0x08006d68
 8001f04:	40021000 	.word	0x40021000
 8001f08:	007a1200 	.word	0x007a1200
 8001f0c:	003d0900 	.word	0x003d0900

08001f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f14:	4b02      	ldr	r3, [pc, #8]	; (8001f20 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f16:	681b      	ldr	r3, [r3, #0]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr
 8001f20:	2000035c 	.word	0x2000035c

08001f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f28:	f7ff fff2 	bl	8001f10 <HAL_RCC_GetHCLKFreq>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	0a1b      	lsrs	r3, r3, #8
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	4903      	ldr	r1, [pc, #12]	; (8001f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f3a:	5ccb      	ldrb	r3, [r1, r3]
 8001f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40021000 	.word	0x40021000
 8001f48:	08007c20 	.word	0x08007c20

08001f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f50:	f7ff ffde 	bl	8001f10 <HAL_RCC_GetHCLKFreq>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	0adb      	lsrs	r3, r3, #11
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	4903      	ldr	r1, [pc, #12]	; (8001f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f62:	5ccb      	ldrb	r3, [r1, r3]
 8001f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	08007c20 	.word	0x08007c20

08001f74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f7c:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <RCC_Delay+0x34>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <RCC_Delay+0x38>)
 8001f82:	fba2 2303 	umull	r2, r3, r2, r3
 8001f86:	0a5b      	lsrs	r3, r3, #9
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	fb02 f303 	mul.w	r3, r2, r3
 8001f8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f90:	bf00      	nop
  }
  while (Delay --);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	1e5a      	subs	r2, r3, #1
 8001f96:	60fa      	str	r2, [r7, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f9      	bne.n	8001f90 <RCC_Delay+0x1c>
}
 8001f9c:	bf00      	nop
 8001f9e:	bf00      	nop
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr
 8001fa8:	2000035c 	.word	0x2000035c
 8001fac:	10624dd3 	.word	0x10624dd3

08001fb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e041      	b.n	8002046 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d106      	bne.n	8001fdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f004 f878 	bl	80060cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3304      	adds	r3, #4
 8001fec:	4619      	mov	r1, r3
 8001fee:	4610      	mov	r0, r2
 8001ff0:	f000 faaa 	bl	8002548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b082      	sub	sp, #8
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e041      	b.n	80020e4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	d106      	bne.n	800207a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f839 	bl	80020ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2202      	movs	r2, #2
 800207e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3304      	adds	r3, #4
 800208a:	4619      	mov	r1, r3
 800208c:	4610      	mov	r0, r2
 800208e:	f000 fa5b 	bl	8002548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr
	...

08002100 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d109      	bne.n	8002124 <HAL_TIM_PWM_Start+0x24>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b01      	cmp	r3, #1
 800211a:	bf14      	ite	ne
 800211c:	2301      	movne	r3, #1
 800211e:	2300      	moveq	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	e022      	b.n	800216a <HAL_TIM_PWM_Start+0x6a>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	2b04      	cmp	r3, #4
 8002128:	d109      	bne.n	800213e <HAL_TIM_PWM_Start+0x3e>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b01      	cmp	r3, #1
 8002134:	bf14      	ite	ne
 8002136:	2301      	movne	r3, #1
 8002138:	2300      	moveq	r3, #0
 800213a:	b2db      	uxtb	r3, r3
 800213c:	e015      	b.n	800216a <HAL_TIM_PWM_Start+0x6a>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	2b08      	cmp	r3, #8
 8002142:	d109      	bne.n	8002158 <HAL_TIM_PWM_Start+0x58>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b01      	cmp	r3, #1
 800214e:	bf14      	ite	ne
 8002150:	2301      	movne	r3, #1
 8002152:	2300      	moveq	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	e008      	b.n	800216a <HAL_TIM_PWM_Start+0x6a>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b01      	cmp	r3, #1
 8002162:	bf14      	ite	ne
 8002164:	2301      	movne	r3, #1
 8002166:	2300      	moveq	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e05e      	b.n	8002230 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d104      	bne.n	8002182 <HAL_TIM_PWM_Start+0x82>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2202      	movs	r2, #2
 800217c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002180:	e013      	b.n	80021aa <HAL_TIM_PWM_Start+0xaa>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	2b04      	cmp	r3, #4
 8002186:	d104      	bne.n	8002192 <HAL_TIM_PWM_Start+0x92>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002190:	e00b      	b.n	80021aa <HAL_TIM_PWM_Start+0xaa>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2b08      	cmp	r3, #8
 8002196:	d104      	bne.n	80021a2 <HAL_TIM_PWM_Start+0xa2>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2202      	movs	r2, #2
 800219c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021a0:	e003      	b.n	80021aa <HAL_TIM_PWM_Start+0xaa>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2202      	movs	r2, #2
 80021a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2201      	movs	r2, #1
 80021b0:	6839      	ldr	r1, [r7, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 fc48 	bl	8002a48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a1e      	ldr	r2, [pc, #120]	; (8002238 <HAL_TIM_PWM_Start+0x138>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d107      	bne.n	80021d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a18      	ldr	r2, [pc, #96]	; (8002238 <HAL_TIM_PWM_Start+0x138>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d00e      	beq.n	80021fa <HAL_TIM_PWM_Start+0xfa>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e4:	d009      	beq.n	80021fa <HAL_TIM_PWM_Start+0xfa>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a14      	ldr	r2, [pc, #80]	; (800223c <HAL_TIM_PWM_Start+0x13c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d004      	beq.n	80021fa <HAL_TIM_PWM_Start+0xfa>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a12      	ldr	r2, [pc, #72]	; (8002240 <HAL_TIM_PWM_Start+0x140>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d111      	bne.n	800221e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2b06      	cmp	r3, #6
 800220a:	d010      	beq.n	800222e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0201 	orr.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800221c:	e007      	b.n	800222e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f042 0201 	orr.w	r2, r2, #1
 800222c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40012c00 	.word	0x40012c00
 800223c:	40000400 	.word	0x40000400
 8002240:	40000800 	.word	0x40000800

08002244 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002256:	2b01      	cmp	r3, #1
 8002258:	d101      	bne.n	800225e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800225a:	2302      	movs	r3, #2
 800225c:	e0ac      	b.n	80023b8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b0c      	cmp	r3, #12
 800226a:	f200 809f 	bhi.w	80023ac <HAL_TIM_PWM_ConfigChannel+0x168>
 800226e:	a201      	add	r2, pc, #4	; (adr r2, 8002274 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002274:	080022a9 	.word	0x080022a9
 8002278:	080023ad 	.word	0x080023ad
 800227c:	080023ad 	.word	0x080023ad
 8002280:	080023ad 	.word	0x080023ad
 8002284:	080022e9 	.word	0x080022e9
 8002288:	080023ad 	.word	0x080023ad
 800228c:	080023ad 	.word	0x080023ad
 8002290:	080023ad 	.word	0x080023ad
 8002294:	0800232b 	.word	0x0800232b
 8002298:	080023ad 	.word	0x080023ad
 800229c:	080023ad 	.word	0x080023ad
 80022a0:	080023ad 	.word	0x080023ad
 80022a4:	0800236b 	.word	0x0800236b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68b9      	ldr	r1, [r7, #8]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 f9ac 	bl	800260c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	699a      	ldr	r2, [r3, #24]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0208 	orr.w	r2, r2, #8
 80022c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	699a      	ldr	r2, [r3, #24]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0204 	bic.w	r2, r2, #4
 80022d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6999      	ldr	r1, [r3, #24]
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	691a      	ldr	r2, [r3, #16]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	619a      	str	r2, [r3, #24]
      break;
 80022e6:	e062      	b.n	80023ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68b9      	ldr	r1, [r7, #8]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 f9f2 	bl	80026d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	699a      	ldr	r2, [r3, #24]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002302:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	699a      	ldr	r2, [r3, #24]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002312:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6999      	ldr	r1, [r3, #24]
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	021a      	lsls	r2, r3, #8
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	619a      	str	r2, [r3, #24]
      break;
 8002328:	e041      	b.n	80023ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68b9      	ldr	r1, [r7, #8]
 8002330:	4618      	mov	r0, r3
 8002332:	f000 fa3b 	bl	80027ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	69da      	ldr	r2, [r3, #28]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f042 0208 	orr.w	r2, r2, #8
 8002344:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	69da      	ldr	r2, [r3, #28]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0204 	bic.w	r2, r2, #4
 8002354:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	69d9      	ldr	r1, [r3, #28]
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	691a      	ldr	r2, [r3, #16]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	61da      	str	r2, [r3, #28]
      break;
 8002368:	e021      	b.n	80023ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68b9      	ldr	r1, [r7, #8]
 8002370:	4618      	mov	r0, r3
 8002372:	f000 fa85 	bl	8002880 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	69da      	ldr	r2, [r3, #28]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002384:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	69da      	ldr	r2, [r3, #28]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002394:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	69d9      	ldr	r1, [r3, #28]
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	021a      	lsls	r2, r3, #8
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	61da      	str	r2, [r3, #28]
      break;
 80023aa:	e000      	b.n	80023ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80023ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <HAL_TIM_ConfigClockSource+0x18>
 80023d4:	2302      	movs	r3, #2
 80023d6:	e0b3      	b.n	8002540 <HAL_TIM_ConfigClockSource+0x180>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2202      	movs	r2, #2
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80023f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002410:	d03e      	beq.n	8002490 <HAL_TIM_ConfigClockSource+0xd0>
 8002412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002416:	f200 8087 	bhi.w	8002528 <HAL_TIM_ConfigClockSource+0x168>
 800241a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800241e:	f000 8085 	beq.w	800252c <HAL_TIM_ConfigClockSource+0x16c>
 8002422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002426:	d87f      	bhi.n	8002528 <HAL_TIM_ConfigClockSource+0x168>
 8002428:	2b70      	cmp	r3, #112	; 0x70
 800242a:	d01a      	beq.n	8002462 <HAL_TIM_ConfigClockSource+0xa2>
 800242c:	2b70      	cmp	r3, #112	; 0x70
 800242e:	d87b      	bhi.n	8002528 <HAL_TIM_ConfigClockSource+0x168>
 8002430:	2b60      	cmp	r3, #96	; 0x60
 8002432:	d050      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0x116>
 8002434:	2b60      	cmp	r3, #96	; 0x60
 8002436:	d877      	bhi.n	8002528 <HAL_TIM_ConfigClockSource+0x168>
 8002438:	2b50      	cmp	r3, #80	; 0x50
 800243a:	d03c      	beq.n	80024b6 <HAL_TIM_ConfigClockSource+0xf6>
 800243c:	2b50      	cmp	r3, #80	; 0x50
 800243e:	d873      	bhi.n	8002528 <HAL_TIM_ConfigClockSource+0x168>
 8002440:	2b40      	cmp	r3, #64	; 0x40
 8002442:	d058      	beq.n	80024f6 <HAL_TIM_ConfigClockSource+0x136>
 8002444:	2b40      	cmp	r3, #64	; 0x40
 8002446:	d86f      	bhi.n	8002528 <HAL_TIM_ConfigClockSource+0x168>
 8002448:	2b30      	cmp	r3, #48	; 0x30
 800244a:	d064      	beq.n	8002516 <HAL_TIM_ConfigClockSource+0x156>
 800244c:	2b30      	cmp	r3, #48	; 0x30
 800244e:	d86b      	bhi.n	8002528 <HAL_TIM_ConfigClockSource+0x168>
 8002450:	2b20      	cmp	r3, #32
 8002452:	d060      	beq.n	8002516 <HAL_TIM_ConfigClockSource+0x156>
 8002454:	2b20      	cmp	r3, #32
 8002456:	d867      	bhi.n	8002528 <HAL_TIM_ConfigClockSource+0x168>
 8002458:	2b00      	cmp	r3, #0
 800245a:	d05c      	beq.n	8002516 <HAL_TIM_ConfigClockSource+0x156>
 800245c:	2b10      	cmp	r3, #16
 800245e:	d05a      	beq.n	8002516 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002460:	e062      	b.n	8002528 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	6899      	ldr	r1, [r3, #8]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	f000 faca 	bl	8002a0a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002484:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	609a      	str	r2, [r3, #8]
      break;
 800248e:	e04e      	b.n	800252e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6818      	ldr	r0, [r3, #0]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	6899      	ldr	r1, [r3, #8]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f000 fab3 	bl	8002a0a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024b2:	609a      	str	r2, [r3, #8]
      break;
 80024b4:	e03b      	b.n	800252e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	6859      	ldr	r1, [r3, #4]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	461a      	mov	r2, r3
 80024c4:	f000 fa2a 	bl	800291c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2150      	movs	r1, #80	; 0x50
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 fa81 	bl	80029d6 <TIM_ITRx_SetConfig>
      break;
 80024d4:	e02b      	b.n	800252e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	6859      	ldr	r1, [r3, #4]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	461a      	mov	r2, r3
 80024e4:	f000 fa48 	bl	8002978 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2160      	movs	r1, #96	; 0x60
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 fa71 	bl	80029d6 <TIM_ITRx_SetConfig>
      break;
 80024f4:	e01b      	b.n	800252e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6818      	ldr	r0, [r3, #0]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	6859      	ldr	r1, [r3, #4]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	461a      	mov	r2, r3
 8002504:	f000 fa0a 	bl	800291c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2140      	movs	r1, #64	; 0x40
 800250e:	4618      	mov	r0, r3
 8002510:	f000 fa61 	bl	80029d6 <TIM_ITRx_SetConfig>
      break;
 8002514:	e00b      	b.n	800252e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4619      	mov	r1, r3
 8002520:	4610      	mov	r0, r2
 8002522:	f000 fa58 	bl	80029d6 <TIM_ITRx_SetConfig>
        break;
 8002526:	e002      	b.n	800252e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002528:	bf00      	nop
 800252a:	e000      	b.n	800252e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800252c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a29      	ldr	r2, [pc, #164]	; (8002600 <TIM_Base_SetConfig+0xb8>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d00b      	beq.n	8002578 <TIM_Base_SetConfig+0x30>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002566:	d007      	beq.n	8002578 <TIM_Base_SetConfig+0x30>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a26      	ldr	r2, [pc, #152]	; (8002604 <TIM_Base_SetConfig+0xbc>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d003      	beq.n	8002578 <TIM_Base_SetConfig+0x30>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a25      	ldr	r2, [pc, #148]	; (8002608 <TIM_Base_SetConfig+0xc0>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d108      	bne.n	800258a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800257e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	4313      	orrs	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a1c      	ldr	r2, [pc, #112]	; (8002600 <TIM_Base_SetConfig+0xb8>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d00b      	beq.n	80025aa <TIM_Base_SetConfig+0x62>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002598:	d007      	beq.n	80025aa <TIM_Base_SetConfig+0x62>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a19      	ldr	r2, [pc, #100]	; (8002604 <TIM_Base_SetConfig+0xbc>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d003      	beq.n	80025aa <TIM_Base_SetConfig+0x62>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a18      	ldr	r2, [pc, #96]	; (8002608 <TIM_Base_SetConfig+0xc0>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d108      	bne.n	80025bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a07      	ldr	r2, [pc, #28]	; (8002600 <TIM_Base_SetConfig+0xb8>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d103      	bne.n	80025f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	615a      	str	r2, [r3, #20]
}
 80025f6:	bf00      	nop
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr
 8002600:	40012c00 	.word	0x40012c00
 8002604:	40000400 	.word	0x40000400
 8002608:	40000800 	.word	0x40000800

0800260c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800260c:	b480      	push	{r7}
 800260e:	b087      	sub	sp, #28
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	f023 0201 	bic.w	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800263a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f023 0303 	bic.w	r3, r3, #3
 8002642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	4313      	orrs	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f023 0302 	bic.w	r3, r3, #2
 8002654:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	4313      	orrs	r3, r2
 800265e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a1c      	ldr	r2, [pc, #112]	; (80026d4 <TIM_OC1_SetConfig+0xc8>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d10c      	bne.n	8002682 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f023 0308 	bic.w	r3, r3, #8
 800266e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	4313      	orrs	r3, r2
 8002678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f023 0304 	bic.w	r3, r3, #4
 8002680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a13      	ldr	r2, [pc, #76]	; (80026d4 <TIM_OC1_SetConfig+0xc8>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d111      	bne.n	80026ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	621a      	str	r2, [r3, #32]
}
 80026c8:	bf00      	nop
 80026ca:	371c      	adds	r7, #28
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40012c00 	.word	0x40012c00

080026d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026d8:	b480      	push	{r7}
 80026da:	b087      	sub	sp, #28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	f023 0210 	bic.w	r2, r3, #16
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800270e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	021b      	lsls	r3, r3, #8
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	4313      	orrs	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f023 0320 	bic.w	r3, r3, #32
 8002722:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	4313      	orrs	r3, r2
 800272e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a1d      	ldr	r2, [pc, #116]	; (80027a8 <TIM_OC2_SetConfig+0xd0>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d10d      	bne.n	8002754 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800273e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	4313      	orrs	r3, r2
 800274a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002752:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a14      	ldr	r2, [pc, #80]	; (80027a8 <TIM_OC2_SetConfig+0xd0>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d113      	bne.n	8002784 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002762:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800276a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	621a      	str	r2, [r3, #32]
}
 800279e:	bf00      	nop
 80027a0:	371c      	adds	r7, #28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr
 80027a8:	40012c00 	.word	0x40012c00

080027ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f023 0303 	bic.w	r3, r3, #3
 80027e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	021b      	lsls	r3, r3, #8
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	4313      	orrs	r3, r2
 8002800:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a1d      	ldr	r2, [pc, #116]	; (800287c <TIM_OC3_SetConfig+0xd0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d10d      	bne.n	8002826 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002810:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	021b      	lsls	r3, r3, #8
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	4313      	orrs	r3, r2
 800281c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a14      	ldr	r2, [pc, #80]	; (800287c <TIM_OC3_SetConfig+0xd0>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d113      	bne.n	8002856 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800283c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	4313      	orrs	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	621a      	str	r2, [r3, #32]
}
 8002870:	bf00      	nop
 8002872:	371c      	adds	r7, #28
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40012c00 	.word	0x40012c00

08002880 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	021b      	lsls	r3, r3, #8
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	031b      	lsls	r3, r3, #12
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a0f      	ldr	r2, [pc, #60]	; (8002918 <TIM_OC4_SetConfig+0x98>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d109      	bne.n	80028f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	019b      	lsls	r3, r3, #6
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	621a      	str	r2, [r3, #32]
}
 800290e:	bf00      	nop
 8002910:	371c      	adds	r7, #28
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr
 8002918:	40012c00 	.word	0x40012c00

0800291c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800291c:	b480      	push	{r7}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	f023 0201 	bic.w	r2, r3, #1
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f023 030a 	bic.w	r3, r3, #10
 8002958:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	4313      	orrs	r3, r2
 8002960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	621a      	str	r2, [r3, #32]
}
 800296e:	bf00      	nop
 8002970:	371c      	adds	r7, #28
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	f023 0210 	bic.w	r2, r3, #16
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	031b      	lsls	r3, r3, #12
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	4313      	orrs	r3, r2
 80029be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	621a      	str	r2, [r3, #32]
}
 80029cc:	bf00      	nop
 80029ce:	371c      	adds	r7, #28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr

080029d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b085      	sub	sp, #20
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f043 0307 	orr.w	r3, r3, #7
 80029f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	609a      	str	r2, [r3, #8]
}
 8002a00:	bf00      	nop
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr

08002a0a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b087      	sub	sp, #28
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
 8002a16:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a24:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	021a      	lsls	r2, r3, #8
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	609a      	str	r2, [r3, #8]
}
 8002a3e:	bf00      	nop
 8002a40:	371c      	adds	r7, #28
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b087      	sub	sp, #28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f003 031f 	and.w	r3, r3, #31
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a1a      	ldr	r2, [r3, #32]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	401a      	ands	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a1a      	ldr	r2, [r3, #32]
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f003 031f 	and.w	r3, r3, #31
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a80:	431a      	orrs	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	621a      	str	r2, [r3, #32]
}
 8002a86:	bf00      	nop
 8002a88:	371c      	adds	r7, #28
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e046      	b.n	8002b36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ace:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a16      	ldr	r2, [pc, #88]	; (8002b40 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d00e      	beq.n	8002b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af4:	d009      	beq.n	8002b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a12      	ldr	r2, [pc, #72]	; (8002b44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d004      	beq.n	8002b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a10      	ldr	r2, [pc, #64]	; (8002b48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d10c      	bne.n	8002b24 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr
 8002b40:	40012c00 	.word	0x40012c00
 8002b44:	40000400 	.word	0x40000400
 8002b48:	40000800 	.word	0x40000800

08002b4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e03f      	b.n	8002bde <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d106      	bne.n	8002b78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f003 fb76 	bl	8006264 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2224      	movs	r2, #36	; 0x24
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 fe6f 	bl	8003874 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ba4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695a      	ldr	r2, [r3, #20]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b08a      	sub	sp, #40	; 0x28
 8002bea:	af02      	add	r7, sp, #8
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	603b      	str	r3, [r7, #0]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b20      	cmp	r3, #32
 8002c04:	d17c      	bne.n	8002d00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <HAL_UART_Transmit+0x2c>
 8002c0c:	88fb      	ldrh	r3, [r7, #6]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e075      	b.n	8002d02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_UART_Transmit+0x3e>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e06e      	b.n	8002d02 <HAL_UART_Transmit+0x11c>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2221      	movs	r2, #33	; 0x21
 8002c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c3a:	f7fd fdd3 	bl	80007e4 <HAL_GetTick>
 8002c3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	88fa      	ldrh	r2, [r7, #6]
 8002c44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	88fa      	ldrh	r2, [r7, #6]
 8002c4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c54:	d108      	bne.n	8002c68 <HAL_UART_Transmit+0x82>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d104      	bne.n	8002c68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	61bb      	str	r3, [r7, #24]
 8002c66:	e003      	b.n	8002c70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c78:	e02a      	b.n	8002cd0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	2200      	movs	r2, #0
 8002c82:	2180      	movs	r1, #128	; 0x80
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 fba8 	bl	80033da <UART_WaitOnFlagUntilTimeout>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e036      	b.n	8002d02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10b      	bne.n	8002cb2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ca8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	3302      	adds	r3, #2
 8002cae:	61bb      	str	r3, [r7, #24]
 8002cb0:	e007      	b.n	8002cc2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	781a      	ldrb	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1cf      	bne.n	8002c7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2140      	movs	r1, #64	; 0x40
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 fb78 	bl	80033da <UART_WaitOnFlagUntilTimeout>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e006      	b.n	8002d02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	e000      	b.n	8002d02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d00:	2302      	movs	r3, #2
  }
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3720      	adds	r7, #32
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	60f8      	str	r0, [r7, #12]
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	4613      	mov	r3, r2
 8002d16:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b20      	cmp	r3, #32
 8002d22:	d11d      	bne.n	8002d60 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <HAL_UART_Receive_IT+0x26>
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e016      	b.n	8002d62 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_UART_Receive_IT+0x38>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e00f      	b.n	8002d62 <HAL_UART_Receive_IT+0x58>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002d50:	88fb      	ldrh	r3, [r7, #6]
 8002d52:	461a      	mov	r2, r3
 8002d54:	68b9      	ldr	r1, [r7, #8]
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 fb89 	bl	800346e <UART_Start_Receive_IT>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	e000      	b.n	8002d62 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002d60:	2302      	movs	r3, #2
  }
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b084      	sub	sp, #16
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	60f8      	str	r0, [r7, #12]
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	4613      	mov	r3, r2
 8002d76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b20      	cmp	r3, #32
 8002d82:	d11d      	bne.n	8002dc0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d002      	beq.n	8002d90 <HAL_UART_Receive_DMA+0x26>
 8002d8a:	88fb      	ldrh	r3, [r7, #6]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e016      	b.n	8002dc2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <HAL_UART_Receive_DMA+0x38>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e00f      	b.n	8002dc2 <HAL_UART_Receive_DMA+0x58>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	461a      	mov	r2, r3
 8002db4:	68b9      	ldr	r1, [r7, #8]
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 fb92 	bl	80034e0 <UART_Start_Receive_DMA>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	e000      	b.n	8002dc2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002dc0:	2302      	movs	r3, #2
  }
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b082      	sub	sp, #8
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68da      	ldr	r2, [r3, #12]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8002de0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695a      	ldr	r2, [r3, #20]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0201 	bic.w	r2, r2, #1
 8002df0:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d107      	bne.n	8002e0a <HAL_UART_Abort+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0210 	bic.w	r2, r2, #16
 8002e08:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d024      	beq.n	8002e62 <HAL_UART_Abort+0x98>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e26:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d018      	beq.n	8002e62 <HAL_UART_Abort+0x98>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e34:	2200      	movs	r2, #0
 8002e36:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fd fee2 	bl	8000c06 <HAL_DMA_Abort>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00c      	beq.n	8002e62 <HAL_UART_Abort+0x98>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fe f891 	bl	8000f74 <HAL_DMA_GetError>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b20      	cmp	r3, #32
 8002e56:	d104      	bne.n	8002e62 <HAL_UART_Abort+0x98>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2210      	movs	r2, #16
 8002e5c:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e040      	b.n	8002ee4 <HAL_UART_Abort+0x11a>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d024      	beq.n	8002eba <HAL_UART_Abort+0xf0>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695a      	ldr	r2, [r3, #20]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e7e:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d018      	beq.n	8002eba <HAL_UART_Abort+0xf0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fd feb6 	bl	8000c06 <HAL_DMA_Abort>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00c      	beq.n	8002eba <HAL_UART_Abort+0xf0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fe f865 	bl	8000f74 <HAL_DMA_GetError>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b20      	cmp	r3, #32
 8002eae:	d104      	bne.n	8002eba <HAL_UART_Abort+0xf0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2210      	movs	r2, #16
 8002eb4:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e014      	b.n	8002ee4 <HAL_UART_Abort+0x11a>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08a      	sub	sp, #40	; 0x28
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10d      	bne.n	8002f3e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	f003 0320 	and.w	r3, r3, #32
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d008      	beq.n	8002f3e <HAL_UART_IRQHandler+0x52>
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	f003 0320 	and.w	r3, r3, #32
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 fbf2 	bl	8003720 <UART_Receive_IT>
      return;
 8002f3c:	e17b      	b.n	8003236 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 80b1 	beq.w	80030a8 <HAL_UART_IRQHandler+0x1bc>
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d105      	bne.n	8002f5c <HAL_UART_IRQHandler+0x70>
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 80a6 	beq.w	80030a8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_UART_IRQHandler+0x90>
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	f043 0201 	orr.w	r2, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <HAL_UART_IRQHandler+0xb0>
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f94:	f043 0202 	orr.w	r2, r3, #2
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <HAL_UART_IRQHandler+0xd0>
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d005      	beq.n	8002fbc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	f043 0204 	orr.w	r2, r3, #4
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00f      	beq.n	8002fe6 <HAL_UART_IRQHandler+0xfa>
 8002fc6:	6a3b      	ldr	r3, [r7, #32]
 8002fc8:	f003 0320 	and.w	r3, r3, #32
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d104      	bne.n	8002fda <HAL_UART_IRQHandler+0xee>
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d005      	beq.n	8002fe6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f043 0208 	orr.w	r2, r3, #8
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 811e 	beq.w	800322c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	f003 0320 	and.w	r3, r3, #32
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d007      	beq.n	800300a <HAL_UART_IRQHandler+0x11e>
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	f003 0320 	and.w	r3, r3, #32
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 fb8b 	bl	8003720 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003014:	2b00      	cmp	r3, #0
 8003016:	bf14      	ite	ne
 8003018:	2301      	movne	r3, #1
 800301a:	2300      	moveq	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	f003 0308 	and.w	r3, r3, #8
 8003028:	2b00      	cmp	r3, #0
 800302a:	d102      	bne.n	8003032 <HAL_UART_IRQHandler+0x146>
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d031      	beq.n	8003096 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 facd 	bl	80035d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003042:	2b00      	cmp	r3, #0
 8003044:	d023      	beq.n	800308e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695a      	ldr	r2, [r3, #20]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003054:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305a:	2b00      	cmp	r3, #0
 800305c:	d013      	beq.n	8003086 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003062:	4a76      	ldr	r2, [pc, #472]	; (800323c <HAL_UART_IRQHandler+0x350>)
 8003064:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306a:	4618      	mov	r0, r3
 800306c:	f7fd fe06 	bl	8000c7c <HAL_DMA_Abort_IT>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d016      	beq.n	80030a4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003080:	4610      	mov	r0, r2
 8003082:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003084:	e00e      	b.n	80030a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 ff7e 	bl	8003f88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800308c:	e00a      	b.n	80030a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 ff7a 	bl	8003f88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003094:	e006      	b.n	80030a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 ff76 	bl	8003f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80030a2:	e0c3      	b.n	800322c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a4:	bf00      	nop
    return;
 80030a6:	e0c1      	b.n	800322c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	f040 80a1 	bne.w	80031f4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	f003 0310 	and.w	r3, r3, #16
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 809b 	beq.w	80031f4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	f003 0310 	and.w	r3, r3, #16
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 8095 	beq.w	80031f4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d04e      	beq.n	800318c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80030f8:	8a3b      	ldrh	r3, [r7, #16]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 8098 	beq.w	8003230 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003104:	8a3a      	ldrh	r2, [r7, #16]
 8003106:	429a      	cmp	r2, r3
 8003108:	f080 8092 	bcs.w	8003230 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	8a3a      	ldrh	r2, [r7, #16]
 8003110:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	2b20      	cmp	r3, #32
 800311a:	d02b      	beq.n	8003174 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800312a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695a      	ldr	r2, [r3, #20]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0201 	bic.w	r2, r2, #1
 800313a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	695a      	ldr	r2, [r3, #20]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800314a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68da      	ldr	r2, [r3, #12]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0210 	bic.w	r2, r2, #16
 8003168:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316e:	4618      	mov	r0, r3
 8003170:	f7fd fd49 	bl	8000c06 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800317c:	b29b      	uxth	r3, r3
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	b29b      	uxth	r3, r3
 8003182:	4619      	mov	r1, r3
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 f86d 	bl	8003264 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800318a:	e051      	b.n	8003230 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003194:	b29b      	uxth	r3, r3
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800319e:	b29b      	uxth	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d047      	beq.n	8003234 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80031a4:	8a7b      	ldrh	r3, [r7, #18]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d044      	beq.n	8003234 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80031b8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695a      	ldr	r2, [r3, #20]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0201 	bic.w	r2, r2, #1
 80031c8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0210 	bic.w	r2, r2, #16
 80031e6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031e8:	8a7b      	ldrh	r3, [r7, #18]
 80031ea:	4619      	mov	r1, r3
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f839 	bl	8003264 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80031f2:	e01f      	b.n	8003234 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d008      	beq.n	8003210 <HAL_UART_IRQHandler+0x324>
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 fa22 	bl	8003652 <UART_Transmit_IT>
    return;
 800320e:	e012      	b.n	8003236 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00d      	beq.n	8003236 <HAL_UART_IRQHandler+0x34a>
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003220:	2b00      	cmp	r3, #0
 8003222:	d008      	beq.n	8003236 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 fa63 	bl	80036f0 <UART_EndTransmit_IT>
    return;
 800322a:	e004      	b.n	8003236 <HAL_UART_IRQHandler+0x34a>
    return;
 800322c:	bf00      	nop
 800322e:	e002      	b.n	8003236 <HAL_UART_IRQHandler+0x34a>
      return;
 8003230:	bf00      	nop
 8003232:	e000      	b.n	8003236 <HAL_UART_IRQHandler+0x34a>
      return;
 8003234:	bf00      	nop
  }
}
 8003236:	3728      	adds	r7, #40	; 0x28
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	0800362b 	.word	0x0800362b

08003240 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	bc80      	pop	{r7}
 8003250:	4770      	bx	lr

08003252 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	bc80      	pop	{r7}
 8003262:	4770      	bx	lr

08003264 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr

0800327a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b084      	sub	sp, #16
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b00      	cmp	r3, #0
 8003294:	d12a      	bne.n	80032ec <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032aa:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695a      	ldr	r2, [r3, #20]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0201 	bic.w	r2, r2, #1
 80032ba:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695a      	ldr	r2, [r3, #20]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032ca:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2220      	movs	r2, #32
 80032d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d107      	bne.n	80032ec <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0210 	bic.w	r2, r2, #16
 80032ea:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d106      	bne.n	8003302 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032f8:	4619      	mov	r1, r3
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f7ff ffb2 	bl	8003264 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003300:	e002      	b.n	8003308 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 fe4a 	bl	8003f9c <HAL_UART_RxCpltCallback>
}
 8003308:	bf00      	nop
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	2b01      	cmp	r3, #1
 8003324:	d108      	bne.n	8003338 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800332a:	085b      	lsrs	r3, r3, #1
 800332c:	b29b      	uxth	r3, r3
 800332e:	4619      	mov	r1, r3
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f7ff ff97 	bl	8003264 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003336:	e002      	b.n	800333e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f7ff ff8a 	bl	8003252 <HAL_UART_RxHalfCpltCallback>
}
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800334e:	2300      	movs	r3, #0
 8003350:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003362:	2b00      	cmp	r3, #0
 8003364:	bf14      	ite	ne
 8003366:	2301      	movne	r3, #1
 8003368:	2300      	moveq	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b21      	cmp	r3, #33	; 0x21
 8003378:	d108      	bne.n	800338c <UART_DMAError+0x46>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2200      	movs	r2, #0
 8003384:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003386:	68b8      	ldr	r0, [r7, #8]
 8003388:	f000 f90e 	bl	80035a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003396:	2b00      	cmp	r3, #0
 8003398:	bf14      	ite	ne
 800339a:	2301      	movne	r3, #1
 800339c:	2300      	moveq	r3, #0
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b22      	cmp	r3, #34	; 0x22
 80033ac:	d108      	bne.n	80033c0 <UART_DMAError+0x7a>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2200      	movs	r2, #0
 80033b8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80033ba:	68b8      	ldr	r0, [r7, #8]
 80033bc:	f000 f909 	bl	80035d2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	f043 0210 	orr.w	r2, r3, #16
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033cc:	68b8      	ldr	r0, [r7, #8]
 80033ce:	f000 fddb 	bl	8003f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033d2:	bf00      	nop
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	603b      	str	r3, [r7, #0]
 80033e6:	4613      	mov	r3, r2
 80033e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ea:	e02c      	b.n	8003446 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f2:	d028      	beq.n	8003446 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d007      	beq.n	800340a <UART_WaitOnFlagUntilTimeout+0x30>
 80033fa:	f7fd f9f3 	bl	80007e4 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	429a      	cmp	r2, r3
 8003408:	d21d      	bcs.n	8003446 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003418:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	695a      	ldr	r2, [r3, #20]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0201 	bic.w	r2, r2, #1
 8003428:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2220      	movs	r2, #32
 800342e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2220      	movs	r2, #32
 8003436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e00f      	b.n	8003466 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	4013      	ands	r3, r2
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	429a      	cmp	r2, r3
 8003454:	bf0c      	ite	eq
 8003456:	2301      	moveq	r3, #1
 8003458:	2300      	movne	r3, #0
 800345a:	b2db      	uxtb	r3, r3
 800345c:	461a      	mov	r2, r3
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	429a      	cmp	r2, r3
 8003462:	d0c3      	beq.n	80033ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800346e:	b480      	push	{r7}
 8003470:	b085      	sub	sp, #20
 8003472:	af00      	add	r7, sp, #0
 8003474:	60f8      	str	r0, [r7, #12]
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	4613      	mov	r3, r2
 800347a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	88fa      	ldrh	r2, [r7, #6]
 8003486:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	88fa      	ldrh	r2, [r7, #6]
 800348c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2222      	movs	r2, #34	; 0x22
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034b2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695a      	ldr	r2, [r3, #20]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0201 	orr.w	r2, r2, #1
 80034c2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0220 	orr.w	r2, r2, #32
 80034d2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr

080034e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	4613      	mov	r3, r2
 80034ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	88fa      	ldrh	r2, [r7, #6]
 80034f8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2222      	movs	r2, #34	; 0x22
 8003504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350c:	4a23      	ldr	r2, [pc, #140]	; (800359c <UART_Start_Receive_DMA+0xbc>)
 800350e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003514:	4a22      	ldr	r2, [pc, #136]	; (80035a0 <UART_Start_Receive_DMA+0xc0>)
 8003516:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351c:	4a21      	ldr	r2, [pc, #132]	; (80035a4 <UART_Start_Receive_DMA+0xc4>)
 800351e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003524:	2200      	movs	r2, #0
 8003526:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003528:	f107 0308 	add.w	r3, r7, #8
 800352c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	3304      	adds	r3, #4
 8003538:	4619      	mov	r1, r3
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	f7fd fb02 	bl	8000b48 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003544:	2300      	movs	r3, #0
 8003546:	613b      	str	r3, [r7, #16]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	613b      	str	r3, [r7, #16]
 8003558:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003570:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695a      	ldr	r2, [r3, #20]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f042 0201 	orr.w	r2, r2, #1
 8003580:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	695a      	ldr	r2, [r3, #20]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003590:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	0800327b 	.word	0x0800327b
 80035a0:	08003311 	.word	0x08003311
 80035a4:	08003347 	.word	0x08003347

080035a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80035be:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bc80      	pop	{r7}
 80035d0:	4770      	bx	lr

080035d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80035e8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695a      	ldr	r2, [r3, #20]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0201 	bic.w	r2, r2, #1
 80035f8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d107      	bne.n	8003612 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0210 	bic.w	r2, r2, #16
 8003610:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2220      	movs	r2, #32
 8003616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr

0800362a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b084      	sub	sp, #16
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 fc9f 	bl	8003f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800364a:	bf00      	nop
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003652:	b480      	push	{r7}
 8003654:	b085      	sub	sp, #20
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b21      	cmp	r3, #33	; 0x21
 8003664:	d13e      	bne.n	80036e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800366e:	d114      	bne.n	800369a <UART_Transmit_IT+0x48>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d110      	bne.n	800369a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	881b      	ldrh	r3, [r3, #0]
 8003682:	461a      	mov	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800368c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	1c9a      	adds	r2, r3, #2
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	621a      	str	r2, [r3, #32]
 8003698:	e008      	b.n	80036ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	1c59      	adds	r1, r3, #1
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6211      	str	r1, [r2, #32]
 80036a4:	781a      	ldrb	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	4619      	mov	r1, r3
 80036ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10f      	bne.n	80036e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80036e0:	2300      	movs	r3, #0
 80036e2:	e000      	b.n	80036e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80036e4:	2302      	movs	r3, #2
  }
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr

080036f0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003706:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff fd95 	bl	8003240 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b22      	cmp	r3, #34	; 0x22
 8003732:	f040 8099 	bne.w	8003868 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800373e:	d117      	bne.n	8003770 <UART_Receive_IT+0x50>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d113      	bne.n	8003770 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003748:	2300      	movs	r3, #0
 800374a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003750:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	b29b      	uxth	r3, r3
 800375a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800375e:	b29a      	uxth	r2, r3
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003768:	1c9a      	adds	r2, r3, #2
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	629a      	str	r2, [r3, #40]	; 0x28
 800376e:	e026      	b.n	80037be <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003774:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003776:	2300      	movs	r3, #0
 8003778:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003782:	d007      	beq.n	8003794 <UART_Receive_IT+0x74>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10a      	bne.n	80037a2 <UART_Receive_IT+0x82>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d106      	bne.n	80037a2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	b2da      	uxtb	r2, r3
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	701a      	strb	r2, [r3, #0]
 80037a0:	e008      	b.n	80037b4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	4619      	mov	r1, r3
 80037cc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d148      	bne.n	8003864 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68da      	ldr	r2, [r3, #12]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0220 	bic.w	r2, r2, #32
 80037e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695a      	ldr	r2, [r3, #20]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0201 	bic.w	r2, r2, #1
 8003800:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	2b01      	cmp	r3, #1
 8003810:	d123      	bne.n	800385a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0210 	bic.w	r2, r2, #16
 8003826:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0310 	and.w	r3, r3, #16
 8003832:	2b10      	cmp	r3, #16
 8003834:	d10a      	bne.n	800384c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003836:	2300      	movs	r3, #0
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003850:	4619      	mov	r1, r3
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7ff fd06 	bl	8003264 <HAL_UARTEx_RxEventCallback>
 8003858:	e002      	b.n	8003860 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fb9e 	bl	8003f9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	e002      	b.n	800386a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003864:	2300      	movs	r3, #0
 8003866:	e000      	b.n	800386a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003868:	2302      	movs	r3, #2
  }
}
 800386a:	4618      	mov	r0, r3
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80038ae:	f023 030c 	bic.w	r3, r3, #12
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	6812      	ldr	r2, [r2, #0]
 80038b6:	68b9      	ldr	r1, [r7, #8]
 80038b8:	430b      	orrs	r3, r1
 80038ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a2c      	ldr	r2, [pc, #176]	; (8003988 <UART_SetConfig+0x114>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d103      	bne.n	80038e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80038dc:	f7fe fb36 	bl	8001f4c <HAL_RCC_GetPCLK2Freq>
 80038e0:	60f8      	str	r0, [r7, #12]
 80038e2:	e002      	b.n	80038ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80038e4:	f7fe fb1e 	bl	8001f24 <HAL_RCC_GetPCLK1Freq>
 80038e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	009a      	lsls	r2, r3, #2
 80038f4:	441a      	add	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003900:	4a22      	ldr	r2, [pc, #136]	; (800398c <UART_SetConfig+0x118>)
 8003902:	fba2 2303 	umull	r2, r3, r2, r3
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	0119      	lsls	r1, r3, #4
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	4613      	mov	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	009a      	lsls	r2, r3, #2
 8003914:	441a      	add	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003920:	4b1a      	ldr	r3, [pc, #104]	; (800398c <UART_SetConfig+0x118>)
 8003922:	fba3 0302 	umull	r0, r3, r3, r2
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	2064      	movs	r0, #100	; 0x64
 800392a:	fb00 f303 	mul.w	r3, r0, r3
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	3332      	adds	r3, #50	; 0x32
 8003934:	4a15      	ldr	r2, [pc, #84]	; (800398c <UART_SetConfig+0x118>)
 8003936:	fba2 2303 	umull	r2, r3, r2, r3
 800393a:	095b      	lsrs	r3, r3, #5
 800393c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003940:	4419      	add	r1, r3
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	4613      	mov	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	009a      	lsls	r2, r3, #2
 800394c:	441a      	add	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	fbb2 f2f3 	udiv	r2, r2, r3
 8003958:	4b0c      	ldr	r3, [pc, #48]	; (800398c <UART_SetConfig+0x118>)
 800395a:	fba3 0302 	umull	r0, r3, r3, r2
 800395e:	095b      	lsrs	r3, r3, #5
 8003960:	2064      	movs	r0, #100	; 0x64
 8003962:	fb00 f303 	mul.w	r3, r0, r3
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	011b      	lsls	r3, r3, #4
 800396a:	3332      	adds	r3, #50	; 0x32
 800396c:	4a07      	ldr	r2, [pc, #28]	; (800398c <UART_SetConfig+0x118>)
 800396e:	fba2 2303 	umull	r2, r3, r2, r3
 8003972:	095b      	lsrs	r3, r3, #5
 8003974:	f003 020f 	and.w	r2, r3, #15
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	440a      	add	r2, r1
 800397e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003980:	bf00      	nop
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40013800 	.word	0x40013800
 800398c:	51eb851f 	.word	0x51eb851f

08003990 <Bluetooth_Find_Rx_Length>:
	uint16_t commands;
	uint8_t *symbols;
	uint8_t *lengths;
}bluetooth_rx;

uint8_t Bluetooth_Find_Rx_Length(uint8_t rx_symbol){
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	71fb      	strb	r3, [r7, #7]
	//Find command length by symbol
	uint8_t i = 0;
 800399a:	2300      	movs	r3, #0
 800399c:	73fb      	strb	r3, [r7, #15]
	while(i != bluetooth_rx.commands){
 800399e:	e00d      	b.n	80039bc <Bluetooth_Find_Rx_Length+0x2c>
		if(bluetooth_rx.symbols[i] == rx_symbol){
 80039a0:	4b0d      	ldr	r3, [pc, #52]	; (80039d8 <Bluetooth_Find_Rx_Length+0x48>)
 80039a2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
 80039a8:	4413      	add	r3, r2
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	79fa      	ldrb	r2, [r7, #7]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d101      	bne.n	80039b6 <Bluetooth_Find_Rx_Length+0x26>
			return i;
 80039b2:	7bfb      	ldrb	r3, [r7, #15]
 80039b4:	e00a      	b.n	80039cc <Bluetooth_Find_Rx_Length+0x3c>
		}
		i++;
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
 80039b8:	3301      	adds	r3, #1
 80039ba:	73fb      	strb	r3, [r7, #15]
	while(i != bluetooth_rx.commands){
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
 80039be:	b29a      	uxth	r2, r3
 80039c0:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <Bluetooth_Find_Rx_Length+0x48>)
 80039c2:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d1ea      	bne.n	80039a0 <Bluetooth_Find_Rx_Length+0x10>
	}
	return i;
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	20000be8 	.word	0x20000be8

080039dc <Bluetooth_Connected_Debounce>:
uint8_t Bluetooth_Connected_Debounce(){
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
	uint8_t level;
	uint8_t d = 0;
 80039e2:	2300      	movs	r3, #0
 80039e4:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 80039e6:	2300      	movs	r3, #0
 80039e8:	717b      	strb	r3, [r7, #5]
	while(d != 1){
 80039ea:	e01f      	b.n	8003a2c <Bluetooth_Connected_Debounce+0x50>
		i = 0;
 80039ec:	2300      	movs	r3, #0
 80039ee:	717b      	strb	r3, [r7, #5]
		level = HAL_GPIO_ReadPin(BT_STAT_GPIO_Port, BT_STAT_Pin);
 80039f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039f4:	4811      	ldr	r0, [pc, #68]	; (8003a3c <Bluetooth_Connected_Debounce+0x60>)
 80039f6:	f7fd fe79 	bl	80016ec <HAL_GPIO_ReadPin>
 80039fa:	4603      	mov	r3, r0
 80039fc:	71fb      	strb	r3, [r7, #7]
		while(i != BT_STAT_DEBOUNCE_SAMPLES){
 80039fe:	e012      	b.n	8003a26 <Bluetooth_Connected_Debounce+0x4a>
			i++;
 8003a00:	797b      	ldrb	r3, [r7, #5]
 8003a02:	3301      	adds	r3, #1
 8003a04:	717b      	strb	r3, [r7, #5]
			if(HAL_GPIO_ReadPin(BT_STAT_GPIO_Port, BT_STAT_Pin) != level){
 8003a06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a0a:	480c      	ldr	r0, [pc, #48]	; (8003a3c <Bluetooth_Connected_Debounce+0x60>)
 8003a0c:	f7fd fe6e 	bl	80016ec <HAL_GPIO_ReadPin>
 8003a10:	4603      	mov	r3, r0
 8003a12:	461a      	mov	r2, r3
 8003a14:	79fb      	ldrb	r3, [r7, #7]
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d000      	beq.n	8003a1c <Bluetooth_Connected_Debounce+0x40>
				break;
 8003a1a:	e007      	b.n	8003a2c <Bluetooth_Connected_Debounce+0x50>
			}
			if(i == BT_STAT_DEBOUNCE_SAMPLES){
 8003a1c:	797b      	ldrb	r3, [r7, #5]
 8003a1e:	2b0a      	cmp	r3, #10
 8003a20:	d101      	bne.n	8003a26 <Bluetooth_Connected_Debounce+0x4a>
				d = 1;
 8003a22:	2301      	movs	r3, #1
 8003a24:	71bb      	strb	r3, [r7, #6]
		while(i != BT_STAT_DEBOUNCE_SAMPLES){
 8003a26:	797b      	ldrb	r3, [r7, #5]
 8003a28:	2b0a      	cmp	r3, #10
 8003a2a:	d1e9      	bne.n	8003a00 <Bluetooth_Connected_Debounce+0x24>
	while(d != 1){
 8003a2c:	79bb      	ldrb	r3, [r7, #6]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d1dc      	bne.n	80039ec <Bluetooth_Connected_Debounce+0x10>
			}
		}
	}
	return level;
 8003a32:	79fb      	ldrb	r3, [r7, #7]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40010800 	.word	0x40010800

08003a40 <Bluetooth_Connected>:
uint8_t Bluetooth_Connected(){
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(BT_STAT_GPIO_Port, BT_STAT_Pin) == GPIO_PIN_SET){
 8003a44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a48:	4805      	ldr	r0, [pc, #20]	; (8003a60 <Bluetooth_Connected+0x20>)
 8003a4a:	f7fd fe4f 	bl	80016ec <HAL_GPIO_ReadPin>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d101      	bne.n	8003a58 <Bluetooth_Connected+0x18>
		return 1;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e000      	b.n	8003a5a <Bluetooth_Connected+0x1a>
	}
	return 0;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40010800 	.word	0x40010800

08003a64 <Bluetooth_SysTick>:
void Bluetooth_SysTick(){
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
	if(bluetooth_rx.receiving){
 8003a68:	4b08      	ldr	r3, [pc, #32]	; (8003a8c <Bluetooth_SysTick+0x28>)
 8003a6a:	789b      	ldrb	r3, [r3, #2]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00b      	beq.n	8003a88 <Bluetooth_SysTick+0x24>
		if(bluetooth_rx.receiving_ms < BLUETOOTH_RX_TIMEOUT_MS){
 8003a70:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <Bluetooth_SysTick+0x28>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b63      	cmp	r3, #99	; 0x63
 8003a76:	d805      	bhi.n	8003a84 <Bluetooth_SysTick+0x20>
			bluetooth_rx.receiving_ms++;
 8003a78:	4b04      	ldr	r3, [pc, #16]	; (8003a8c <Bluetooth_SysTick+0x28>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	4a03      	ldr	r2, [pc, #12]	; (8003a8c <Bluetooth_SysTick+0x28>)
 8003a80:	6053      	str	r3, [r2, #4]
		}else{
			Bluetooth_Listen();
		}
	}
}
 8003a82:	e001      	b.n	8003a88 <Bluetooth_SysTick+0x24>
			Bluetooth_Listen();
 8003a84:	f000 f882 	bl	8003b8c <Bluetooth_Listen>
}
 8003a88:	bf00      	nop
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	20000be8 	.word	0x20000be8

08003a90 <Bluetooth_Interrupt>:
void Bluetooth_Interrupt(){
 8003a90:	b590      	push	{r4, r7, lr}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
	uint8_t tmp;
	switch(bluetooth_rx.cnt){
 8003a96:	4b39      	ldr	r3, [pc, #228]	; (8003b7c <Bluetooth_Interrupt+0xec>)
 8003a98:	785b      	ldrb	r3, [r3, #1]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d056      	beq.n	8003b4c <Bluetooth_Interrupt+0xbc>
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	dc68      	bgt.n	8003b74 <Bluetooth_Interrupt+0xe4>
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <Bluetooth_Interrupt+0x1c>
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d019      	beq.n	8003ade <Bluetooth_Interrupt+0x4e>
			bluetooth_rx.cnt = bluetooth_rx.lengths[Bluetooth_Find_Rx_Length(bluetooth_rx.data[1])];
			bluetooth_rx.receiving = 0;
			bluetooth_rx.ready = 1;
		break;
	}
}
 8003aaa:	e063      	b.n	8003b74 <Bluetooth_Interrupt+0xe4>
			if(bluetooth_rx.data[0] == bluetooth_rx.command_symbol){
 8003aac:	4b33      	ldr	r3, [pc, #204]	; (8003b7c <Bluetooth_Interrupt+0xec>)
 8003aae:	7a1a      	ldrb	r2, [r3, #8]
 8003ab0:	4b32      	ldr	r3, [pc, #200]	; (8003b7c <Bluetooth_Interrupt+0xec>)
 8003ab2:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d10e      	bne.n	8003ad8 <Bluetooth_Interrupt+0x48>
				bluetooth_rx.cnt = 1;
 8003aba:	4b30      	ldr	r3, [pc, #192]	; (8003b7c <Bluetooth_Interrupt+0xec>)
 8003abc:	2201      	movs	r2, #1
 8003abe:	705a      	strb	r2, [r3, #1]
				bluetooth_rx.receiving_ms = 0;
 8003ac0:	4b2e      	ldr	r3, [pc, #184]	; (8003b7c <Bluetooth_Interrupt+0xec>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	605a      	str	r2, [r3, #4]
				bluetooth_rx.receiving = 1;
 8003ac6:	4b2d      	ldr	r3, [pc, #180]	; (8003b7c <Bluetooth_Interrupt+0xec>)
 8003ac8:	2201      	movs	r2, #1
 8003aca:	709a      	strb	r2, [r3, #2]
				HAL_UART_Receive_IT(&huart1, &bluetooth_rx.data[1], 1);
 8003acc:	2201      	movs	r2, #1
 8003ace:	492c      	ldr	r1, [pc, #176]	; (8003b80 <Bluetooth_Interrupt+0xf0>)
 8003ad0:	482c      	ldr	r0, [pc, #176]	; (8003b84 <Bluetooth_Interrupt+0xf4>)
 8003ad2:	f7ff f91a 	bl	8002d0a <HAL_UART_Receive_IT>
		break;
 8003ad6:	e04d      	b.n	8003b74 <Bluetooth_Interrupt+0xe4>
				Bluetooth_Listen();
 8003ad8:	f000 f858 	bl	8003b8c <Bluetooth_Listen>
		break;
 8003adc:	e04a      	b.n	8003b74 <Bluetooth_Interrupt+0xe4>
			tmp = Bluetooth_Find_Rx_Length(bluetooth_rx.data[1]);
 8003ade:	4b27      	ldr	r3, [pc, #156]	; (8003b7c <Bluetooth_Interrupt+0xec>)
 8003ae0:	7a5b      	ldrb	r3, [r3, #9]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7ff ff54 	bl	8003990 <Bluetooth_Find_Rx_Length>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	71fb      	strb	r3, [r7, #7]
			if(tmp != bluetooth_rx.commands){
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	4b22      	ldr	r3, [pc, #136]	; (8003b7c <Bluetooth_Interrupt+0xec>)
 8003af2:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d025      	beq.n	8003b46 <Bluetooth_Interrupt+0xb6>
				bluetooth_rx.cnt = 2;
 8003afa:	4b20      	ldr	r3, [pc, #128]	; (8003b7c <Bluetooth_Interrupt+0xec>)
 8003afc:	2202      	movs	r2, #2
 8003afe:	705a      	strb	r2, [r3, #1]
				if(bluetooth_rx.lengths[tmp] - bluetooth_rx.cnt){
 8003b00:	4b1e      	ldr	r3, [pc, #120]	; (8003b7c <Bluetooth_Interrupt+0xec>)
 8003b02:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8003b06:	79fb      	ldrb	r3, [r7, #7]
 8003b08:	4413      	add	r3, r2
 8003b0a:	781a      	ldrb	r2, [r3, #0]
 8003b0c:	4b1b      	ldr	r3, [pc, #108]	; (8003b7c <Bluetooth_Interrupt+0xec>)
 8003b0e:	785b      	ldrb	r3, [r3, #1]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d011      	beq.n	8003b38 <Bluetooth_Interrupt+0xa8>
					HAL_UART_Receive_DMA(&huart1, &bluetooth_rx.data[2], bluetooth_rx.lengths[tmp] - bluetooth_rx.cnt);
 8003b14:	4b19      	ldr	r3, [pc, #100]	; (8003b7c <Bluetooth_Interrupt+0xec>)
 8003b16:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8003b1a:	79fb      	ldrb	r3, [r7, #7]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	4b16      	ldr	r3, [pc, #88]	; (8003b7c <Bluetooth_Interrupt+0xec>)
 8003b24:	785b      	ldrb	r3, [r3, #1]
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	4916      	ldr	r1, [pc, #88]	; (8003b88 <Bluetooth_Interrupt+0xf8>)
 8003b30:	4814      	ldr	r0, [pc, #80]	; (8003b84 <Bluetooth_Interrupt+0xf4>)
 8003b32:	f7ff f91a 	bl	8002d6a <HAL_UART_Receive_DMA>
		break;
 8003b36:	e01d      	b.n	8003b74 <Bluetooth_Interrupt+0xe4>
					bluetooth_rx.receiving = 0;
 8003b38:	4b10      	ldr	r3, [pc, #64]	; (8003b7c <Bluetooth_Interrupt+0xec>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	709a      	strb	r2, [r3, #2]
					bluetooth_rx.ready = 1;
 8003b3e:	4b0f      	ldr	r3, [pc, #60]	; (8003b7c <Bluetooth_Interrupt+0xec>)
 8003b40:	2201      	movs	r2, #1
 8003b42:	701a      	strb	r2, [r3, #0]
		break;
 8003b44:	e016      	b.n	8003b74 <Bluetooth_Interrupt+0xe4>
				Bluetooth_Listen();
 8003b46:	f000 f821 	bl	8003b8c <Bluetooth_Listen>
		break;
 8003b4a:	e013      	b.n	8003b74 <Bluetooth_Interrupt+0xe4>
			bluetooth_rx.cnt = bluetooth_rx.lengths[Bluetooth_Find_Rx_Length(bluetooth_rx.data[1])];
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <Bluetooth_Interrupt+0xec>)
 8003b4e:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
 8003b52:	4b0a      	ldr	r3, [pc, #40]	; (8003b7c <Bluetooth_Interrupt+0xec>)
 8003b54:	7a5b      	ldrb	r3, [r3, #9]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff ff1a 	bl	8003990 <Bluetooth_Find_Rx_Length>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	4423      	add	r3, r4
 8003b60:	781a      	ldrb	r2, [r3, #0]
 8003b62:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <Bluetooth_Interrupt+0xec>)
 8003b64:	705a      	strb	r2, [r3, #1]
			bluetooth_rx.receiving = 0;
 8003b66:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <Bluetooth_Interrupt+0xec>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	709a      	strb	r2, [r3, #2]
			bluetooth_rx.ready = 1;
 8003b6c:	4b03      	ldr	r3, [pc, #12]	; (8003b7c <Bluetooth_Interrupt+0xec>)
 8003b6e:	2201      	movs	r2, #1
 8003b70:	701a      	strb	r2, [r3, #0]
		break;
 8003b72:	bf00      	nop
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd90      	pop	{r4, r7, pc}
 8003b7c:	20000be8 	.word	0x20000be8
 8003b80:	20000bf1 	.word	0x20000bf1
 8003b84:	20000eb8 	.word	0x20000eb8
 8003b88:	20000bf2 	.word	0x20000bf2

08003b8c <Bluetooth_Listen>:

void Bluetooth_Listen(){
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
	bluetooth_rx.ready = 0;
 8003b90:	4b0a      	ldr	r3, [pc, #40]	; (8003bbc <Bluetooth_Listen+0x30>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	701a      	strb	r2, [r3, #0]
	bluetooth_rx.cnt = 0;
 8003b96:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <Bluetooth_Listen+0x30>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	705a      	strb	r2, [r3, #1]
	bluetooth_rx.receiving = 0;
 8003b9c:	4b07      	ldr	r3, [pc, #28]	; (8003bbc <Bluetooth_Listen+0x30>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	709a      	strb	r2, [r3, #2]
	bluetooth_rx.receiving_ms = 0;
 8003ba2:	4b06      	ldr	r3, [pc, #24]	; (8003bbc <Bluetooth_Listen+0x30>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	605a      	str	r2, [r3, #4]
	HAL_UART_Abort(&huart1);
 8003ba8:	4805      	ldr	r0, [pc, #20]	; (8003bc0 <Bluetooth_Listen+0x34>)
 8003baa:	f7ff f90e 	bl	8002dca <HAL_UART_Abort>
	HAL_UART_Receive_IT(&huart1, &bluetooth_rx.data[0], 1);
 8003bae:	2201      	movs	r2, #1
 8003bb0:	4904      	ldr	r1, [pc, #16]	; (8003bc4 <Bluetooth_Listen+0x38>)
 8003bb2:	4803      	ldr	r0, [pc, #12]	; (8003bc0 <Bluetooth_Listen+0x34>)
 8003bb4:	f7ff f8a9 	bl	8002d0a <HAL_UART_Receive_IT>
}
 8003bb8:	bf00      	nop
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	20000be8 	.word	0x20000be8
 8003bc0:	20000eb8 	.word	0x20000eb8
 8003bc4:	20000bf0 	.word	0x20000bf0

08003bc8 <Bluetooth_Transmit>:
void Bluetooth_Transmit(uint8_t *data, uint16_t length){
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	807b      	strh	r3, [r7, #2]
	if(Bluetooth_Connected()){
 8003bd4:	f7ff ff34 	bl	8003a40 <Bluetooth_Connected>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d005      	beq.n	8003bea <Bluetooth_Transmit+0x22>
		HAL_UART_Transmit(&huart1, &data[0], length, BLUETOOTH_TX_TIMEOUT_MS);
 8003bde:	887a      	ldrh	r2, [r7, #2]
 8003be0:	2364      	movs	r3, #100	; 0x64
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	4803      	ldr	r0, [pc, #12]	; (8003bf4 <Bluetooth_Transmit+0x2c>)
 8003be6:	f7fe fffe 	bl	8002be6 <HAL_UART_Transmit>
	}
}
 8003bea:	bf00      	nop
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20000eb8 	.word	0x20000eb8

08003bf8 <Bluetooth_Rx_Data>:
uint8_t *Bluetooth_Rx_Data(){
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
	return (uint8_t *)&bluetooth_rx.data[0];
 8003bfc:	4b02      	ldr	r3, [pc, #8]	; (8003c08 <Bluetooth_Rx_Data+0x10>)
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bc80      	pop	{r7}
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	20000bf0 	.word	0x20000bf0

08003c0c <Bluetooth_Rx_Ready>:
uint8_t Bluetooth_Rx_Ready(){
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
	if(bluetooth_rx.ready){
 8003c10:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <Bluetooth_Rx_Ready+0x20>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d004      	beq.n	8003c22 <Bluetooth_Rx_Ready+0x16>
		bluetooth_rx.ready = 0;
 8003c18:	4b04      	ldr	r3, [pc, #16]	; (8003c2c <Bluetooth_Rx_Ready+0x20>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	701a      	strb	r2, [r3, #0]
		return 1;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <Bluetooth_Rx_Ready+0x18>
	}
	return 0;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr
 8003c2c:	20000be8 	.word	0x20000be8

08003c30 <Bluetooth_Init>:
void Bluetooth_Init(uint8_t command_symbol, uint8_t *symbols, uint8_t *lengths, uint16_t commands){
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	607a      	str	r2, [r7, #4]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	73fb      	strb	r3, [r7, #15]
 8003c40:	4613      	mov	r3, r2
 8003c42:	81bb      	strh	r3, [r7, #12]
	bluetooth_rx.command_symbol = command_symbol;
 8003c44:	4a0a      	ldr	r2, [pc, #40]	; (8003c70 <Bluetooth_Init+0x40>)
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
 8003c48:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
	bluetooth_rx.commands = commands;
 8003c4c:	4a08      	ldr	r2, [pc, #32]	; (8003c70 <Bluetooth_Init+0x40>)
 8003c4e:	89bb      	ldrh	r3, [r7, #12]
 8003c50:	f8a2 310a 	strh.w	r3, [r2, #266]	; 0x10a
	bluetooth_rx.symbols = symbols;
 8003c54:	4a06      	ldr	r2, [pc, #24]	; (8003c70 <Bluetooth_Init+0x40>)
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	bluetooth_rx.lengths = lengths;
 8003c5c:	4a04      	ldr	r2, [pc, #16]	; (8003c70 <Bluetooth_Init+0x40>)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
	Bluetooth_Listen();
 8003c64:	f7ff ff92 	bl	8003b8c <Bluetooth_Listen>
}
 8003c68:	bf00      	nop
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	20000be8 	.word	0x20000be8

08003c74 <Button_Interrupt>:
#include "main.h"
#include "button.h"

static uint8_t button_pressed = 0;

void Button_Interrupt(){
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
	button_pressed = 1;
 8003c78:	4b03      	ldr	r3, [pc, #12]	; (8003c88 <Button_Interrupt+0x14>)
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	701a      	strb	r2, [r3, #0]
}
 8003c7e:	bf00      	nop
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bc80      	pop	{r7}
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	20000cfc 	.word	0x20000cfc

08003c8c <Button_Debounce_Read>:
uint8_t Button_Debounce_Read(){
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
	uint8_t level;
	uint8_t d = 0;
 8003c92:	2300      	movs	r3, #0
 8003c94:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 8003c96:	2300      	movs	r3, #0
 8003c98:	717b      	strb	r3, [r7, #5]
	while(d != 1){
 8003c9a:	e01d      	b.n	8003cd8 <Button_Debounce_Read+0x4c>
		i = 0;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	717b      	strb	r3, [r7, #5]
		level = HAL_GPIO_ReadPin(BUTTON_RESET_GPIO_Port, BUTTON_RESET_Pin);
 8003ca0:	2108      	movs	r1, #8
 8003ca2:	4811      	ldr	r0, [pc, #68]	; (8003ce8 <Button_Debounce_Read+0x5c>)
 8003ca4:	f7fd fd22 	bl	80016ec <HAL_GPIO_ReadPin>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	71fb      	strb	r3, [r7, #7]
		while(i != BUTTON_DEBOUNCE_SAMPLES){
 8003cac:	e011      	b.n	8003cd2 <Button_Debounce_Read+0x46>
			i++;
 8003cae:	797b      	ldrb	r3, [r7, #5]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	717b      	strb	r3, [r7, #5]
			if(HAL_GPIO_ReadPin(BUTTON_RESET_GPIO_Port, BUTTON_RESET_Pin) != level){
 8003cb4:	2108      	movs	r1, #8
 8003cb6:	480c      	ldr	r0, [pc, #48]	; (8003ce8 <Button_Debounce_Read+0x5c>)
 8003cb8:	f7fd fd18 	bl	80016ec <HAL_GPIO_ReadPin>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	79fb      	ldrb	r3, [r7, #7]
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d000      	beq.n	8003cc8 <Button_Debounce_Read+0x3c>
				break;
 8003cc6:	e007      	b.n	8003cd8 <Button_Debounce_Read+0x4c>
			}
			if(i == BUTTON_DEBOUNCE_SAMPLES){
 8003cc8:	797b      	ldrb	r3, [r7, #5]
 8003cca:	2b0a      	cmp	r3, #10
 8003ccc:	d101      	bne.n	8003cd2 <Button_Debounce_Read+0x46>
				d = 1;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	71bb      	strb	r3, [r7, #6]
		while(i != BUTTON_DEBOUNCE_SAMPLES){
 8003cd2:	797b      	ldrb	r3, [r7, #5]
 8003cd4:	2b0a      	cmp	r3, #10
 8003cd6:	d1ea      	bne.n	8003cae <Button_Debounce_Read+0x22>
	while(d != 1){
 8003cd8:	79bb      	ldrb	r3, [r7, #6]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d1de      	bne.n	8003c9c <Button_Debounce_Read+0x10>
			}
		}
	}
	return level;
 8003cde:	79fb      	ldrb	r3, [r7, #7]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40010800 	.word	0x40010800

08003cec <Button_Pressed>:
uint8_t Button_Pressed(){
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
	uint8_t ret = button_pressed;
 8003cf2:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <Button_Pressed+0x20>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	71fb      	strb	r3, [r7, #7]
	button_pressed = 0;
 8003cf8:	4b04      	ldr	r3, [pc, #16]	; (8003d0c <Button_Pressed+0x20>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	701a      	strb	r2, [r3, #0]
	return ret;
 8003cfe:	79fb      	ldrb	r3, [r7, #7]
 8003d00:	4618      	mov	r0, r3
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	20000cfc 	.word	0x20000cfc

08003d10 <Flash_Read>:
#include "main.h"
#include "flash.h"

static FLASH_EraseInitTypeDef EraseInitStruct;

void Flash_Read(uint8_t *data, uint16_t length){
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	807b      	strh	r3, [r7, #2]
	uint16_t fpages = length/4;
 8003d1c:	887b      	ldrh	r3, [r7, #2]
 8003d1e:	089b      	lsrs	r3, r3, #2
 8003d20:	82bb      	strh	r3, [r7, #20]
	uint16_t lbytes = length-(fpages*4);
 8003d22:	8abb      	ldrh	r3, [r7, #20]
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	887a      	ldrh	r2, [r7, #2]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	827b      	strh	r3, [r7, #18]

	uint32_t tmp = 0;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60fb      	str	r3, [r7, #12]
	uint16_t i = 0;
 8003d32:	2300      	movs	r3, #0
 8003d34:	82fb      	strh	r3, [r7, #22]
	while(i!=(fpages*4)){
 8003d36:	e027      	b.n	8003d88 <Flash_Read+0x78>
		tmp = *(__IO uint32_t *)(0x0800C000+i);
 8003d38:	8afb      	ldrh	r3, [r7, #22]
 8003d3a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8003d3e:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60fb      	str	r3, [r7, #12]
		data[i] = (uint8_t)((uint32_t)tmp>>24);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	0e19      	lsrs	r1, r3, #24
 8003d4a:	8afb      	ldrh	r3, [r7, #22]
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	4413      	add	r3, r2
 8003d50:	b2ca      	uxtb	r2, r1
 8003d52:	701a      	strb	r2, [r3, #0]
		data[i+1] = (uint8_t)((uint32_t)tmp>>16);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	0c19      	lsrs	r1, r3, #16
 8003d58:	8afb      	ldrh	r3, [r7, #22]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	4413      	add	r3, r2
 8003d60:	b2ca      	uxtb	r2, r1
 8003d62:	701a      	strb	r2, [r3, #0]
		data[i+2] = (uint8_t)((uint32_t)tmp>>8);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	0a19      	lsrs	r1, r3, #8
 8003d68:	8afb      	ldrh	r3, [r7, #22]
 8003d6a:	3302      	adds	r3, #2
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	4413      	add	r3, r2
 8003d70:	b2ca      	uxtb	r2, r1
 8003d72:	701a      	strb	r2, [r3, #0]
		data[i+3] = (uint8_t)tmp;
 8003d74:	8afb      	ldrh	r3, [r7, #22]
 8003d76:	3303      	adds	r3, #3
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	701a      	strb	r2, [r3, #0]
		i += 4;
 8003d82:	8afb      	ldrh	r3, [r7, #22]
 8003d84:	3304      	adds	r3, #4
 8003d86:	82fb      	strh	r3, [r7, #22]
	while(i!=(fpages*4)){
 8003d88:	8afa      	ldrh	r2, [r7, #22]
 8003d8a:	8abb      	ldrh	r3, [r7, #20]
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d1d2      	bne.n	8003d38 <Flash_Read+0x28>
	}
	if(lbytes != 0){
 8003d92:	8a7b      	ldrh	r3, [r7, #18]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d03e      	beq.n	8003e16 <Flash_Read+0x106>
		tmp = *(__IO uint32_t *)(0x0800C000+i);
 8003d98:	8afb      	ldrh	r3, [r7, #22]
 8003d9a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8003d9e:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60fb      	str	r3, [r7, #12]
		if(lbytes == 3){
 8003da6:	8a7b      	ldrh	r3, [r7, #18]
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d117      	bne.n	8003ddc <Flash_Read+0xcc>
			data[i] = (uint8_t)((uint32_t)tmp>>24);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	0e19      	lsrs	r1, r3, #24
 8003db0:	8afb      	ldrh	r3, [r7, #22]
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	4413      	add	r3, r2
 8003db6:	b2ca      	uxtb	r2, r1
 8003db8:	701a      	strb	r2, [r3, #0]
			data[i+1] = (uint8_t)((uint32_t)tmp>>16);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	0c19      	lsrs	r1, r3, #16
 8003dbe:	8afb      	ldrh	r3, [r7, #22]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	b2ca      	uxtb	r2, r1
 8003dc8:	701a      	strb	r2, [r3, #0]
			data[i+2] = (uint8_t)((uint32_t)tmp>>8);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	0a19      	lsrs	r1, r3, #8
 8003dce:	8afb      	ldrh	r3, [r7, #22]
 8003dd0:	3302      	adds	r3, #2
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	b2ca      	uxtb	r2, r1
 8003dd8:	701a      	strb	r2, [r3, #0]
		}
		else if(lbytes == 1){
			data[i] = (uint8_t)((uint32_t)tmp>>24);
		}
	}
}
 8003dda:	e01c      	b.n	8003e16 <Flash_Read+0x106>
		else if(lbytes == 2){
 8003ddc:	8a7b      	ldrh	r3, [r7, #18]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d10f      	bne.n	8003e02 <Flash_Read+0xf2>
			data[i] = (uint8_t)((uint32_t)tmp>>24);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	0e19      	lsrs	r1, r3, #24
 8003de6:	8afb      	ldrh	r3, [r7, #22]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	4413      	add	r3, r2
 8003dec:	b2ca      	uxtb	r2, r1
 8003dee:	701a      	strb	r2, [r3, #0]
			data[i+1] = (uint8_t)((uint32_t)tmp>>16);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	0c19      	lsrs	r1, r3, #16
 8003df4:	8afb      	ldrh	r3, [r7, #22]
 8003df6:	3301      	adds	r3, #1
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	b2ca      	uxtb	r2, r1
 8003dfe:	701a      	strb	r2, [r3, #0]
}
 8003e00:	e009      	b.n	8003e16 <Flash_Read+0x106>
		else if(lbytes == 1){
 8003e02:	8a7b      	ldrh	r3, [r7, #18]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d106      	bne.n	8003e16 <Flash_Read+0x106>
			data[i] = (uint8_t)((uint32_t)tmp>>24);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	0e19      	lsrs	r1, r3, #24
 8003e0c:	8afb      	ldrh	r3, [r7, #22]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	4413      	add	r3, r2
 8003e12:	b2ca      	uxtb	r2, r1
 8003e14:	701a      	strb	r2, [r3, #0]
}
 8003e16:	bf00      	nop
 8003e18:	371c      	adds	r7, #28
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr

08003e20 <Flash_Write>:
uint32_t Flash_Write(uint8_t *data, uint16_t length){
 8003e20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003e24:	b086      	sub	sp, #24
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	807b      	strh	r3, [r7, #2]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8003e2e:	4b4e      	ldr	r3, [pc, #312]	; (8003f68 <Flash_Write+0x148>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = 0x0800C000;
 8003e34:	4b4c      	ldr	r3, [pc, #304]	; (8003f68 <Flash_Write+0x148>)
 8003e36:	4a4d      	ldr	r2, [pc, #308]	; (8003f6c <Flash_Write+0x14c>)
 8003e38:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages = 1;
 8003e3a:	4b4b      	ldr	r3, [pc, #300]	; (8003f68 <Flash_Write+0x148>)
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	60da      	str	r2, [r3, #12]
	uint32_t ErrorCode = 0;
 8003e40:	2300      	movs	r3, #0
 8003e42:	60bb      	str	r3, [r7, #8]
	HAL_FLASH_Unlock();
 8003e44:	f7fd f93e 	bl	80010c4 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInitStruct, &ErrorCode);
 8003e48:	f107 0308 	add.w	r3, r7, #8
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4846      	ldr	r0, [pc, #280]	; (8003f68 <Flash_Write+0x148>)
 8003e50:	f7fd fa20 	bl	8001294 <HAL_FLASHEx_Erase>

	uint16_t fpages = length/4;
 8003e54:	887b      	ldrh	r3, [r7, #2]
 8003e56:	089b      	lsrs	r3, r3, #2
 8003e58:	81fb      	strh	r3, [r7, #14]
	uint16_t lbytes = length-(fpages*4);
 8003e5a:	89fb      	ldrh	r3, [r7, #14]
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	887a      	ldrh	r2, [r7, #2]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	81bb      	strh	r3, [r7, #12]
	uint16_t i = 0;
 8003e66:	2300      	movs	r3, #0
 8003e68:	82fb      	strh	r3, [r7, #22]
	while(i != (fpages*4)){
 8003e6a:	e02a      	b.n	8003ec2 <Flash_Write+0xa2>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800C000+i, ((uint32_t)data[i]<<24)|((uint32_t)data[i+1]<<16)|((uint32_t)data[i+2]<<8)|(uint32_t)data[i+3]);
 8003e6c:	8afb      	ldrh	r3, [r7, #22]
 8003e6e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8003e72:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8003e76:	4618      	mov	r0, r3
 8003e78:	8afb      	ldrh	r3, [r7, #22]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	061a      	lsls	r2, r3, #24
 8003e82:	8afb      	ldrh	r3, [r7, #22]
 8003e84:	3301      	adds	r3, #1
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	440b      	add	r3, r1
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	041b      	lsls	r3, r3, #16
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	8afb      	ldrh	r3, [r7, #22]
 8003e92:	3302      	adds	r3, #2
 8003e94:	6879      	ldr	r1, [r7, #4]
 8003e96:	440b      	add	r3, r1
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	021b      	lsls	r3, r3, #8
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	8afa      	ldrh	r2, [r7, #22]
 8003ea0:	3203      	adds	r2, #3
 8003ea2:	6879      	ldr	r1, [r7, #4]
 8003ea4:	440a      	add	r2, r1
 8003ea6:	7812      	ldrb	r2, [r2, #0]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	2200      	movs	r2, #0
 8003eac:	4698      	mov	r8, r3
 8003eae:	4691      	mov	r9, r2
 8003eb0:	4642      	mov	r2, r8
 8003eb2:	464b      	mov	r3, r9
 8003eb4:	4601      	mov	r1, r0
 8003eb6:	2002      	movs	r0, #2
 8003eb8:	f7fd f894 	bl	8000fe4 <HAL_FLASH_Program>
		i+=4;
 8003ebc:	8afb      	ldrh	r3, [r7, #22]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	82fb      	strh	r3, [r7, #22]
	while(i != (fpages*4)){
 8003ec2:	8afa      	ldrh	r2, [r7, #22]
 8003ec4:	89fb      	ldrh	r3, [r7, #14]
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d1cf      	bne.n	8003e6c <Flash_Write+0x4c>
	}
	if(lbytes != 0){
 8003ecc:	89bb      	ldrh	r3, [r7, #12]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d042      	beq.n	8003f58 <Flash_Write+0x138>
		uint32_t wdata = 0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	613b      	str	r3, [r7, #16]
		if(lbytes == 3){
 8003ed6:	89bb      	ldrh	r3, [r7, #12]
 8003ed8:	2b03      	cmp	r3, #3
 8003eda:	d114      	bne.n	8003f06 <Flash_Write+0xe6>
			wdata = ((uint32_t)data[i]<<24)|((uint32_t)data[i+1]<<16)|((uint32_t)data[i+2]<<8);
 8003edc:	8afb      	ldrh	r3, [r7, #22]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	061a      	lsls	r2, r3, #24
 8003ee6:	8afb      	ldrh	r3, [r7, #22]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	440b      	add	r3, r1
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	041b      	lsls	r3, r3, #16
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	8afb      	ldrh	r3, [r7, #22]
 8003ef6:	3302      	adds	r3, #2
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	440b      	add	r3, r1
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	021b      	lsls	r3, r3, #8
 8003f00:	4313      	orrs	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
 8003f04:	e019      	b.n	8003f3a <Flash_Write+0x11a>
		}
		else if(lbytes == 2){
 8003f06:	89bb      	ldrh	r3, [r7, #12]
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d10d      	bne.n	8003f28 <Flash_Write+0x108>
			wdata = ((uint32_t)data[i]<<24)|((uint32_t)data[i+1]<<16);
 8003f0c:	8afb      	ldrh	r3, [r7, #22]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	4413      	add	r3, r2
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	061a      	lsls	r2, r3, #24
 8003f16:	8afb      	ldrh	r3, [r7, #22]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	440b      	add	r3, r1
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	041b      	lsls	r3, r3, #16
 8003f22:	4313      	orrs	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]
 8003f26:	e008      	b.n	8003f3a <Flash_Write+0x11a>
		}
		else if(lbytes == 1){
 8003f28:	89bb      	ldrh	r3, [r7, #12]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d105      	bne.n	8003f3a <Flash_Write+0x11a>
			wdata = ((uint32_t)data[i]<<24);
 8003f2e:	8afb      	ldrh	r3, [r7, #22]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	4413      	add	r3, r2
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	061b      	lsls	r3, r3, #24
 8003f38:	613b      	str	r3, [r7, #16]
		}
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800C000+i, wdata);
 8003f3a:	8afb      	ldrh	r3, [r7, #22]
 8003f3c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8003f40:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8003f44:	4619      	mov	r1, r3
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	461c      	mov	r4, r3
 8003f4c:	4615      	mov	r5, r2
 8003f4e:	4622      	mov	r2, r4
 8003f50:	462b      	mov	r3, r5
 8003f52:	2002      	movs	r0, #2
 8003f54:	f7fd f846 	bl	8000fe4 <HAL_FLASH_Program>
	}

	HAL_FLASH_Lock();
 8003f58:	f7fd f8da 	bl	8001110 <HAL_FLASH_Lock>
	return ErrorCode;
 8003f5c:	68bb      	ldr	r3, [r7, #8]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003f68:	20000d00 	.word	0x20000d00
 8003f6c:	0800c000 	.word	0x0800c000

08003f70 <Interrupts_SysTick>:
#include "button.h"
#include "bluetooth.h"
#include "../app.h"
#include "../animation.h"

void Interrupts_SysTick(){
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
	LED_Breath();
 8003f74:	f000 f832 	bl	8003fdc <LED_Breath>
	Bluetooth_SysTick();
 8003f78:	f7ff fd74 	bl	8003a64 <Bluetooth_SysTick>
	Animation_SysTick();
 8003f7c:	f000 fa72 	bl	8004464 <Animation_SysTick>
	App_SysTick();
 8003f80:	f000 fea2 	bl	8004cc8 <App_SysTick>
}
 8003f84:	bf00      	nop
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
		//!TBD
	}
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bc80      	pop	{r7}
 8003f98:	4770      	bx	lr
	...

08003f9c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a04      	ldr	r2, [pc, #16]	; (8003fbc <HAL_UART_RxCpltCallback+0x20>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d101      	bne.n	8003fb2 <HAL_UART_RxCpltCallback+0x16>
		Bluetooth_Interrupt();
 8003fae:	f7ff fd6f 	bl	8003a90 <Bluetooth_Interrupt>
	}
}
 8003fb2:	bf00      	nop
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	40013800 	.word	0x40013800

08003fc0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_RESET_Pin){
 8003fca:	88fb      	ldrh	r3, [r7, #6]
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d101      	bne.n	8003fd4 <HAL_GPIO_EXTI_Callback+0x14>
		Button_Interrupt();
 8003fd0:	f7ff fe50 	bl	8003c74 <Button_Interrupt>
	}
}
 8003fd4:	bf00      	nop
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <LED_Breath>:
	uint8_t brightness_rising_or_falling;
	uint8_t current_transition_sample;
	uint32_t passed_time_ms;
}led;

void LED_Breath(){
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
	if(led.enabled){
 8003fe2:	4b3d      	ldr	r3, [pc, #244]	; (80040d8 <LED_Breath+0xfc>)
 8003fe4:	785b      	ldrb	r3, [r3, #1]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d070      	beq.n	80040cc <LED_Breath+0xf0>
		//Total time for acceleration: (LED_MAX_SPEED - LED_NORMAL_SPEED) * LED_SPEED_UP_INTERVAL_MS, twice faster cool down
		//Calculate time passed since changing mode and LED "breathing" interval
		uint8_t delay = 0;
 8003fea:	2300      	movs	r3, #0
 8003fec:	71fb      	strb	r3, [r7, #7]
		switch(led.mode){
 8003fee:	4b3a      	ldr	r3, [pc, #232]	; (80040d8 <LED_Breath+0xfc>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d018      	beq.n	8004028 <LED_Breath+0x4c>
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	dc31      	bgt.n	800405e <LED_Breath+0x82>
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d029      	beq.n	8004052 <LED_Breath+0x76>
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d12d      	bne.n	800405e <LED_Breath+0x82>
			case LED_ACCELERATE:
				if(led.passed_time_ms > 0){
 8004002:	4b35      	ldr	r3, [pc, #212]	; (80040d8 <LED_Breath+0xfc>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d004      	beq.n	8004014 <LED_Breath+0x38>
					led.passed_time_ms--;
 800400a:	4b33      	ldr	r3, [pc, #204]	; (80040d8 <LED_Breath+0xfc>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	3b01      	subs	r3, #1
 8004010:	4a31      	ldr	r2, [pc, #196]	; (80040d8 <LED_Breath+0xfc>)
 8004012:	6093      	str	r3, [r2, #8]
				}
				delay = (led.passed_time_ms / LED_SPEED_UP_INTERVAL_MS) + LED_MAX_SPEED;
 8004014:	4b30      	ldr	r3, [pc, #192]	; (80040d8 <LED_Breath+0xfc>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	4a30      	ldr	r2, [pc, #192]	; (80040dc <LED_Breath+0x100>)
 800401a:	fba2 2303 	umull	r2, r3, r2, r3
 800401e:	0a1b      	lsrs	r3, r3, #8
 8004020:	b2db      	uxtb	r3, r3
 8004022:	3302      	adds	r3, #2
 8004024:	71fb      	strb	r3, [r7, #7]
			break;
 8004026:	e01a      	b.n	800405e <LED_Breath+0x82>
			case LED_COOL_DOWN:
				if(led.passed_time_ms < (LED_NORMAL_SPEED - LED_MAX_SPEED) * LED_COOL_DOWN_INTERVAL_MS){
 8004028:	4b2b      	ldr	r3, [pc, #172]	; (80040d8 <LED_Breath+0xfc>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f249 426f 	movw	r2, #37999	; 0x946f
 8004030:	4293      	cmp	r3, r2
 8004032:	d804      	bhi.n	800403e <LED_Breath+0x62>
					led.passed_time_ms++;
 8004034:	4b28      	ldr	r3, [pc, #160]	; (80040d8 <LED_Breath+0xfc>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	3301      	adds	r3, #1
 800403a:	4a27      	ldr	r2, [pc, #156]	; (80040d8 <LED_Breath+0xfc>)
 800403c:	6093      	str	r3, [r2, #8]
				}
				delay = (led.passed_time_ms / LED_COOL_DOWN_INTERVAL_MS) + LED_MAX_SPEED;
 800403e:	4b26      	ldr	r3, [pc, #152]	; (80040d8 <LED_Breath+0xfc>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	4a26      	ldr	r2, [pc, #152]	; (80040dc <LED_Breath+0x100>)
 8004044:	fba2 2303 	umull	r2, r3, r2, r3
 8004048:	09db      	lsrs	r3, r3, #7
 800404a:	b2db      	uxtb	r3, r3
 800404c:	3302      	adds	r3, #2
 800404e:	71fb      	strb	r3, [r7, #7]
			break;
 8004050:	e005      	b.n	800405e <LED_Breath+0x82>
			case LED_CONSTANT:
				led.passed_time_ms = LED_SPEED_UP_INTERVAL_MS * LED_NORMAL_SPEED;
 8004052:	4b21      	ldr	r3, [pc, #132]	; (80040d8 <LED_Breath+0xfc>)
 8004054:	4a22      	ldr	r2, [pc, #136]	; (80040e0 <LED_Breath+0x104>)
 8004056:	609a      	str	r2, [r3, #8]
				delay = LED_NORMAL_SPEED;
 8004058:	2315      	movs	r3, #21
 800405a:	71fb      	strb	r3, [r7, #7]
			break;
 800405c:	bf00      	nop
		}

		//Breath
		led.current_transition_sample++;
 800405e:	4b1e      	ldr	r3, [pc, #120]	; (80040d8 <LED_Breath+0xfc>)
 8004060:	791b      	ldrb	r3, [r3, #4]
 8004062:	3301      	adds	r3, #1
 8004064:	b2da      	uxtb	r2, r3
 8004066:	4b1c      	ldr	r3, [pc, #112]	; (80040d8 <LED_Breath+0xfc>)
 8004068:	711a      	strb	r2, [r3, #4]
		if(led.current_transition_sample >= delay){
 800406a:	4b1b      	ldr	r3, [pc, #108]	; (80040d8 <LED_Breath+0xfc>)
 800406c:	791b      	ldrb	r3, [r3, #4]
 800406e:	79fa      	ldrb	r2, [r7, #7]
 8004070:	429a      	cmp	r2, r3
 8004072:	d82b      	bhi.n	80040cc <LED_Breath+0xf0>
			led.current_transition_sample = 0;
 8004074:	4b18      	ldr	r3, [pc, #96]	; (80040d8 <LED_Breath+0xfc>)
 8004076:	2200      	movs	r2, #0
 8004078:	711a      	strb	r2, [r3, #4]

			if(led.brightness_rising_or_falling){
 800407a:	4b17      	ldr	r3, [pc, #92]	; (80040d8 <LED_Breath+0xfc>)
 800407c:	78db      	ldrb	r3, [r3, #3]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d011      	beq.n	80040a6 <LED_Breath+0xca>
				//If rising brightness
				if(led.brightness < htim2.Init.Period){
 8004082:	4b15      	ldr	r3, [pc, #84]	; (80040d8 <LED_Breath+0xfc>)
 8004084:	789b      	ldrb	r3, [r3, #2]
 8004086:	461a      	mov	r2, r3
 8004088:	4b16      	ldr	r3, [pc, #88]	; (80040e4 <LED_Breath+0x108>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	429a      	cmp	r2, r3
 800408e:	d206      	bcs.n	800409e <LED_Breath+0xc2>
					led.brightness++;
 8004090:	4b11      	ldr	r3, [pc, #68]	; (80040d8 <LED_Breath+0xfc>)
 8004092:	789b      	ldrb	r3, [r3, #2]
 8004094:	3301      	adds	r3, #1
 8004096:	b2da      	uxtb	r2, r3
 8004098:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <LED_Breath+0xfc>)
 800409a:	709a      	strb	r2, [r3, #2]
 800409c:	e011      	b.n	80040c2 <LED_Breath+0xe6>
				}else{
					led.brightness_rising_or_falling = 0;
 800409e:	4b0e      	ldr	r3, [pc, #56]	; (80040d8 <LED_Breath+0xfc>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	70da      	strb	r2, [r3, #3]
 80040a4:	e00d      	b.n	80040c2 <LED_Breath+0xe6>
				}
			}else{
				//If reducing brightness
				if(led.brightness > LED_MIN_BRIGHTNESS){
 80040a6:	4b0c      	ldr	r3, [pc, #48]	; (80040d8 <LED_Breath+0xfc>)
 80040a8:	789b      	ldrb	r3, [r3, #2]
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d906      	bls.n	80040bc <LED_Breath+0xe0>
					led.brightness--;
 80040ae:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <LED_Breath+0xfc>)
 80040b0:	789b      	ldrb	r3, [r3, #2]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	4b08      	ldr	r3, [pc, #32]	; (80040d8 <LED_Breath+0xfc>)
 80040b8:	709a      	strb	r2, [r3, #2]
 80040ba:	e002      	b.n	80040c2 <LED_Breath+0xe6>
				}else{
					led.brightness_rising_or_falling = 1;
 80040bc:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <LED_Breath+0xfc>)
 80040be:	2201      	movs	r2, #1
 80040c0:	70da      	strb	r2, [r3, #3]
				}
			}

			//Set brightness
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, led.brightness);
 80040c2:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <LED_Breath+0xfc>)
 80040c4:	789a      	ldrb	r2, [r3, #2]
 80040c6:	4b07      	ldr	r3, [pc, #28]	; (80040e4 <LED_Breath+0x108>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bc80      	pop	{r7}
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	20000d10 	.word	0x20000d10
 80040dc:	10624dd3 	.word	0x10624dd3
 80040e0:	00014820 	.word	0x00014820
 80040e4:	20000de0 	.word	0x20000de0

080040e8 <LED_Set_Mode>:
void LED_Set_Mode(uint8_t mode){
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	4603      	mov	r3, r0
 80040f0:	71fb      	strb	r3, [r7, #7]
	led.mode = mode;
 80040f2:	4a04      	ldr	r2, [pc, #16]	; (8004104 <LED_Set_Mode+0x1c>)
 80040f4:	79fb      	ldrb	r3, [r7, #7]
 80040f6:	7013      	strb	r3, [r2, #0]
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bc80      	pop	{r7}
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	20000d10 	.word	0x20000d10

08004108 <LED_Is_Enabled>:
uint8_t LED_Is_Enabled(){
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
	return led.enabled;
 800410c:	4b02      	ldr	r3, [pc, #8]	; (8004118 <LED_Is_Enabled+0x10>)
 800410e:	785b      	ldrb	r3, [r3, #1]
}
 8004110:	4618      	mov	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr
 8004118:	20000d10 	.word	0x20000d10

0800411c <LED_Enable>:
void LED_Enable(uint8_t enable){
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	4603      	mov	r3, r0
 8004124:	71fb      	strb	r3, [r7, #7]
	if(!enable){
 8004126:	79fb      	ldrb	r3, [r7, #7]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d103      	bne.n	8004134 <LED_Enable+0x18>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800412c:	4b05      	ldr	r3, [pc, #20]	; (8004144 <LED_Enable+0x28>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2200      	movs	r2, #0
 8004132:	639a      	str	r2, [r3, #56]	; 0x38
	}
	led.enabled = enable;
 8004134:	4a04      	ldr	r2, [pc, #16]	; (8004148 <LED_Enable+0x2c>)
 8004136:	79fb      	ldrb	r3, [r7, #7]
 8004138:	7053      	strb	r3, [r2, #1]
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr
 8004144:	20000de0 	.word	0x20000de0
 8004148:	20000d10 	.word	0x20000d10

0800414c <LED_Init>:
void LED_Init(){
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8004150:	2104      	movs	r1, #4
 8004152:	4802      	ldr	r0, [pc, #8]	; (800415c <LED_Init+0x10>)
 8004154:	f7fd ffd4 	bl	8002100 <HAL_TIM_PWM_Start>
}
 8004158:	bf00      	nop
 800415a:	bd80      	pop	{r7, pc}
 800415c:	20000de0 	.word	0x20000de0

08004160 <Servo_Calib_Data>:
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim4;

int8_t servo_calib[SERVO_COUNT];

int8_t *Servo_Calib_Data(){
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
	return (int8_t *)&servo_calib[0];
 8004164:	4b02      	ldr	r3, [pc, #8]	; (8004170 <Servo_Calib_Data+0x10>)
}
 8004166:	4618      	mov	r0, r3
 8004168:	46bd      	mov	sp, r7
 800416a:	bc80      	pop	{r7}
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	20000d1c 	.word	0x20000d1c

08004174 <Servo_Set_Calib>:
void Servo_Set_Calib(int8_t calib, uint8_t servo){
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	4603      	mov	r3, r0
 800417c:	460a      	mov	r2, r1
 800417e:	71fb      	strb	r3, [r7, #7]
 8004180:	4613      	mov	r3, r2
 8004182:	71bb      	strb	r3, [r7, #6]
	if(servo && (servo <= SERVO_COUNT)){
 8004184:	79bb      	ldrb	r3, [r7, #6]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d007      	beq.n	800419a <Servo_Set_Calib+0x26>
 800418a:	79bb      	ldrb	r3, [r7, #6]
 800418c:	2b08      	cmp	r3, #8
 800418e:	d804      	bhi.n	800419a <Servo_Set_Calib+0x26>
		servo_calib[servo - 1] = calib;
 8004190:	79bb      	ldrb	r3, [r7, #6]
 8004192:	3b01      	subs	r3, #1
 8004194:	4903      	ldr	r1, [pc, #12]	; (80041a4 <Servo_Set_Calib+0x30>)
 8004196:	79fa      	ldrb	r2, [r7, #7]
 8004198:	54ca      	strb	r2, [r1, r3]
	}
}
 800419a:	bf00      	nop
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	bc80      	pop	{r7}
 80041a2:	4770      	bx	lr
 80041a4:	20000d1c 	.word	0x20000d1c

080041a8 <Servo_Set>:
void Servo_Set(float *values){
 80041a8:	b590      	push	{r4, r7, lr}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, SERVO_MIN_PWM + (servo_calib[0] * SERVO_CALIBRATION_STEP_PWM) + (SERVO_STEP_PWM * values[0]));
 80041b0:	4b93      	ldr	r3, [pc, #588]	; (8004400 <Servo_Set+0x258>)
 80041b2:	f993 3000 	ldrsb.w	r3, [r3]
 80041b6:	461a      	mov	r2, r3
 80041b8:	4613      	mov	r3, r2
 80041ba:	011b      	lsls	r3, r3, #4
 80041bc:	1a9b      	subs	r3, r3, r2
 80041be:	f203 138b 	addw	r3, r3, #395	; 0x18b
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fc f87c 	bl	80002c0 <__aeabi_i2f>
 80041c8:	4604      	mov	r4, r0
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	498d      	ldr	r1, [pc, #564]	; (8004404 <Servo_Set+0x25c>)
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7fc f8c9 	bl	8000368 <__aeabi_fmul>
 80041d6:	4603      	mov	r3, r0
 80041d8:	4619      	mov	r1, r3
 80041da:	4620      	mov	r0, r4
 80041dc:	f7fb ffbc 	bl	8000158 <__addsf3>
 80041e0:	4603      	mov	r3, r0
 80041e2:	461a      	mov	r2, r3
 80041e4:	4b88      	ldr	r3, [pc, #544]	; (8004408 <Servo_Set+0x260>)
 80041e6:	681c      	ldr	r4, [r3, #0]
 80041e8:	4610      	mov	r0, r2
 80041ea:	f7fc fa83 	bl	80006f4 <__aeabi_f2uiz>
 80041ee:	4603      	mov	r3, r0
 80041f0:	6363      	str	r3, [r4, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, SERVO_MIN_PWM + (servo_calib[1] * SERVO_CALIBRATION_STEP_PWM) + (SERVO_STEP_PWM * (100-values[1])));
 80041f2:	4b83      	ldr	r3, [pc, #524]	; (8004400 <Servo_Set+0x258>)
 80041f4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80041f8:	461a      	mov	r2, r3
 80041fa:	4613      	mov	r3, r2
 80041fc:	011b      	lsls	r3, r3, #4
 80041fe:	1a9b      	subs	r3, r3, r2
 8004200:	f203 138b 	addw	r3, r3, #395	; 0x18b
 8004204:	4618      	mov	r0, r3
 8004206:	f7fc f85b 	bl	80002c0 <__aeabi_i2f>
 800420a:	4604      	mov	r4, r0
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3304      	adds	r3, #4
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4619      	mov	r1, r3
 8004214:	487d      	ldr	r0, [pc, #500]	; (800440c <Servo_Set+0x264>)
 8004216:	f7fb ff9d 	bl	8000154 <__aeabi_fsub>
 800421a:	4603      	mov	r3, r0
 800421c:	4979      	ldr	r1, [pc, #484]	; (8004404 <Servo_Set+0x25c>)
 800421e:	4618      	mov	r0, r3
 8004220:	f7fc f8a2 	bl	8000368 <__aeabi_fmul>
 8004224:	4603      	mov	r3, r0
 8004226:	4619      	mov	r1, r3
 8004228:	4620      	mov	r0, r4
 800422a:	f7fb ff95 	bl	8000158 <__addsf3>
 800422e:	4603      	mov	r3, r0
 8004230:	461a      	mov	r2, r3
 8004232:	4b75      	ldr	r3, [pc, #468]	; (8004408 <Servo_Set+0x260>)
 8004234:	681c      	ldr	r4, [r3, #0]
 8004236:	4610      	mov	r0, r2
 8004238:	f7fc fa5c 	bl	80006f4 <__aeabi_f2uiz>
 800423c:	4603      	mov	r3, r0
 800423e:	63a3      	str	r3, [r4, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, SERVO_MIN_PWM + (servo_calib[2] * SERVO_CALIBRATION_STEP_PWM) + (SERVO_STEP_PWM * values[2]));
 8004240:	4b6f      	ldr	r3, [pc, #444]	; (8004400 <Servo_Set+0x258>)
 8004242:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004246:	461a      	mov	r2, r3
 8004248:	4613      	mov	r3, r2
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	1a9b      	subs	r3, r3, r2
 800424e:	f203 138b 	addw	r3, r3, #395	; 0x18b
 8004252:	4618      	mov	r0, r3
 8004254:	f7fc f834 	bl	80002c0 <__aeabi_i2f>
 8004258:	4604      	mov	r4, r0
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3308      	adds	r3, #8
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4968      	ldr	r1, [pc, #416]	; (8004404 <Servo_Set+0x25c>)
 8004262:	4618      	mov	r0, r3
 8004264:	f7fc f880 	bl	8000368 <__aeabi_fmul>
 8004268:	4603      	mov	r3, r0
 800426a:	4619      	mov	r1, r3
 800426c:	4620      	mov	r0, r4
 800426e:	f7fb ff73 	bl	8000158 <__addsf3>
 8004272:	4603      	mov	r3, r0
 8004274:	461a      	mov	r2, r3
 8004276:	4b64      	ldr	r3, [pc, #400]	; (8004408 <Servo_Set+0x260>)
 8004278:	681c      	ldr	r4, [r3, #0]
 800427a:	4610      	mov	r0, r2
 800427c:	f7fc fa3a 	bl	80006f4 <__aeabi_f2uiz>
 8004280:	4603      	mov	r3, r0
 8004282:	63e3      	str	r3, [r4, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, SERVO_MIN_PWM + (servo_calib[3] * SERVO_CALIBRATION_STEP_PWM) + (SERVO_STEP_PWM * (100-values[3])));
 8004284:	4b5e      	ldr	r3, [pc, #376]	; (8004400 <Servo_Set+0x258>)
 8004286:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800428a:	461a      	mov	r2, r3
 800428c:	4613      	mov	r3, r2
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	1a9b      	subs	r3, r3, r2
 8004292:	f203 138b 	addw	r3, r3, #395	; 0x18b
 8004296:	4618      	mov	r0, r3
 8004298:	f7fc f812 	bl	80002c0 <__aeabi_i2f>
 800429c:	4604      	mov	r4, r0
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	330c      	adds	r3, #12
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4619      	mov	r1, r3
 80042a6:	4859      	ldr	r0, [pc, #356]	; (800440c <Servo_Set+0x264>)
 80042a8:	f7fb ff54 	bl	8000154 <__aeabi_fsub>
 80042ac:	4603      	mov	r3, r0
 80042ae:	4955      	ldr	r1, [pc, #340]	; (8004404 <Servo_Set+0x25c>)
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fc f859 	bl	8000368 <__aeabi_fmul>
 80042b6:	4603      	mov	r3, r0
 80042b8:	4619      	mov	r1, r3
 80042ba:	4620      	mov	r0, r4
 80042bc:	f7fb ff4c 	bl	8000158 <__addsf3>
 80042c0:	4603      	mov	r3, r0
 80042c2:	461a      	mov	r2, r3
 80042c4:	4b50      	ldr	r3, [pc, #320]	; (8004408 <Servo_Set+0x260>)
 80042c6:	681c      	ldr	r4, [r3, #0]
 80042c8:	4610      	mov	r0, r2
 80042ca:	f7fc fa13 	bl	80006f4 <__aeabi_f2uiz>
 80042ce:	4603      	mov	r3, r0
 80042d0:	6423      	str	r3, [r4, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, SERVO_MIN_PWM + (servo_calib[4] * SERVO_CALIBRATION_STEP_PWM) + (SERVO_STEP_PWM * values[4]));
 80042d2:	4b4b      	ldr	r3, [pc, #300]	; (8004400 <Servo_Set+0x258>)
 80042d4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80042d8:	461a      	mov	r2, r3
 80042da:	4613      	mov	r3, r2
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	1a9b      	subs	r3, r3, r2
 80042e0:	f203 138b 	addw	r3, r3, #395	; 0x18b
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7fb ffeb 	bl	80002c0 <__aeabi_i2f>
 80042ea:	4604      	mov	r4, r0
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3310      	adds	r3, #16
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4944      	ldr	r1, [pc, #272]	; (8004404 <Servo_Set+0x25c>)
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fc f837 	bl	8000368 <__aeabi_fmul>
 80042fa:	4603      	mov	r3, r0
 80042fc:	4619      	mov	r1, r3
 80042fe:	4620      	mov	r0, r4
 8004300:	f7fb ff2a 	bl	8000158 <__addsf3>
 8004304:	4603      	mov	r3, r0
 8004306:	461a      	mov	r2, r3
 8004308:	4b41      	ldr	r3, [pc, #260]	; (8004410 <Servo_Set+0x268>)
 800430a:	681c      	ldr	r4, [r3, #0]
 800430c:	4610      	mov	r0, r2
 800430e:	f7fc f9f1 	bl	80006f4 <__aeabi_f2uiz>
 8004312:	4603      	mov	r3, r0
 8004314:	6363      	str	r3, [r4, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, SERVO_MIN_PWM + (servo_calib[5] * SERVO_CALIBRATION_STEP_PWM) + (SERVO_STEP_PWM * (100-values[5])));
 8004316:	4b3a      	ldr	r3, [pc, #232]	; (8004400 <Servo_Set+0x258>)
 8004318:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800431c:	461a      	mov	r2, r3
 800431e:	4613      	mov	r3, r2
 8004320:	011b      	lsls	r3, r3, #4
 8004322:	1a9b      	subs	r3, r3, r2
 8004324:	f203 138b 	addw	r3, r3, #395	; 0x18b
 8004328:	4618      	mov	r0, r3
 800432a:	f7fb ffc9 	bl	80002c0 <__aeabi_i2f>
 800432e:	4604      	mov	r4, r0
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3314      	adds	r3, #20
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4619      	mov	r1, r3
 8004338:	4834      	ldr	r0, [pc, #208]	; (800440c <Servo_Set+0x264>)
 800433a:	f7fb ff0b 	bl	8000154 <__aeabi_fsub>
 800433e:	4603      	mov	r3, r0
 8004340:	4930      	ldr	r1, [pc, #192]	; (8004404 <Servo_Set+0x25c>)
 8004342:	4618      	mov	r0, r3
 8004344:	f7fc f810 	bl	8000368 <__aeabi_fmul>
 8004348:	4603      	mov	r3, r0
 800434a:	4619      	mov	r1, r3
 800434c:	4620      	mov	r0, r4
 800434e:	f7fb ff03 	bl	8000158 <__addsf3>
 8004352:	4603      	mov	r3, r0
 8004354:	461a      	mov	r2, r3
 8004356:	4b2e      	ldr	r3, [pc, #184]	; (8004410 <Servo_Set+0x268>)
 8004358:	681c      	ldr	r4, [r3, #0]
 800435a:	4610      	mov	r0, r2
 800435c:	f7fc f9ca 	bl	80006f4 <__aeabi_f2uiz>
 8004360:	4603      	mov	r3, r0
 8004362:	63a3      	str	r3, [r4, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, SERVO_MIN_PWM + (servo_calib[6] * SERVO_CALIBRATION_STEP_PWM) + (SERVO_STEP_PWM * values[6]));
 8004364:	4b26      	ldr	r3, [pc, #152]	; (8004400 <Servo_Set+0x258>)
 8004366:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800436a:	461a      	mov	r2, r3
 800436c:	4613      	mov	r3, r2
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	1a9b      	subs	r3, r3, r2
 8004372:	f203 138b 	addw	r3, r3, #395	; 0x18b
 8004376:	4618      	mov	r0, r3
 8004378:	f7fb ffa2 	bl	80002c0 <__aeabi_i2f>
 800437c:	4604      	mov	r4, r0
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3318      	adds	r3, #24
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	491f      	ldr	r1, [pc, #124]	; (8004404 <Servo_Set+0x25c>)
 8004386:	4618      	mov	r0, r3
 8004388:	f7fb ffee 	bl	8000368 <__aeabi_fmul>
 800438c:	4603      	mov	r3, r0
 800438e:	4619      	mov	r1, r3
 8004390:	4620      	mov	r0, r4
 8004392:	f7fb fee1 	bl	8000158 <__addsf3>
 8004396:	4603      	mov	r3, r0
 8004398:	461a      	mov	r2, r3
 800439a:	4b1d      	ldr	r3, [pc, #116]	; (8004410 <Servo_Set+0x268>)
 800439c:	681c      	ldr	r4, [r3, #0]
 800439e:	4610      	mov	r0, r2
 80043a0:	f7fc f9a8 	bl	80006f4 <__aeabi_f2uiz>
 80043a4:	4603      	mov	r3, r0
 80043a6:	63e3      	str	r3, [r4, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, SERVO_MIN_PWM + (servo_calib[7] * SERVO_CALIBRATION_STEP_PWM) + (SERVO_STEP_PWM * (100-values[7])));
 80043a8:	4b15      	ldr	r3, [pc, #84]	; (8004400 <Servo_Set+0x258>)
 80043aa:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80043ae:	461a      	mov	r2, r3
 80043b0:	4613      	mov	r3, r2
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	1a9b      	subs	r3, r3, r2
 80043b6:	f203 138b 	addw	r3, r3, #395	; 0x18b
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fb ff80 	bl	80002c0 <__aeabi_i2f>
 80043c0:	4604      	mov	r4, r0
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	331c      	adds	r3, #28
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4619      	mov	r1, r3
 80043ca:	4810      	ldr	r0, [pc, #64]	; (800440c <Servo_Set+0x264>)
 80043cc:	f7fb fec2 	bl	8000154 <__aeabi_fsub>
 80043d0:	4603      	mov	r3, r0
 80043d2:	490c      	ldr	r1, [pc, #48]	; (8004404 <Servo_Set+0x25c>)
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7fb ffc7 	bl	8000368 <__aeabi_fmul>
 80043da:	4603      	mov	r3, r0
 80043dc:	4619      	mov	r1, r3
 80043de:	4620      	mov	r0, r4
 80043e0:	f7fb feba 	bl	8000158 <__addsf3>
 80043e4:	4603      	mov	r3, r0
 80043e6:	461a      	mov	r2, r3
 80043e8:	4b09      	ldr	r3, [pc, #36]	; (8004410 <Servo_Set+0x268>)
 80043ea:	681c      	ldr	r4, [r3, #0]
 80043ec:	4610      	mov	r0, r2
 80043ee:	f7fc f981 	bl	80006f4 <__aeabi_f2uiz>
 80043f2:	4603      	mov	r3, r0
 80043f4:	6423      	str	r3, [r4, #64]	; 0x40
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd90      	pop	{r4, r7, pc}
 80043fe:	bf00      	nop
 8004400:	20000d1c 	.word	0x20000d1c
 8004404:	41bb3333 	.word	0x41bb3333
 8004408:	20000e28 	.word	0x20000e28
 800440c:	42c80000 	.word	0x42c80000
 8004410:	20000e70 	.word	0x20000e70

08004414 <Servo_Init>:
void Servo_Init(){
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004418:	2100      	movs	r1, #0
 800441a:	4810      	ldr	r0, [pc, #64]	; (800445c <Servo_Init+0x48>)
 800441c:	f7fd fe70 	bl	8002100 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8004420:	2104      	movs	r1, #4
 8004422:	480e      	ldr	r0, [pc, #56]	; (800445c <Servo_Init+0x48>)
 8004424:	f7fd fe6c 	bl	8002100 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8004428:	2108      	movs	r1, #8
 800442a:	480c      	ldr	r0, [pc, #48]	; (800445c <Servo_Init+0x48>)
 800442c:	f7fd fe68 	bl	8002100 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8004430:	210c      	movs	r1, #12
 8004432:	480a      	ldr	r0, [pc, #40]	; (800445c <Servo_Init+0x48>)
 8004434:	f7fd fe64 	bl	8002100 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8004438:	2100      	movs	r1, #0
 800443a:	4809      	ldr	r0, [pc, #36]	; (8004460 <Servo_Init+0x4c>)
 800443c:	f7fd fe60 	bl	8002100 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8004440:	2104      	movs	r1, #4
 8004442:	4807      	ldr	r0, [pc, #28]	; (8004460 <Servo_Init+0x4c>)
 8004444:	f7fd fe5c 	bl	8002100 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004448:	2108      	movs	r1, #8
 800444a:	4805      	ldr	r0, [pc, #20]	; (8004460 <Servo_Init+0x4c>)
 800444c:	f7fd fe58 	bl	8002100 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004450:	210c      	movs	r1, #12
 8004452:	4803      	ldr	r0, [pc, #12]	; (8004460 <Servo_Init+0x4c>)
 8004454:	f7fd fe54 	bl	8002100 <HAL_TIM_PWM_Start>
}
 8004458:	bf00      	nop
 800445a:	bd80      	pop	{r7, pc}
 800445c:	20000e28 	.word	0x20000e28
 8004460:	20000e70 	.word	0x20000e70

08004464 <Animation_SysTick>:
	uint8_t loop_en;
	float max_substep;
	float frame_delay;
}animation;

void Animation_SysTick(){
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
	if(Animation_Is_Playing()){
 8004468:	f000 f8a2 	bl	80045b0 <Animation_Is_Playing>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d004      	beq.n	800447c <Animation_SysTick+0x18>
		animation.c_frame_delay++;
 8004472:	4b03      	ldr	r3, [pc, #12]	; (8004480 <Animation_SysTick+0x1c>)
 8004474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004476:	3301      	adds	r3, #1
 8004478:	4a01      	ldr	r2, [pc, #4]	; (8004480 <Animation_SysTick+0x1c>)
 800447a:	6313      	str	r3, [r2, #48]	; 0x30
	}
}
 800447c:	bf00      	nop
 800447e:	bd80      	pop	{r7, pc}
 8004480:	20000d24 	.word	0x20000d24

08004484 <Animation_Save_Current_Pose>:
void Animation_Save_Current_Pose(float *to){
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
	memcpy(&to[0], &animation.c_data[0], SERVO_COUNT * sizeof(float));
 800448c:	2220      	movs	r2, #32
 800448e:	4904      	ldr	r1, [pc, #16]	; (80044a0 <Animation_Save_Current_Pose+0x1c>)
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f002 faa1 	bl	80069d8 <memcpy>
}
 8004496:	bf00      	nop
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	20000d28 	.word	0x20000d28

080044a4 <Animation_Set_Kick>:
void Animation_Set_Kick(uint8_t direction, uint8_t strength){
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	4603      	mov	r3, r0
 80044ac:	460a      	mov	r2, r1
 80044ae:	71fb      	strb	r3, [r7, #7]
 80044b0:	4613      	mov	r3, r2
 80044b2:	71bb      	strb	r3, [r7, #6]
	animation.c_kick_strength = strength;
 80044b4:	4a15      	ldr	r2, [pc, #84]	; (800450c <Animation_Set_Kick+0x68>)
 80044b6:	79bb      	ldrb	r3, [r7, #6]
 80044b8:	7013      	strb	r3, [r2, #0]
	///Precalculate pose
	//Strength
	anim_data_kick.data[SERVO_COUNT + 4] = ANIM_DATA_KICK_STRENGTH_SERVO_MIN + (((ANIM_DATA_KICK_STRENGTH_SERVO_MAX - ANIM_DATA_KICK_STRENGTH_SERVO_MIN) / ANIM_DATA_KICK_STRENGTH_MAX) * animation.c_kick_strength);
 80044ba:	4b14      	ldr	r3, [pc, #80]	; (800450c <Animation_Set_Kick+0x68>)
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fb fefe 	bl	80002c0 <__aeabi_i2f>
 80044c4:	4603      	mov	r3, r0
 80044c6:	4912      	ldr	r1, [pc, #72]	; (8004510 <Animation_Set_Kick+0x6c>)
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7fb ff4d 	bl	8000368 <__aeabi_fmul>
 80044ce:	4603      	mov	r3, r0
 80044d0:	4910      	ldr	r1, [pc, #64]	; (8004514 <Animation_Set_Kick+0x70>)
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fb fe40 	bl	8000158 <__addsf3>
 80044d8:	4603      	mov	r3, r0
 80044da:	461a      	mov	r2, r3
 80044dc:	4b0e      	ldr	r3, [pc, #56]	; (8004518 <Animation_Set_Kick+0x74>)
 80044de:	641a      	str	r2, [r3, #64]	; 0x40
	//Direction
	anim_data_kick.data[SERVO_COUNT + 5] = (((ANIM_DATA_KICK_DIRECTION_SERVO_MAX - ANIM_DATA_KICK_DIRECTION_SERVO_MIN) / (float)ANIM_DATA_KICK_DIRECTION_MAX) * direction) + ANIM_DATA_KICK_DIRECTION_SERVO_MIN;
 80044e0:	79fb      	ldrb	r3, [r7, #7]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fb feec 	bl	80002c0 <__aeabi_i2f>
 80044e8:	4603      	mov	r3, r0
 80044ea:	490c      	ldr	r1, [pc, #48]	; (800451c <Animation_Set_Kick+0x78>)
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7fb ff3b 	bl	8000368 <__aeabi_fmul>
 80044f2:	4603      	mov	r3, r0
 80044f4:	490a      	ldr	r1, [pc, #40]	; (8004520 <Animation_Set_Kick+0x7c>)
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fb fe2e 	bl	8000158 <__addsf3>
 80044fc:	4603      	mov	r3, r0
 80044fe:	461a      	mov	r2, r3
 8004500:	4b05      	ldr	r3, [pc, #20]	; (8004518 <Animation_Set_Kick+0x74>)
 8004502:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004504:	bf00      	nop
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	20000d24 	.word	0x20000d24
 8004510:	3f6ccccd 	.word	0x3f6ccccd
 8004514:	41a00000 	.word	0x41a00000
 8004518:	20000008 	.word	0x20000008
 800451c:	3f1c71c7 	.word	0x3f1c71c7
 8004520:	41c80000 	.word	0x41c80000

08004524 <Animation_Kick>:
void Animation_Kick(){
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
	//Precalculate kick
	anim_data_kick.data[SERVO_COUNT + 4] = ANIM_DATA_KICK_STRENGTH_SERVO_MIN + (((ANIM_DATA_KICK_STRENGTH_SERVO_MAX - ANIM_DATA_KICK_STRENGTH_SERVO_MIN) / ANIM_DATA_KICK_STRENGTH_MAX) * (ANIM_DATA_KICK_STRENGTH_MAX - animation.c_kick_strength));
 8004528:	4b10      	ldr	r3, [pc, #64]	; (800456c <Animation_Kick+0x48>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8004530:	4618      	mov	r0, r3
 8004532:	f7fb fec5 	bl	80002c0 <__aeabi_i2f>
 8004536:	4603      	mov	r3, r0
 8004538:	490d      	ldr	r1, [pc, #52]	; (8004570 <Animation_Kick+0x4c>)
 800453a:	4618      	mov	r0, r3
 800453c:	f7fb ff14 	bl	8000368 <__aeabi_fmul>
 8004540:	4603      	mov	r3, r0
 8004542:	490c      	ldr	r1, [pc, #48]	; (8004574 <Animation_Kick+0x50>)
 8004544:	4618      	mov	r0, r3
 8004546:	f7fb fe07 	bl	8000158 <__addsf3>
 800454a:	4603      	mov	r3, r0
 800454c:	461a      	mov	r2, r3
 800454e:	4b0a      	ldr	r3, [pc, #40]	; (8004578 <Animation_Kick+0x54>)
 8004550:	641a      	str	r2, [r3, #64]	; 0x40
	//Kick
	Servo_Set((float *)&anim_data_kick.data[SERVO_COUNT]);
 8004552:	480a      	ldr	r0, [pc, #40]	; (800457c <Animation_Kick+0x58>)
 8004554:	f7ff fe28 	bl	80041a8 <Servo_Set>
	HAL_Delay(ANIM_DATA_KICK_DELAY_MS);
 8004558:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800455c:	f7fc f94c 	bl	80007f8 <HAL_Delay>
	//Return to standby pose
	Servo_Set((float *)&anim_data_standby[0]);
 8004560:	4807      	ldr	r0, [pc, #28]	; (8004580 <Animation_Kick+0x5c>)
 8004562:	f7ff fe21 	bl	80041a8 <Servo_Set>
}
 8004566:	bf00      	nop
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20000d24 	.word	0x20000d24
 8004570:	3f6ccccd 	.word	0x3f6ccccd
 8004574:	41a00000 	.word	0x41a00000
 8004578:	20000008 	.word	0x20000008
 800457c:	20000038 	.word	0x20000038
 8004580:	08006dac 	.word	0x08006dac

08004584 <Animation_Set_Drive>:

void Animation_Set_Drive(uint8_t direction, uint8_t speed){
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	4603      	mov	r3, r0
 800458c:	460a      	mov	r2, r1
 800458e:	71fb      	strb	r3, [r7, #7]
 8004590:	4613      	mov	r3, r2
 8004592:	71bb      	strb	r3, [r7, #6]
	animation.c_drive_dir = direction;
 8004594:	4a05      	ldr	r2, [pc, #20]	; (80045ac <Animation_Set_Drive+0x28>)
 8004596:	79fb      	ldrb	r3, [r7, #7]
 8004598:	7053      	strb	r3, [r2, #1]
	animation.c_drive_speed = speed;
 800459a:	4a04      	ldr	r2, [pc, #16]	; (80045ac <Animation_Set_Drive+0x28>)
 800459c:	79bb      	ldrb	r3, [r7, #6]
 800459e:	7093      	strb	r3, [r2, #2]
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bc80      	pop	{r7}
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	20000d24 	.word	0x20000d24

080045b0 <Animation_Is_Playing>:

uint8_t Animation_Is_Playing(){
 80045b0:	b480      	push	{r7}
 80045b2:	af00      	add	r7, sp, #0
	if(animation.poses){
 80045b4:	4b05      	ldr	r3, [pc, #20]	; (80045cc <Animation_Is_Playing+0x1c>)
 80045b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <Animation_Is_Playing+0x10>
		return 1;
 80045bc:	2301      	movs	r3, #1
 80045be:	e000      	b.n	80045c2 <Animation_Is_Playing+0x12>
	}
	return 0;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bc80      	pop	{r7}
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	20000d24 	.word	0x20000d24

080045d0 <Animation_Set>:
void Animation_Set(anim_data_t *anim_data){
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
	animation.c_pose_n = 0;
 80045d8:	4b11      	ldr	r3, [pc, #68]	; (8004620 <Animation_Set+0x50>)
 80045da:	2200      	movs	r2, #0
 80045dc:	625a      	str	r2, [r3, #36]	; 0x24
	animation.c_step_n = 0;
 80045de:	4b10      	ldr	r3, [pc, #64]	; (8004620 <Animation_Set+0x50>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	62da      	str	r2, [r3, #44]	; 0x2c

	animation.data = &anim_data->data[0];
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3310      	adds	r3, #16
 80045e8:	4a0d      	ldr	r2, [pc, #52]	; (8004620 <Animation_Set+0x50>)
 80045ea:	6353      	str	r3, [r2, #52]	; 0x34
	animation.poses = anim_data->poses;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a0b      	ldr	r2, [pc, #44]	; (8004620 <Animation_Set+0x50>)
 80045f2:	6393      	str	r3, [r2, #56]	; 0x38
	animation.loop_en = anim_data->loop;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	791a      	ldrb	r2, [r3, #4]
 80045f8:	4b09      	ldr	r3, [pc, #36]	; (8004620 <Animation_Set+0x50>)
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	animation.max_substep = anim_data->max_substep;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	4a07      	ldr	r2, [pc, #28]	; (8004620 <Animation_Set+0x50>)
 8004604:	6413      	str	r3, [r2, #64]	; 0x40
	animation.frame_delay = anim_data->frame_delay;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	4618      	mov	r0, r3
 800460c:	f7fb fe54 	bl	80002b8 <__aeabi_ui2f>
 8004610:	4603      	mov	r3, r0
 8004612:	4a03      	ldr	r2, [pc, #12]	; (8004620 <Animation_Set+0x50>)
 8004614:	6453      	str	r3, [r2, #68]	; 0x44
}
 8004616:	bf00      	nop
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	20000d24 	.word	0x20000d24

08004624 <Animation_Stop>:
void Animation_Stop(){
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
	animation.poses = 0;
 8004628:	4b09      	ldr	r3, [pc, #36]	; (8004650 <Animation_Stop+0x2c>)
 800462a:	2200      	movs	r2, #0
 800462c:	639a      	str	r2, [r3, #56]	; 0x38
	animation.loop_en = 0;
 800462e:	4b08      	ldr	r3, [pc, #32]	; (8004650 <Animation_Stop+0x2c>)
 8004630:	2200      	movs	r2, #0
 8004632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	animation.c_pose_n = 0;
 8004636:	4b06      	ldr	r3, [pc, #24]	; (8004650 <Animation_Stop+0x2c>)
 8004638:	2200      	movs	r2, #0
 800463a:	625a      	str	r2, [r3, #36]	; 0x24
	animation.c_step_n = 0;
 800463c:	4b04      	ldr	r3, [pc, #16]	; (8004650 <Animation_Stop+0x2c>)
 800463e:	2200      	movs	r2, #0
 8004640:	62da      	str	r2, [r3, #44]	; 0x2c
	animation.c_frame_delay = 0;
 8004642:	4b03      	ldr	r3, [pc, #12]	; (8004650 <Animation_Stop+0x2c>)
 8004644:	2200      	movs	r2, #0
 8004646:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004648:	bf00      	nop
 800464a:	46bd      	mov	sp, r7
 800464c:	bc80      	pop	{r7}
 800464e:	4770      	bx	lr
 8004650:	20000d24 	.word	0x20000d24

08004654 <Animation_Play_Frame>:
void Animation_Play_Frame(){
 8004654:	b5b0      	push	{r4, r5, r7, lr}
 8004656:	b088      	sub	sp, #32
 8004658:	af00      	add	r7, sp, #0
	//Precalculations before first step of pose transition
	if(!animation.c_step_n){
 800465a:	4b95      	ldr	r3, [pc, #596]	; (80048b0 <Animation_Play_Frame+0x25c>)
 800465c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465e:	2b00      	cmp	r3, #0
 8004660:	f040 81dc 	bne.w	8004a1c <Animation_Play_Frame+0x3c8>
		///Drive
		if((uint32_t)animation.data == (uint32_t)&anim_data_drive.data){
 8004664:	4b92      	ldr	r3, [pc, #584]	; (80048b0 <Animation_Play_Frame+0x25c>)
 8004666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004668:	461a      	mov	r2, r3
 800466a:	4b92      	ldr	r3, [pc, #584]	; (80048b4 <Animation_Play_Frame+0x260>)
 800466c:	429a      	cmp	r2, r3
 800466e:	f040 81d5 	bne.w	8004a1c <Animation_Play_Frame+0x3c8>
			/*
				Direction 0-180, speed 0-80. Servos 1,2,5,6
			*/
			//Scale speed
			animation.max_substep = (((ANIM_DATA_DRIVE_SUBSTEP_MAX - ANIM_DATA_DRIVE_SUBSTEP_MIN) / (float)ANIM_DATA_DRIVE_SPEED_MAX) * animation.c_drive_speed) + ANIM_DATA_DRIVE_SUBSTEP_MIN;
 8004672:	4b8f      	ldr	r3, [pc, #572]	; (80048b0 <Animation_Play_Frame+0x25c>)
 8004674:	789b      	ldrb	r3, [r3, #2]
 8004676:	4618      	mov	r0, r3
 8004678:	f7fb fe22 	bl	80002c0 <__aeabi_i2f>
 800467c:	4603      	mov	r3, r0
 800467e:	498e      	ldr	r1, [pc, #568]	; (80048b8 <Animation_Play_Frame+0x264>)
 8004680:	4618      	mov	r0, r3
 8004682:	f7fb fe71 	bl	8000368 <__aeabi_fmul>
 8004686:	4603      	mov	r3, r0
 8004688:	498c      	ldr	r1, [pc, #560]	; (80048bc <Animation_Play_Frame+0x268>)
 800468a:	4618      	mov	r0, r3
 800468c:	f7fb fd64 	bl	8000158 <__addsf3>
 8004690:	4603      	mov	r3, r0
 8004692:	461a      	mov	r2, r3
 8004694:	4b86      	ldr	r3, [pc, #536]	; (80048b0 <Animation_Play_Frame+0x25c>)
 8004696:	641a      	str	r2, [r3, #64]	; 0x40

			//2*80 by this value should be decreased every servo, pointing to center
			float scale = (((float)ANIM_DATA_FW_BW_3_H_BW - (float)ANIM_DATA_FW_BW_3_H_FW) / (2 * (float)ANIM_DATA_DRIVE_SPEED_MAX)) * ((float)ANIM_DATA_DRIVE_SPEED_MAX - animation.c_drive_speed);
 8004698:	4b85      	ldr	r3, [pc, #532]	; (80048b0 <Animation_Play_Frame+0x25c>)
 800469a:	789b      	ldrb	r3, [r3, #2]
 800469c:	4618      	mov	r0, r3
 800469e:	f7fb fe0f 	bl	80002c0 <__aeabi_i2f>
 80046a2:	4603      	mov	r3, r0
 80046a4:	4619      	mov	r1, r3
 80046a6:	4886      	ldr	r0, [pc, #536]	; (80048c0 <Animation_Play_Frame+0x26c>)
 80046a8:	f7fb fd54 	bl	8000154 <__aeabi_fsub>
 80046ac:	4603      	mov	r3, r0
 80046ae:	4985      	ldr	r1, [pc, #532]	; (80048c4 <Animation_Play_Frame+0x270>)
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7fb fe59 	bl	8000368 <__aeabi_fmul>
 80046b6:	4603      	mov	r3, r0
 80046b8:	613b      	str	r3, [r7, #16]
			anim_data_drive.data[1] = anim_data_forward_3.data[1] - scale;
 80046ba:	4b83      	ldr	r3, [pc, #524]	; (80048c8 <Animation_Play_Frame+0x274>)
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	6939      	ldr	r1, [r7, #16]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fb fd47 	bl	8000154 <__aeabi_fsub>
 80046c6:	4603      	mov	r3, r0
 80046c8:	461a      	mov	r2, r3
 80046ca:	4b80      	ldr	r3, [pc, #512]	; (80048cc <Animation_Play_Frame+0x278>)
 80046cc:	615a      	str	r2, [r3, #20]
			anim_data_drive.data[2] = anim_data_forward_3.data[2] - scale;
 80046ce:	4b7e      	ldr	r3, [pc, #504]	; (80048c8 <Animation_Play_Frame+0x274>)
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	6939      	ldr	r1, [r7, #16]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7fb fd3d 	bl	8000154 <__aeabi_fsub>
 80046da:	4603      	mov	r3, r0
 80046dc:	461a      	mov	r2, r3
 80046de:	4b7b      	ldr	r3, [pc, #492]	; (80048cc <Animation_Play_Frame+0x278>)
 80046e0:	619a      	str	r2, [r3, #24]
			anim_data_drive.data[5] = anim_data_forward_3.data[5] + scale;
 80046e2:	4b79      	ldr	r3, [pc, #484]	; (80048c8 <Animation_Play_Frame+0x274>)
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	6939      	ldr	r1, [r7, #16]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7fb fd35 	bl	8000158 <__addsf3>
 80046ee:	4603      	mov	r3, r0
 80046f0:	461a      	mov	r2, r3
 80046f2:	4b76      	ldr	r3, [pc, #472]	; (80048cc <Animation_Play_Frame+0x278>)
 80046f4:	625a      	str	r2, [r3, #36]	; 0x24
			anim_data_drive.data[6] = anim_data_forward_3.data[6] + scale;
 80046f6:	4b74      	ldr	r3, [pc, #464]	; (80048c8 <Animation_Play_Frame+0x274>)
 80046f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fa:	6939      	ldr	r1, [r7, #16]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7fb fd2b 	bl	8000158 <__addsf3>
 8004702:	4603      	mov	r3, r0
 8004704:	461a      	mov	r2, r3
 8004706:	4b71      	ldr	r3, [pc, #452]	; (80048cc <Animation_Play_Frame+0x278>)
 8004708:	629a      	str	r2, [r3, #40]	; 0x28

			anim_data_drive.data[9] = anim_data_forward_3.data[9] + scale;
 800470a:	4b6f      	ldr	r3, [pc, #444]	; (80048c8 <Animation_Play_Frame+0x274>)
 800470c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800470e:	6939      	ldr	r1, [r7, #16]
 8004710:	4618      	mov	r0, r3
 8004712:	f7fb fd21 	bl	8000158 <__addsf3>
 8004716:	4603      	mov	r3, r0
 8004718:	461a      	mov	r2, r3
 800471a:	4b6c      	ldr	r3, [pc, #432]	; (80048cc <Animation_Play_Frame+0x278>)
 800471c:	635a      	str	r2, [r3, #52]	; 0x34
			anim_data_drive.data[10] = anim_data_forward_3.data[10] + scale;
 800471e:	4b6a      	ldr	r3, [pc, #424]	; (80048c8 <Animation_Play_Frame+0x274>)
 8004720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004722:	6939      	ldr	r1, [r7, #16]
 8004724:	4618      	mov	r0, r3
 8004726:	f7fb fd17 	bl	8000158 <__addsf3>
 800472a:	4603      	mov	r3, r0
 800472c:	461a      	mov	r2, r3
 800472e:	4b67      	ldr	r3, [pc, #412]	; (80048cc <Animation_Play_Frame+0x278>)
 8004730:	639a      	str	r2, [r3, #56]	; 0x38
			anim_data_drive.data[13] = anim_data_forward_3.data[13] - scale;
 8004732:	4b65      	ldr	r3, [pc, #404]	; (80048c8 <Animation_Play_Frame+0x274>)
 8004734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004736:	6939      	ldr	r1, [r7, #16]
 8004738:	4618      	mov	r0, r3
 800473a:	f7fb fd0b 	bl	8000154 <__aeabi_fsub>
 800473e:	4603      	mov	r3, r0
 8004740:	461a      	mov	r2, r3
 8004742:	4b62      	ldr	r3, [pc, #392]	; (80048cc <Animation_Play_Frame+0x278>)
 8004744:	645a      	str	r2, [r3, #68]	; 0x44
			anim_data_drive.data[14] = anim_data_forward_3.data[14] - scale;
 8004746:	4b60      	ldr	r3, [pc, #384]	; (80048c8 <Animation_Play_Frame+0x274>)
 8004748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800474a:	6939      	ldr	r1, [r7, #16]
 800474c:	4618      	mov	r0, r3
 800474e:	f7fb fd01 	bl	8000154 <__aeabi_fsub>
 8004752:	4603      	mov	r3, r0
 8004754:	461a      	mov	r2, r3
 8004756:	4b5d      	ldr	r3, [pc, #372]	; (80048cc <Animation_Play_Frame+0x278>)
 8004758:	649a      	str	r2, [r3, #72]	; 0x48

			anim_data_drive.data[17] = anim_data_forward_3.data[17] + scale;
 800475a:	4b5b      	ldr	r3, [pc, #364]	; (80048c8 <Animation_Play_Frame+0x274>)
 800475c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475e:	6939      	ldr	r1, [r7, #16]
 8004760:	4618      	mov	r0, r3
 8004762:	f7fb fcf9 	bl	8000158 <__addsf3>
 8004766:	4603      	mov	r3, r0
 8004768:	461a      	mov	r2, r3
 800476a:	4b58      	ldr	r3, [pc, #352]	; (80048cc <Animation_Play_Frame+0x278>)
 800476c:	655a      	str	r2, [r3, #84]	; 0x54
			anim_data_drive.data[18] = anim_data_forward_3.data[18] + scale;
 800476e:	4b56      	ldr	r3, [pc, #344]	; (80048c8 <Animation_Play_Frame+0x274>)
 8004770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004772:	6939      	ldr	r1, [r7, #16]
 8004774:	4618      	mov	r0, r3
 8004776:	f7fb fcef 	bl	8000158 <__addsf3>
 800477a:	4603      	mov	r3, r0
 800477c:	461a      	mov	r2, r3
 800477e:	4b53      	ldr	r3, [pc, #332]	; (80048cc <Animation_Play_Frame+0x278>)
 8004780:	659a      	str	r2, [r3, #88]	; 0x58
			anim_data_drive.data[21] = anim_data_forward_3.data[21] - scale;
 8004782:	4b51      	ldr	r3, [pc, #324]	; (80048c8 <Animation_Play_Frame+0x274>)
 8004784:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004786:	6939      	ldr	r1, [r7, #16]
 8004788:	4618      	mov	r0, r3
 800478a:	f7fb fce3 	bl	8000154 <__aeabi_fsub>
 800478e:	4603      	mov	r3, r0
 8004790:	461a      	mov	r2, r3
 8004792:	4b4e      	ldr	r3, [pc, #312]	; (80048cc <Animation_Play_Frame+0x278>)
 8004794:	665a      	str	r2, [r3, #100]	; 0x64
			anim_data_drive.data[22] = anim_data_forward_3.data[22] - scale;
 8004796:	4b4c      	ldr	r3, [pc, #304]	; (80048c8 <Animation_Play_Frame+0x274>)
 8004798:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800479a:	6939      	ldr	r1, [r7, #16]
 800479c:	4618      	mov	r0, r3
 800479e:	f7fb fcd9 	bl	8000154 <__aeabi_fsub>
 80047a2:	4603      	mov	r3, r0
 80047a4:	461a      	mov	r2, r3
 80047a6:	4b49      	ldr	r3, [pc, #292]	; (80048cc <Animation_Play_Frame+0x278>)
 80047a8:	669a      	str	r2, [r3, #104]	; 0x68

			anim_data_drive.data[25] = anim_data_forward_3.data[25] - scale;
 80047aa:	4b47      	ldr	r3, [pc, #284]	; (80048c8 <Animation_Play_Frame+0x274>)
 80047ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ae:	6939      	ldr	r1, [r7, #16]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7fb fccf 	bl	8000154 <__aeabi_fsub>
 80047b6:	4603      	mov	r3, r0
 80047b8:	461a      	mov	r2, r3
 80047ba:	4b44      	ldr	r3, [pc, #272]	; (80048cc <Animation_Play_Frame+0x278>)
 80047bc:	675a      	str	r2, [r3, #116]	; 0x74
			anim_data_drive.data[26] = anim_data_forward_3.data[26] - scale;
 80047be:	4b42      	ldr	r3, [pc, #264]	; (80048c8 <Animation_Play_Frame+0x274>)
 80047c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047c2:	6939      	ldr	r1, [r7, #16]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fb fcc5 	bl	8000154 <__aeabi_fsub>
 80047ca:	4603      	mov	r3, r0
 80047cc:	461a      	mov	r2, r3
 80047ce:	4b3f      	ldr	r3, [pc, #252]	; (80048cc <Animation_Play_Frame+0x278>)
 80047d0:	679a      	str	r2, [r3, #120]	; 0x78
			anim_data_drive.data[29] = anim_data_forward_3.data[29] + scale;
 80047d2:	4b3d      	ldr	r3, [pc, #244]	; (80048c8 <Animation_Play_Frame+0x274>)
 80047d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047d8:	6939      	ldr	r1, [r7, #16]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fb fcbc 	bl	8000158 <__addsf3>
 80047e0:	4603      	mov	r3, r0
 80047e2:	461a      	mov	r2, r3
 80047e4:	4b39      	ldr	r3, [pc, #228]	; (80048cc <Animation_Play_Frame+0x278>)
 80047e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			anim_data_drive.data[30] = anim_data_forward_3.data[30] + scale;
 80047ea:	4b37      	ldr	r3, [pc, #220]	; (80048c8 <Animation_Play_Frame+0x274>)
 80047ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f0:	6939      	ldr	r1, [r7, #16]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fb fcb0 	bl	8000158 <__addsf3>
 80047f8:	4603      	mov	r3, r0
 80047fa:	461a      	mov	r2, r3
 80047fc:	4b33      	ldr	r3, [pc, #204]	; (80048cc <Animation_Play_Frame+0x278>)
 80047fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

			//Proportionally decrease apporiate side
			float directional_scale = 0;
 8004802:	f04f 0300 	mov.w	r3, #0
 8004806:	60fb      	str	r3, [r7, #12]
			float directional_scale_max = ((ANIM_DATA_FW_BW_3_H_BW - scale) - (ANIM_DATA_FW_BW_3_H_FW + scale)) / 2.0f;
 8004808:	6939      	ldr	r1, [r7, #16]
 800480a:	4831      	ldr	r0, [pc, #196]	; (80048d0 <Animation_Play_Frame+0x27c>)
 800480c:	f7fb fca2 	bl	8000154 <__aeabi_fsub>
 8004810:	4603      	mov	r3, r0
 8004812:	461c      	mov	r4, r3
 8004814:	492f      	ldr	r1, [pc, #188]	; (80048d4 <Animation_Play_Frame+0x280>)
 8004816:	6938      	ldr	r0, [r7, #16]
 8004818:	f7fb fc9e 	bl	8000158 <__addsf3>
 800481c:	4603      	mov	r3, r0
 800481e:	4619      	mov	r1, r3
 8004820:	4620      	mov	r0, r4
 8004822:	f7fb fc97 	bl	8000154 <__aeabi_fsub>
 8004826:	4603      	mov	r3, r0
 8004828:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800482c:	4618      	mov	r0, r3
 800482e:	f7fb fe4f 	bl	80004d0 <__aeabi_fdiv>
 8004832:	4603      	mov	r3, r0
 8004834:	60bb      	str	r3, [r7, #8]
			if(animation.c_drive_dir < (ANIM_DATA_DRIVE_DIRECTION_MAX / 2)){
 8004836:	4b1e      	ldr	r3, [pc, #120]	; (80048b0 <Animation_Play_Frame+0x25c>)
 8004838:	785b      	ldrb	r3, [r3, #1]
 800483a:	2b59      	cmp	r3, #89	; 0x59
 800483c:	d87f      	bhi.n	800493e <Animation_Play_Frame+0x2ea>
				directional_scale = (directional_scale_max/90.0f) * (90.0f - animation.c_drive_dir);
 800483e:	4926      	ldr	r1, [pc, #152]	; (80048d8 <Animation_Play_Frame+0x284>)
 8004840:	68b8      	ldr	r0, [r7, #8]
 8004842:	f7fb fe45 	bl	80004d0 <__aeabi_fdiv>
 8004846:	4603      	mov	r3, r0
 8004848:	461c      	mov	r4, r3
 800484a:	4b19      	ldr	r3, [pc, #100]	; (80048b0 <Animation_Play_Frame+0x25c>)
 800484c:	785b      	ldrb	r3, [r3, #1]
 800484e:	4618      	mov	r0, r3
 8004850:	f7fb fd36 	bl	80002c0 <__aeabi_i2f>
 8004854:	4603      	mov	r3, r0
 8004856:	4619      	mov	r1, r3
 8004858:	481f      	ldr	r0, [pc, #124]	; (80048d8 <Animation_Play_Frame+0x284>)
 800485a:	f7fb fc7b 	bl	8000154 <__aeabi_fsub>
 800485e:	4603      	mov	r3, r0
 8004860:	4619      	mov	r1, r3
 8004862:	4620      	mov	r0, r4
 8004864:	f7fb fd80 	bl	8000368 <__aeabi_fmul>
 8004868:	4603      	mov	r3, r0
 800486a:	60fb      	str	r3, [r7, #12]
				anim_data_drive.data[1] -= directional_scale;
 800486c:	4b17      	ldr	r3, [pc, #92]	; (80048cc <Animation_Play_Frame+0x278>)
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	68f9      	ldr	r1, [r7, #12]
 8004872:	4618      	mov	r0, r3
 8004874:	f7fb fc6e 	bl	8000154 <__aeabi_fsub>
 8004878:	4603      	mov	r3, r0
 800487a:	461a      	mov	r2, r3
 800487c:	4b13      	ldr	r3, [pc, #76]	; (80048cc <Animation_Play_Frame+0x278>)
 800487e:	615a      	str	r2, [r3, #20]
				anim_data_drive.data[2] -= directional_scale;
 8004880:	4b12      	ldr	r3, [pc, #72]	; (80048cc <Animation_Play_Frame+0x278>)
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	68f9      	ldr	r1, [r7, #12]
 8004886:	4618      	mov	r0, r3
 8004888:	f7fb fc64 	bl	8000154 <__aeabi_fsub>
 800488c:	4603      	mov	r3, r0
 800488e:	461a      	mov	r2, r3
 8004890:	4b0e      	ldr	r3, [pc, #56]	; (80048cc <Animation_Play_Frame+0x278>)
 8004892:	619a      	str	r2, [r3, #24]

				anim_data_drive.data[9] += directional_scale;
 8004894:	4b0d      	ldr	r3, [pc, #52]	; (80048cc <Animation_Play_Frame+0x278>)
 8004896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004898:	68f9      	ldr	r1, [r7, #12]
 800489a:	4618      	mov	r0, r3
 800489c:	f7fb fc5c 	bl	8000158 <__addsf3>
 80048a0:	4603      	mov	r3, r0
 80048a2:	461a      	mov	r2, r3
 80048a4:	4b09      	ldr	r3, [pc, #36]	; (80048cc <Animation_Play_Frame+0x278>)
 80048a6:	635a      	str	r2, [r3, #52]	; 0x34
				anim_data_drive.data[10] += directional_scale;
 80048a8:	4b08      	ldr	r3, [pc, #32]	; (80048cc <Animation_Play_Frame+0x278>)
 80048aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ac:	e016      	b.n	80048dc <Animation_Play_Frame+0x288>
 80048ae:	bf00      	nop
 80048b0:	20000d24 	.word	0x20000d24
 80048b4:	200002b8 	.word	0x200002b8
 80048b8:	3b75c290 	.word	0x3b75c290
 80048bc:	3e4ccccd 	.word	0x3e4ccccd
 80048c0:	42a00000 	.word	0x42a00000
 80048c4:	3e6ccccd 	.word	0x3e6ccccd
 80048c8:	08006f0c 	.word	0x08006f0c
 80048cc:	200002a8 	.word	0x200002a8
 80048d0:	425c0000 	.word	0x425c0000
 80048d4:	41900000 	.word	0x41900000
 80048d8:	42b40000 	.word	0x42b40000
 80048dc:	68f9      	ldr	r1, [r7, #12]
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fb fc3a 	bl	8000158 <__addsf3>
 80048e4:	4603      	mov	r3, r0
 80048e6:	461a      	mov	r2, r3
 80048e8:	4b8d      	ldr	r3, [pc, #564]	; (8004b20 <Animation_Play_Frame+0x4cc>)
 80048ea:	639a      	str	r2, [r3, #56]	; 0x38

				anim_data_drive.data[17] += directional_scale;
 80048ec:	4b8c      	ldr	r3, [pc, #560]	; (8004b20 <Animation_Play_Frame+0x4cc>)
 80048ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f0:	68f9      	ldr	r1, [r7, #12]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fb fc30 	bl	8000158 <__addsf3>
 80048f8:	4603      	mov	r3, r0
 80048fa:	461a      	mov	r2, r3
 80048fc:	4b88      	ldr	r3, [pc, #544]	; (8004b20 <Animation_Play_Frame+0x4cc>)
 80048fe:	655a      	str	r2, [r3, #84]	; 0x54
				anim_data_drive.data[18] += directional_scale;
 8004900:	4b87      	ldr	r3, [pc, #540]	; (8004b20 <Animation_Play_Frame+0x4cc>)
 8004902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004904:	68f9      	ldr	r1, [r7, #12]
 8004906:	4618      	mov	r0, r3
 8004908:	f7fb fc26 	bl	8000158 <__addsf3>
 800490c:	4603      	mov	r3, r0
 800490e:	461a      	mov	r2, r3
 8004910:	4b83      	ldr	r3, [pc, #524]	; (8004b20 <Animation_Play_Frame+0x4cc>)
 8004912:	659a      	str	r2, [r3, #88]	; 0x58

				anim_data_drive.data[25] -= directional_scale;
 8004914:	4b82      	ldr	r3, [pc, #520]	; (8004b20 <Animation_Play_Frame+0x4cc>)
 8004916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004918:	68f9      	ldr	r1, [r7, #12]
 800491a:	4618      	mov	r0, r3
 800491c:	f7fb fc1a 	bl	8000154 <__aeabi_fsub>
 8004920:	4603      	mov	r3, r0
 8004922:	461a      	mov	r2, r3
 8004924:	4b7e      	ldr	r3, [pc, #504]	; (8004b20 <Animation_Play_Frame+0x4cc>)
 8004926:	675a      	str	r2, [r3, #116]	; 0x74
				anim_data_drive.data[26] -= directional_scale;
 8004928:	4b7d      	ldr	r3, [pc, #500]	; (8004b20 <Animation_Play_Frame+0x4cc>)
 800492a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800492c:	68f9      	ldr	r1, [r7, #12]
 800492e:	4618      	mov	r0, r3
 8004930:	f7fb fc10 	bl	8000154 <__aeabi_fsub>
 8004934:	4603      	mov	r3, r0
 8004936:	461a      	mov	r2, r3
 8004938:	4b79      	ldr	r3, [pc, #484]	; (8004b20 <Animation_Play_Frame+0x4cc>)
 800493a:	679a      	str	r2, [r3, #120]	; 0x78
 800493c:	e06e      	b.n	8004a1c <Animation_Play_Frame+0x3c8>

			}else if(animation.c_drive_dir > (ANIM_DATA_DRIVE_DIRECTION_MAX / 2)){
 800493e:	4b79      	ldr	r3, [pc, #484]	; (8004b24 <Animation_Play_Frame+0x4d0>)
 8004940:	785b      	ldrb	r3, [r3, #1]
 8004942:	2b5a      	cmp	r3, #90	; 0x5a
 8004944:	d96a      	bls.n	8004a1c <Animation_Play_Frame+0x3c8>
				directional_scale = (directional_scale_max/90.0f) * (animation.c_drive_dir - 90.0f);
 8004946:	4978      	ldr	r1, [pc, #480]	; (8004b28 <Animation_Play_Frame+0x4d4>)
 8004948:	68b8      	ldr	r0, [r7, #8]
 800494a:	f7fb fdc1 	bl	80004d0 <__aeabi_fdiv>
 800494e:	4603      	mov	r3, r0
 8004950:	461c      	mov	r4, r3
 8004952:	4b74      	ldr	r3, [pc, #464]	; (8004b24 <Animation_Play_Frame+0x4d0>)
 8004954:	785b      	ldrb	r3, [r3, #1]
 8004956:	4618      	mov	r0, r3
 8004958:	f7fb fcb2 	bl	80002c0 <__aeabi_i2f>
 800495c:	4603      	mov	r3, r0
 800495e:	4972      	ldr	r1, [pc, #456]	; (8004b28 <Animation_Play_Frame+0x4d4>)
 8004960:	4618      	mov	r0, r3
 8004962:	f7fb fbf7 	bl	8000154 <__aeabi_fsub>
 8004966:	4603      	mov	r3, r0
 8004968:	4619      	mov	r1, r3
 800496a:	4620      	mov	r0, r4
 800496c:	f7fb fcfc 	bl	8000368 <__aeabi_fmul>
 8004970:	4603      	mov	r3, r0
 8004972:	60fb      	str	r3, [r7, #12]
				anim_data_drive.data[5] += directional_scale;
 8004974:	4b6a      	ldr	r3, [pc, #424]	; (8004b20 <Animation_Play_Frame+0x4cc>)
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	68f9      	ldr	r1, [r7, #12]
 800497a:	4618      	mov	r0, r3
 800497c:	f7fb fbec 	bl	8000158 <__addsf3>
 8004980:	4603      	mov	r3, r0
 8004982:	461a      	mov	r2, r3
 8004984:	4b66      	ldr	r3, [pc, #408]	; (8004b20 <Animation_Play_Frame+0x4cc>)
 8004986:	625a      	str	r2, [r3, #36]	; 0x24
				anim_data_drive.data[6] += directional_scale;
 8004988:	4b65      	ldr	r3, [pc, #404]	; (8004b20 <Animation_Play_Frame+0x4cc>)
 800498a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498c:	68f9      	ldr	r1, [r7, #12]
 800498e:	4618      	mov	r0, r3
 8004990:	f7fb fbe2 	bl	8000158 <__addsf3>
 8004994:	4603      	mov	r3, r0
 8004996:	461a      	mov	r2, r3
 8004998:	4b61      	ldr	r3, [pc, #388]	; (8004b20 <Animation_Play_Frame+0x4cc>)
 800499a:	629a      	str	r2, [r3, #40]	; 0x28

				anim_data_drive.data[13] -= directional_scale;
 800499c:	4b60      	ldr	r3, [pc, #384]	; (8004b20 <Animation_Play_Frame+0x4cc>)
 800499e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a0:	68f9      	ldr	r1, [r7, #12]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fb fbd6 	bl	8000154 <__aeabi_fsub>
 80049a8:	4603      	mov	r3, r0
 80049aa:	461a      	mov	r2, r3
 80049ac:	4b5c      	ldr	r3, [pc, #368]	; (8004b20 <Animation_Play_Frame+0x4cc>)
 80049ae:	645a      	str	r2, [r3, #68]	; 0x44
				anim_data_drive.data[14] -= directional_scale;
 80049b0:	4b5b      	ldr	r3, [pc, #364]	; (8004b20 <Animation_Play_Frame+0x4cc>)
 80049b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b4:	68f9      	ldr	r1, [r7, #12]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fb fbcc 	bl	8000154 <__aeabi_fsub>
 80049bc:	4603      	mov	r3, r0
 80049be:	461a      	mov	r2, r3
 80049c0:	4b57      	ldr	r3, [pc, #348]	; (8004b20 <Animation_Play_Frame+0x4cc>)
 80049c2:	649a      	str	r2, [r3, #72]	; 0x48

				anim_data_drive.data[21] -= directional_scale;
 80049c4:	4b56      	ldr	r3, [pc, #344]	; (8004b20 <Animation_Play_Frame+0x4cc>)
 80049c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049c8:	68f9      	ldr	r1, [r7, #12]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fb fbc2 	bl	8000154 <__aeabi_fsub>
 80049d0:	4603      	mov	r3, r0
 80049d2:	461a      	mov	r2, r3
 80049d4:	4b52      	ldr	r3, [pc, #328]	; (8004b20 <Animation_Play_Frame+0x4cc>)
 80049d6:	665a      	str	r2, [r3, #100]	; 0x64
				anim_data_drive.data[22] -= directional_scale;
 80049d8:	4b51      	ldr	r3, [pc, #324]	; (8004b20 <Animation_Play_Frame+0x4cc>)
 80049da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049dc:	68f9      	ldr	r1, [r7, #12]
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fb fbb8 	bl	8000154 <__aeabi_fsub>
 80049e4:	4603      	mov	r3, r0
 80049e6:	461a      	mov	r2, r3
 80049e8:	4b4d      	ldr	r3, [pc, #308]	; (8004b20 <Animation_Play_Frame+0x4cc>)
 80049ea:	669a      	str	r2, [r3, #104]	; 0x68

				anim_data_drive.data[29] += directional_scale;
 80049ec:	4b4c      	ldr	r3, [pc, #304]	; (8004b20 <Animation_Play_Frame+0x4cc>)
 80049ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049f2:	68f9      	ldr	r1, [r7, #12]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7fb fbaf 	bl	8000158 <__addsf3>
 80049fa:	4603      	mov	r3, r0
 80049fc:	461a      	mov	r2, r3
 80049fe:	4b48      	ldr	r3, [pc, #288]	; (8004b20 <Animation_Play_Frame+0x4cc>)
 8004a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				anim_data_drive.data[30] += directional_scale;
 8004a04:	4b46      	ldr	r3, [pc, #280]	; (8004b20 <Animation_Play_Frame+0x4cc>)
 8004a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0a:	68f9      	ldr	r1, [r7, #12]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7fb fba3 	bl	8000158 <__addsf3>
 8004a12:	4603      	mov	r3, r0
 8004a14:	461a      	mov	r2, r3
 8004a16:	4b42      	ldr	r3, [pc, #264]	; (8004b20 <Animation_Play_Frame+0x4cc>)
 8004a18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
		}
	}

	if((animation.loop_en && (animation.c_pose_n < animation.poses)) || (!animation.loop_en && (animation.c_pose_n < (animation.poses - 1)))){
 8004a1c:	4b41      	ldr	r3, [pc, #260]	; (8004b24 <Animation_Play_Frame+0x4d0>)
 8004a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d005      	beq.n	8004a32 <Animation_Play_Frame+0x3de>
 8004a26:	4b3f      	ldr	r3, [pc, #252]	; (8004b24 <Animation_Play_Frame+0x4d0>)
 8004a28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a2a:	4b3e      	ldr	r3, [pc, #248]	; (8004b24 <Animation_Play_Frame+0x4d0>)
 8004a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d30d      	bcc.n	8004a4e <Animation_Play_Frame+0x3fa>
 8004a32:	4b3c      	ldr	r3, [pc, #240]	; (8004b24 <Animation_Play_Frame+0x4d0>)
 8004a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f040 810d 	bne.w	8004c58 <Animation_Play_Frame+0x604>
 8004a3e:	4b39      	ldr	r3, [pc, #228]	; (8004b24 <Animation_Play_Frame+0x4d0>)
 8004a40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a42:	4b38      	ldr	r3, [pc, #224]	; (8004b24 <Animation_Play_Frame+0x4d0>)
 8004a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a46:	3b01      	subs	r3, #1
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	f080 8105 	bcs.w	8004c58 <Animation_Play_Frame+0x604>
		float *from = (float *)&animation.data[SERVO_COUNT * animation.c_pose_n];
 8004a4e:	4b35      	ldr	r3, [pc, #212]	; (8004b24 <Animation_Play_Frame+0x4d0>)
 8004a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a52:	4b34      	ldr	r3, [pc, #208]	; (8004b24 <Animation_Play_Frame+0x4d0>)
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	015b      	lsls	r3, r3, #5
 8004a58:	4413      	add	r3, r2
 8004a5a:	607b      	str	r3, [r7, #4]
		float *to;
		if(animation.c_pose_n == (animation.poses - 1)){
 8004a5c:	4b31      	ldr	r3, [pc, #196]	; (8004b24 <Animation_Play_Frame+0x4d0>)
 8004a5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a60:	4b30      	ldr	r3, [pc, #192]	; (8004b24 <Animation_Play_Frame+0x4d0>)
 8004a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a64:	3b01      	subs	r3, #1
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d103      	bne.n	8004a72 <Animation_Play_Frame+0x41e>
			to = (float *)&animation.data[0];
 8004a6a:	4b2e      	ldr	r3, [pc, #184]	; (8004b24 <Animation_Play_Frame+0x4d0>)
 8004a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a6e:	61fb      	str	r3, [r7, #28]
 8004a70:	e007      	b.n	8004a82 <Animation_Play_Frame+0x42e>
		}else{
			to = (float *)&animation.data[SERVO_COUNT * (animation.c_pose_n + 1)];
 8004a72:	4b2c      	ldr	r3, [pc, #176]	; (8004b24 <Animation_Play_Frame+0x4d0>)
 8004a74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a76:	4b2b      	ldr	r3, [pc, #172]	; (8004b24 <Animation_Play_Frame+0x4d0>)
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	015b      	lsls	r3, r3, #5
 8004a7e:	4413      	add	r3, r2
 8004a80:	61fb      	str	r3, [r7, #28]
		}

		if(!animation.c_step_n){
 8004a82:	4b28      	ldr	r3, [pc, #160]	; (8004b24 <Animation_Play_Frame+0x4d0>)
 8004a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d140      	bne.n	8004b0c <Animation_Play_Frame+0x4b8>
			//At first step of pose transition
			float max = 0;
 8004a8a:	f04f 0300 	mov.w	r3, #0
 8004a8e:	61bb      	str	r3, [r7, #24]
			uint8_t i = 0;
 8004a90:	2300      	movs	r3, #0
 8004a92:	75fb      	strb	r3, [r7, #23]
			while(i != SERVO_COUNT){
 8004a94:	e02a      	b.n	8004aec <Animation_Play_Frame+0x498>
				if(fabs(to[i] - from[i]) > max){
 8004a96:	7dfb      	ldrb	r3, [r7, #23]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	69fa      	ldr	r2, [r7, #28]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	6818      	ldr	r0, [r3, #0]
 8004aa0:	7dfb      	ldrb	r3, [r7, #23]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4619      	mov	r1, r3
 8004aac:	f7fb fb52 	bl	8000154 <__aeabi_fsub>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	69b8      	ldr	r0, [r7, #24]
 8004aba:	f7fb fdf3 	bl	80006a4 <__aeabi_fcmplt>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d010      	beq.n	8004ae6 <Animation_Play_Frame+0x492>
					max = fabs(to[i] - from[i]);
 8004ac4:	7dfb      	ldrb	r3, [r7, #23]
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	69fa      	ldr	r2, [r7, #28]
 8004aca:	4413      	add	r3, r2
 8004acc:	6818      	ldr	r0, [r3, #0]
 8004ace:	7dfb      	ldrb	r3, [r7, #23]
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4619      	mov	r1, r3
 8004ada:	f7fb fb3b 	bl	8000154 <__aeabi_fsub>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ae4:	61bb      	str	r3, [r7, #24]
				}
				i++;
 8004ae6:	7dfb      	ldrb	r3, [r7, #23]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	75fb      	strb	r3, [r7, #23]
			while(i != SERVO_COUNT){
 8004aec:	7dfb      	ldrb	r3, [r7, #23]
 8004aee:	2b08      	cmp	r3, #8
 8004af0:	d1d1      	bne.n	8004a96 <Animation_Play_Frame+0x442>
			}
			animation.c_steps = max / animation.max_substep;
 8004af2:	4b0c      	ldr	r3, [pc, #48]	; (8004b24 <Animation_Play_Frame+0x4d0>)
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	4619      	mov	r1, r3
 8004af8:	69b8      	ldr	r0, [r7, #24]
 8004afa:	f7fb fce9 	bl	80004d0 <__aeabi_fdiv>
 8004afe:	4603      	mov	r3, r0
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7fb fdf7 	bl	80006f4 <__aeabi_f2uiz>
 8004b06:	4603      	mov	r3, r0
 8004b08:	4a06      	ldr	r2, [pc, #24]	; (8004b24 <Animation_Play_Frame+0x4d0>)
 8004b0a:	6293      	str	r3, [r2, #40]	; 0x28
		}

		if(animation.c_step_n != animation.c_steps){
 8004b0c:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <Animation_Play_Frame+0x4d0>)
 8004b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b10:	4b04      	ldr	r3, [pc, #16]	; (8004b24 <Animation_Play_Frame+0x4d0>)
 8004b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b14:	429a      	cmp	r2, r3
 8004b16:	f000 8096 	beq.w	8004c46 <Animation_Play_Frame+0x5f2>
			uint8_t i = 0;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	75bb      	strb	r3, [r7, #22]
			while(i != SERVO_COUNT){
 8004b1e:	e085      	b.n	8004c2c <Animation_Play_Frame+0x5d8>
 8004b20:	200002a8 	.word	0x200002a8
 8004b24:	20000d24 	.word	0x20000d24
 8004b28:	42b40000 	.word	0x42b40000
				if(to[i] > from[i]){
 8004b2c:	7dbb      	ldrb	r3, [r7, #22]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	69fa      	ldr	r2, [r7, #28]
 8004b32:	4413      	add	r3, r2
 8004b34:	6818      	ldr	r0, [r3, #0]
 8004b36:	7dbb      	ldrb	r3, [r7, #22]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4619      	mov	r1, r3
 8004b42:	f7fb fdcd 	bl	80006e0 <__aeabi_fcmpgt>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d036      	beq.n	8004bba <Animation_Play_Frame+0x566>
					animation.c_data[i] = from[i] + (((to[i] - from[i]) / animation.c_steps) * animation.c_step_n);
 8004b4c:	7dbb      	ldrb	r3, [r7, #22]
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	4413      	add	r3, r2
 8004b54:	681d      	ldr	r5, [r3, #0]
 8004b56:	7dbb      	ldrb	r3, [r7, #22]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	69fa      	ldr	r2, [r7, #28]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	6818      	ldr	r0, [r3, #0]
 8004b60:	7dbb      	ldrb	r3, [r7, #22]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	4413      	add	r3, r2
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	f7fb faf2 	bl	8000154 <__aeabi_fsub>
 8004b70:	4603      	mov	r3, r0
 8004b72:	461c      	mov	r4, r3
 8004b74:	4b42      	ldr	r3, [pc, #264]	; (8004c80 <Animation_Play_Frame+0x62c>)
 8004b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7fb fb9d 	bl	80002b8 <__aeabi_ui2f>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	4619      	mov	r1, r3
 8004b82:	4620      	mov	r0, r4
 8004b84:	f7fb fca4 	bl	80004d0 <__aeabi_fdiv>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	461c      	mov	r4, r3
 8004b8c:	4b3c      	ldr	r3, [pc, #240]	; (8004c80 <Animation_Play_Frame+0x62c>)
 8004b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7fb fb91 	bl	80002b8 <__aeabi_ui2f>
 8004b96:	4603      	mov	r3, r0
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	f7fb fbe4 	bl	8000368 <__aeabi_fmul>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	7dbc      	ldrb	r4, [r7, #22]
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4628      	mov	r0, r5
 8004ba8:	f7fb fad6 	bl	8000158 <__addsf3>
 8004bac:	4603      	mov	r3, r0
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4a33      	ldr	r2, [pc, #204]	; (8004c80 <Animation_Play_Frame+0x62c>)
 8004bb2:	00a3      	lsls	r3, r4, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	6059      	str	r1, [r3, #4]
 8004bb8:	e035      	b.n	8004c26 <Animation_Play_Frame+0x5d2>
				}else{
					animation.c_data[i] = from[i] - (((from[i] - to[i]) / animation.c_steps) * animation.c_step_n);
 8004bba:	7dbb      	ldrb	r3, [r7, #22]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	681d      	ldr	r5, [r3, #0]
 8004bc4:	7dbb      	ldrb	r3, [r7, #22]
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	4413      	add	r3, r2
 8004bcc:	6818      	ldr	r0, [r3, #0]
 8004bce:	7dbb      	ldrb	r3, [r7, #22]
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	69fa      	ldr	r2, [r7, #28]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4619      	mov	r1, r3
 8004bda:	f7fb fabb 	bl	8000154 <__aeabi_fsub>
 8004bde:	4603      	mov	r3, r0
 8004be0:	461c      	mov	r4, r3
 8004be2:	4b27      	ldr	r3, [pc, #156]	; (8004c80 <Animation_Play_Frame+0x62c>)
 8004be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fb fb66 	bl	80002b8 <__aeabi_ui2f>
 8004bec:	4603      	mov	r3, r0
 8004bee:	4619      	mov	r1, r3
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	f7fb fc6d 	bl	80004d0 <__aeabi_fdiv>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	461c      	mov	r4, r3
 8004bfa:	4b21      	ldr	r3, [pc, #132]	; (8004c80 <Animation_Play_Frame+0x62c>)
 8004bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7fb fb5a 	bl	80002b8 <__aeabi_ui2f>
 8004c04:	4603      	mov	r3, r0
 8004c06:	4619      	mov	r1, r3
 8004c08:	4620      	mov	r0, r4
 8004c0a:	f7fb fbad 	bl	8000368 <__aeabi_fmul>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	7dbc      	ldrb	r4, [r7, #22]
 8004c12:	4619      	mov	r1, r3
 8004c14:	4628      	mov	r0, r5
 8004c16:	f7fb fa9d 	bl	8000154 <__aeabi_fsub>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4a18      	ldr	r2, [pc, #96]	; (8004c80 <Animation_Play_Frame+0x62c>)
 8004c20:	00a3      	lsls	r3, r4, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	6059      	str	r1, [r3, #4]
				}
				i++;
 8004c26:	7dbb      	ldrb	r3, [r7, #22]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	75bb      	strb	r3, [r7, #22]
			while(i != SERVO_COUNT){
 8004c2c:	7dbb      	ldrb	r3, [r7, #22]
 8004c2e:	2b08      	cmp	r3, #8
 8004c30:	f47f af7c 	bne.w	8004b2c <Animation_Play_Frame+0x4d8>
			}
			Servo_Set((float *)&animation.c_data[0]);
 8004c34:	4813      	ldr	r0, [pc, #76]	; (8004c84 <Animation_Play_Frame+0x630>)
 8004c36:	f7ff fab7 	bl	80041a8 <Servo_Set>
			animation.c_step_n++;
 8004c3a:	4b11      	ldr	r3, [pc, #68]	; (8004c80 <Animation_Play_Frame+0x62c>)
 8004c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3e:	3301      	adds	r3, #1
 8004c40:	4a0f      	ldr	r2, [pc, #60]	; (8004c80 <Animation_Play_Frame+0x62c>)
 8004c42:	62d3      	str	r3, [r2, #44]	; 0x2c
	if((animation.loop_en && (animation.c_pose_n < animation.poses)) || (!animation.loop_en && (animation.c_pose_n < (animation.poses - 1)))){
 8004c44:	e017      	b.n	8004c76 <Animation_Play_Frame+0x622>
		}else{
			animation.c_step_n = 0;
 8004c46:	4b0e      	ldr	r3, [pc, #56]	; (8004c80 <Animation_Play_Frame+0x62c>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	62da      	str	r2, [r3, #44]	; 0x2c
			animation.c_pose_n++;
 8004c4c:	4b0c      	ldr	r3, [pc, #48]	; (8004c80 <Animation_Play_Frame+0x62c>)
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	3301      	adds	r3, #1
 8004c52:	4a0b      	ldr	r2, [pc, #44]	; (8004c80 <Animation_Play_Frame+0x62c>)
 8004c54:	6253      	str	r3, [r2, #36]	; 0x24
	if((animation.loop_en && (animation.c_pose_n < animation.poses)) || (!animation.loop_en && (animation.c_pose_n < (animation.poses - 1)))){
 8004c56:	e00e      	b.n	8004c76 <Animation_Play_Frame+0x622>
		}
	}else if(animation.loop_en){
 8004c58:	4b09      	ldr	r3, [pc, #36]	; (8004c80 <Animation_Play_Frame+0x62c>)
 8004c5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d006      	beq.n	8004c70 <Animation_Play_Frame+0x61c>
		animation.c_pose_n = 0;
 8004c62:	4b07      	ldr	r3, [pc, #28]	; (8004c80 <Animation_Play_Frame+0x62c>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	625a      	str	r2, [r3, #36]	; 0x24
		animation.c_step_n = 0;
 8004c68:	4b05      	ldr	r3, [pc, #20]	; (8004c80 <Animation_Play_Frame+0x62c>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	62da      	str	r2, [r3, #44]	; 0x2c
	}else{
		Animation_Stop();
	}
}
 8004c6e:	e002      	b.n	8004c76 <Animation_Play_Frame+0x622>
		Animation_Stop();
 8004c70:	f7ff fcd8 	bl	8004624 <Animation_Stop>
}
 8004c74:	e7ff      	b.n	8004c76 <Animation_Play_Frame+0x622>
 8004c76:	bf00      	nop
 8004c78:	3720      	adds	r7, #32
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bdb0      	pop	{r4, r5, r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	20000d24 	.word	0x20000d24
 8004c84:	20000d28 	.word	0x20000d28

08004c88 <Animation_Play>:
void Animation_Play(){
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
	if(animation.poses && (animation.c_frame_delay >= animation.frame_delay)){
 8004c8c:	4b0d      	ldr	r3, [pc, #52]	; (8004cc4 <Animation_Play+0x3c>)
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d014      	beq.n	8004cbe <Animation_Play+0x36>
 8004c94:	4b0b      	ldr	r3, [pc, #44]	; (8004cc4 <Animation_Play+0x3c>)
 8004c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7fb fb0d 	bl	80002b8 <__aeabi_ui2f>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	4b08      	ldr	r3, [pc, #32]	; (8004cc4 <Animation_Play+0x3c>)
 8004ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	4610      	mov	r0, r2
 8004ca8:	f7fb fd10 	bl	80006cc <__aeabi_fcmpge>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d100      	bne.n	8004cb4 <Animation_Play+0x2c>
		Animation_Play_Frame();
		animation.c_frame_delay = 0;
	}
}
 8004cb2:	e004      	b.n	8004cbe <Animation_Play+0x36>
		Animation_Play_Frame();
 8004cb4:	f7ff fcce 	bl	8004654 <Animation_Play_Frame>
		animation.c_frame_delay = 0;
 8004cb8:	4b02      	ldr	r3, [pc, #8]	; (8004cc4 <Animation_Play+0x3c>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004cbe:	bf00      	nop
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	20000d24 	.word	0x20000d24

08004cc8 <App_SysTick>:
	uint8_t cmd;
	uint32_t cmd_time_ms;
	uint8_t data[APP_DATA_BUFF_SIZE];
}app;

void App_SysTick(){
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
	if(app.cmd && (app.cmd_time_ms < APP_CMD_TIMEOUT_MS)){
 8004ccc:	4b08      	ldr	r3, [pc, #32]	; (8004cf0 <App_SysTick+0x28>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d008      	beq.n	8004ce6 <App_SysTick+0x1e>
 8004cd4:	4b06      	ldr	r3, [pc, #24]	; (8004cf0 <App_SysTick+0x28>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	2b95      	cmp	r3, #149	; 0x95
 8004cda:	d804      	bhi.n	8004ce6 <App_SysTick+0x1e>
		app.cmd_time_ms++;
 8004cdc:	4b04      	ldr	r3, [pc, #16]	; (8004cf0 <App_SysTick+0x28>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	4a03      	ldr	r2, [pc, #12]	; (8004cf0 <App_SysTick+0x28>)
 8004ce4:	6053      	str	r3, [r2, #4]
	}
}
 8004ce6:	bf00      	nop
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bc80      	pop	{r7}
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	20000d6c 	.word	0x20000d6c

08004cf4 <App_Init>:

void App_Init(){
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0
	Settings_Init();
 8004cf8:	f000 feb8 	bl	8005a6c <Settings_Init>
	Parser_Init();
 8004cfc:	f000 fc86 	bl	800560c <Parser_Init>
}
 8004d00:	bf00      	nop
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <App_Loop>:
void App_Loop(){
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
	//Handle storage pose and settings reset with button
	if(Button_Pressed()){
 8004d0a:	f7fe ffef 	bl	8003cec <Button_Pressed>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d029      	beq.n	8004d68 <App_Loop+0x64>
		if(!Button_Debounce_Read()){
 8004d14:	f7fe ffba 	bl	8003c8c <Button_Debounce_Read>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d124      	bne.n	8004d68 <App_Loop+0x64>
			HAL_Delay(2000);
 8004d1e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004d22:	f7fb fd69 	bl	80007f8 <HAL_Delay>
			if(!Button_Debounce_Read()){
 8004d26:	f7fe ffb1 	bl	8003c8c <Button_Debounce_Read>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d117      	bne.n	8004d60 <App_Loop+0x5c>
				//Store LED state
				uint8_t led_en = LED_Is_Enabled();
 8004d30:	f7ff f9ea 	bl	8004108 <LED_Is_Enabled>
 8004d34:	4603      	mov	r3, r0
 8004d36:	71fb      	strb	r3, [r7, #7]
				LED_Enable(0);
 8004d38:	2000      	movs	r0, #0
 8004d3a:	f7ff f9ef 	bl	800411c <LED_Enable>
				//Reset settings
				Settings_Reset();
 8004d3e:	f000 fd0b 	bl	8005758 <Settings_Reset>
				app.cmd = PARSER_CMD_NONE;
 8004d42:	4b9c      	ldr	r3, [pc, #624]	; (8004fb4 <App_Loop+0x2b0>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	701a      	strb	r2, [r3, #0]
				app.cmd_time_ms = 0;
 8004d48:	4b9a      	ldr	r3, [pc, #616]	; (8004fb4 <App_Loop+0x2b0>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	605a      	str	r2, [r3, #4]
				//Restore LED state after some delay (user should release button when led goes off)
				HAL_Delay(500);
 8004d4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004d52:	f7fb fd51 	bl	80007f8 <HAL_Delay>
				LED_Enable(led_en);
 8004d56:	79fb      	ldrb	r3, [r7, #7]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff f9df 	bl	800411c <LED_Enable>
 8004d5e:	e003      	b.n	8004d68 <App_Loop+0x64>
			}else{
				//Set storage pose
				Servo_Set((float *)&anim_data_storage_pose[0]);
 8004d60:	4895      	ldr	r0, [pc, #596]	; (8004fb8 <App_Loop+0x2b4>)
 8004d62:	f7ff fa21 	bl	80041a8 <Servo_Set>
				while(1);
 8004d66:	e7fe      	b.n	8004d66 <App_Loop+0x62>
			}
		}
	}

	//Handle animation commands
	uint8_t cmd = Parser_Update((uint8_t *)&app.data[0]);
 8004d68:	4894      	ldr	r0, [pc, #592]	; (8004fbc <App_Loop+0x2b8>)
 8004d6a:	f000 fa17 	bl	800519c <Parser_Update>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	71bb      	strb	r3, [r7, #6]
	//Reset command timeout timer
	if(app.cmd && cmd){
 8004d72:	4b90      	ldr	r3, [pc, #576]	; (8004fb4 <App_Loop+0x2b0>)
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d005      	beq.n	8004d86 <App_Loop+0x82>
 8004d7a:	79bb      	ldrb	r3, [r7, #6]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d002      	beq.n	8004d86 <App_Loop+0x82>
		app.cmd_time_ms = 0;
 8004d80:	4b8c      	ldr	r3, [pc, #560]	; (8004fb4 <App_Loop+0x2b0>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	605a      	str	r2, [r3, #4]
	}
	//If we got a new command
	if(cmd && (app.cmd != cmd)){
 8004d86:	79bb      	ldrb	r3, [r7, #6]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 80bd 	beq.w	8004f08 <App_Loop+0x204>
 8004d8e:	4b89      	ldr	r3, [pc, #548]	; (8004fb4 <App_Loop+0x2b0>)
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	79ba      	ldrb	r2, [r7, #6]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	f000 80b7 	beq.w	8004f08 <App_Loop+0x204>
		app.cmd = cmd;
 8004d9a:	4a86      	ldr	r2, [pc, #536]	; (8004fb4 <App_Loop+0x2b0>)
 8004d9c:	79bb      	ldrb	r3, [r7, #6]
 8004d9e:	7013      	strb	r3, [r2, #0]
		switch(cmd){
 8004da0:	79bb      	ldrb	r3, [r7, #6]
 8004da2:	3b01      	subs	r3, #1
 8004da4:	2b17      	cmp	r3, #23
 8004da6:	f200 80a3 	bhi.w	8004ef0 <App_Loop+0x1ec>
 8004daa:	a201      	add	r2, pc, #4	; (adr r2, 8004db0 <App_Loop+0xac>)
 8004dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db0:	08004e11 	.word	0x08004e11
 8004db4:	08004e19 	.word	0x08004e19
 8004db8:	08004e21 	.word	0x08004e21
 8004dbc:	08004e29 	.word	0x08004e29
 8004dc0:	08004e31 	.word	0x08004e31
 8004dc4:	08004e39 	.word	0x08004e39
 8004dc8:	08004e41 	.word	0x08004e41
 8004dcc:	08004e49 	.word	0x08004e49
 8004dd0:	08004e51 	.word	0x08004e51
 8004dd4:	08004e59 	.word	0x08004e59
 8004dd8:	08004e61 	.word	0x08004e61
 8004ddc:	08004e69 	.word	0x08004e69
 8004de0:	08004e71 	.word	0x08004e71
 8004de4:	08004e79 	.word	0x08004e79
 8004de8:	08004e81 	.word	0x08004e81
 8004dec:	08004e89 	.word	0x08004e89
 8004df0:	08004e91 	.word	0x08004e91
 8004df4:	08004e99 	.word	0x08004e99
 8004df8:	08004ea1 	.word	0x08004ea1
 8004dfc:	08004eb9 	.word	0x08004eb9
 8004e00:	08004ed1 	.word	0x08004ed1
 8004e04:	08004ed9 	.word	0x08004ed9
 8004e08:	08004ee1 	.word	0x08004ee1
 8004e0c:	08004ee9 	.word	0x08004ee9
			//Start moving, ignoring any current pose
			case PARSER_CMD_FORAWRD_1:
				Animation_Set((anim_data_t *)&anim_data_forward_1);
 8004e10:	486b      	ldr	r0, [pc, #428]	; (8004fc0 <App_Loop+0x2bc>)
 8004e12:	f7ff fbdd 	bl	80045d0 <Animation_Set>
			break;
 8004e16:	e06b      	b.n	8004ef0 <App_Loop+0x1ec>
			case PARSER_CMD_FORAWRD_2:
				Animation_Set((anim_data_t *)&anim_data_forward_2);
 8004e18:	486a      	ldr	r0, [pc, #424]	; (8004fc4 <App_Loop+0x2c0>)
 8004e1a:	f7ff fbd9 	bl	80045d0 <Animation_Set>
			break;
 8004e1e:	e067      	b.n	8004ef0 <App_Loop+0x1ec>
			case PARSER_CMD_FORAWRD_3:
				Animation_Set((anim_data_t *)&anim_data_forward_3);
 8004e20:	4869      	ldr	r0, [pc, #420]	; (8004fc8 <App_Loop+0x2c4>)
 8004e22:	f7ff fbd5 	bl	80045d0 <Animation_Set>
			break;
 8004e26:	e063      	b.n	8004ef0 <App_Loop+0x1ec>
			case PARSER_CMD_BACKWARD_1:
				Animation_Set((anim_data_t *)&anim_data_backward_1);
 8004e28:	4868      	ldr	r0, [pc, #416]	; (8004fcc <App_Loop+0x2c8>)
 8004e2a:	f7ff fbd1 	bl	80045d0 <Animation_Set>
			break;
 8004e2e:	e05f      	b.n	8004ef0 <App_Loop+0x1ec>
			case PARSER_CMD_BACKWARD_2:
				Animation_Set((anim_data_t *)&anim_data_backward_2);
 8004e30:	4867      	ldr	r0, [pc, #412]	; (8004fd0 <App_Loop+0x2cc>)
 8004e32:	f7ff fbcd 	bl	80045d0 <Animation_Set>
			break;
 8004e36:	e05b      	b.n	8004ef0 <App_Loop+0x1ec>
			case PARSER_CMD_BACKWARD_3:
				Animation_Set((anim_data_t *)&anim_data_backward_3);
 8004e38:	4866      	ldr	r0, [pc, #408]	; (8004fd4 <App_Loop+0x2d0>)
 8004e3a:	f7ff fbc9 	bl	80045d0 <Animation_Set>
			break;
 8004e3e:	e057      	b.n	8004ef0 <App_Loop+0x1ec>
			case PARSER_CMD_TURN_LEFT_1:
				Animation_Set((anim_data_t *)&anim_data_turn_left_1);
 8004e40:	4865      	ldr	r0, [pc, #404]	; (8004fd8 <App_Loop+0x2d4>)
 8004e42:	f7ff fbc5 	bl	80045d0 <Animation_Set>
			break;
 8004e46:	e053      	b.n	8004ef0 <App_Loop+0x1ec>
			case PARSER_CMD_TURN_LEFT_2:
				Animation_Set((anim_data_t *)&anim_data_turn_left_2);
 8004e48:	4864      	ldr	r0, [pc, #400]	; (8004fdc <App_Loop+0x2d8>)
 8004e4a:	f7ff fbc1 	bl	80045d0 <Animation_Set>
			break;
 8004e4e:	e04f      	b.n	8004ef0 <App_Loop+0x1ec>
			case PARSER_CMD_TURN_LEFT_3:
				Animation_Set((anim_data_t *)&anim_data_turn_left_3);
 8004e50:	4863      	ldr	r0, [pc, #396]	; (8004fe0 <App_Loop+0x2dc>)
 8004e52:	f7ff fbbd 	bl	80045d0 <Animation_Set>
			break;
 8004e56:	e04b      	b.n	8004ef0 <App_Loop+0x1ec>
			case PARSER_CMD_TURN_RIGHT_1:
				Animation_Set((anim_data_t *)&anim_data_turn_right_1);
 8004e58:	4862      	ldr	r0, [pc, #392]	; (8004fe4 <App_Loop+0x2e0>)
 8004e5a:	f7ff fbb9 	bl	80045d0 <Animation_Set>
			break;
 8004e5e:	e047      	b.n	8004ef0 <App_Loop+0x1ec>
			case PARSER_CMD_TURN_RIGHT_2:
				Animation_Set((anim_data_t *)&anim_data_turn_right_2);
 8004e60:	4861      	ldr	r0, [pc, #388]	; (8004fe8 <App_Loop+0x2e4>)
 8004e62:	f7ff fbb5 	bl	80045d0 <Animation_Set>
			break;
 8004e66:	e043      	b.n	8004ef0 <App_Loop+0x1ec>
			case PARSER_CMD_TURN_RIGHT_3:
				Animation_Set((anim_data_t *)&anim_data_turn_right_3);
 8004e68:	4860      	ldr	r0, [pc, #384]	; (8004fec <App_Loop+0x2e8>)
 8004e6a:	f7ff fbb1 	bl	80045d0 <Animation_Set>
			break;
 8004e6e:	e03f      	b.n	8004ef0 <App_Loop+0x1ec>
			case PARSER_CMD_SLIDE_LEFT_1:
				Animation_Set((anim_data_t *)&anim_data_slide_left_1);
 8004e70:	485f      	ldr	r0, [pc, #380]	; (8004ff0 <App_Loop+0x2ec>)
 8004e72:	f7ff fbad 	bl	80045d0 <Animation_Set>
			break;
 8004e76:	e03b      	b.n	8004ef0 <App_Loop+0x1ec>
			case PARSER_CMD_SLIDE_LEFT_2:
				Animation_Set((anim_data_t *)&anim_data_slide_left_2);
 8004e78:	485e      	ldr	r0, [pc, #376]	; (8004ff4 <App_Loop+0x2f0>)
 8004e7a:	f7ff fba9 	bl	80045d0 <Animation_Set>
			break;
 8004e7e:	e037      	b.n	8004ef0 <App_Loop+0x1ec>
			case PARSER_CMD_SLIDE_LEFT_3:
				Animation_Set((anim_data_t *)&anim_data_slide_left_3);
 8004e80:	485d      	ldr	r0, [pc, #372]	; (8004ff8 <App_Loop+0x2f4>)
 8004e82:	f7ff fba5 	bl	80045d0 <Animation_Set>
			break;
 8004e86:	e033      	b.n	8004ef0 <App_Loop+0x1ec>
			case PARSER_CMD_SLIDE_RIGHT_1:
				Animation_Set((anim_data_t *)&anim_data_slide_right_1);
 8004e88:	485c      	ldr	r0, [pc, #368]	; (8004ffc <App_Loop+0x2f8>)
 8004e8a:	f7ff fba1 	bl	80045d0 <Animation_Set>
			break;
 8004e8e:	e02f      	b.n	8004ef0 <App_Loop+0x1ec>
			case PARSER_CMD_SLIDE_RIGHT_2:
				Animation_Set((anim_data_t *)&anim_data_slide_right_2);
 8004e90:	485b      	ldr	r0, [pc, #364]	; (8005000 <App_Loop+0x2fc>)
 8004e92:	f7ff fb9d 	bl	80045d0 <Animation_Set>
			break;
 8004e96:	e02b      	b.n	8004ef0 <App_Loop+0x1ec>
			case PARSER_CMD_SLIDE_RIGHT_3:
				Animation_Set((anim_data_t *)&anim_data_slide_right_3);
 8004e98:	485a      	ldr	r0, [pc, #360]	; (8005004 <App_Loop+0x300>)
 8004e9a:	f7ff fb99 	bl	80045d0 <Animation_Set>
			break;
 8004e9e:	e027      	b.n	8004ef0 <App_Loop+0x1ec>

			//Go into Kick pose
			case PARSER_CMD_KICK:
				Animation_Set_Kick(*(uint8_t *)&app.data[0], *(uint8_t *)&app.data[1]);
 8004ea0:	4b44      	ldr	r3, [pc, #272]	; (8004fb4 <App_Loop+0x2b0>)
 8004ea2:	7a1b      	ldrb	r3, [r3, #8]
 8004ea4:	4a43      	ldr	r2, [pc, #268]	; (8004fb4 <App_Loop+0x2b0>)
 8004ea6:	7a52      	ldrb	r2, [r2, #9]
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7ff fafa 	bl	80044a4 <Animation_Set_Kick>
				Animation_Set((anim_data_t *)&anim_data_kick);
 8004eb0:	4855      	ldr	r0, [pc, #340]	; (8005008 <App_Loop+0x304>)
 8004eb2:	f7ff fb8d 	bl	80045d0 <Animation_Set>
			break;
 8004eb6:	e01b      	b.n	8004ef0 <App_Loop+0x1ec>

			//Start driving
			case PARSER_CMD_DRIVE:
				Animation_Set_Drive(*(uint8_t *)&app.data[0], *(uint8_t *)&app.data[1]);
 8004eb8:	4b3e      	ldr	r3, [pc, #248]	; (8004fb4 <App_Loop+0x2b0>)
 8004eba:	7a1b      	ldrb	r3, [r3, #8]
 8004ebc:	4a3d      	ldr	r2, [pc, #244]	; (8004fb4 <App_Loop+0x2b0>)
 8004ebe:	7a52      	ldrb	r2, [r2, #9]
 8004ec0:	4611      	mov	r1, r2
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff fb5e 	bl	8004584 <Animation_Set_Drive>
				Animation_Set((anim_data_t *)&anim_data_drive);
 8004ec8:	4850      	ldr	r0, [pc, #320]	; (800500c <App_Loop+0x308>)
 8004eca:	f7ff fb81 	bl	80045d0 <Animation_Set>
			break;
 8004ece:	e00f      	b.n	8004ef0 <App_Loop+0x1ec>

			//Start tricks
			case PARSER_CMD_TRICK_1_SWIM:
				Animation_Set((anim_data_t *)&anim_data_swim_s);
 8004ed0:	484f      	ldr	r0, [pc, #316]	; (8005010 <App_Loop+0x30c>)
 8004ed2:	f7ff fb7d 	bl	80045d0 <Animation_Set>
			break;
 8004ed6:	e00b      	b.n	8004ef0 <App_Loop+0x1ec>
			case PARSER_CMD_TRICK_2_WORKOUT:
				Animation_Set((anim_data_t *)&anim_data_workout_s);
 8004ed8:	484e      	ldr	r0, [pc, #312]	; (8005014 <App_Loop+0x310>)
 8004eda:	f7ff fb79 	bl	80045d0 <Animation_Set>
			break;
 8004ede:	e007      	b.n	8004ef0 <App_Loop+0x1ec>
			case PARSER_CMD_TRICK_3_HELLO:
				Animation_Set((anim_data_t *)&anim_data_hello_s);
 8004ee0:	484d      	ldr	r0, [pc, #308]	; (8005018 <App_Loop+0x314>)
 8004ee2:	f7ff fb75 	bl	80045d0 <Animation_Set>
			break;
 8004ee6:	e003      	b.n	8004ef0 <App_Loop+0x1ec>

			//Prevent any return to standby pose or kick animations on timeout
			case PARSER_CMD_SETT:
				app.cmd = PARSER_CMD_NONE;
 8004ee8:	4b32      	ldr	r3, [pc, #200]	; (8004fb4 <App_Loop+0x2b0>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	701a      	strb	r2, [r3, #0]
			break;
 8004eee:	bf00      	nop
		}

		if(app.cmd && (app.cmd != PARSER_CMD_KICK)){
 8004ef0:	4b30      	ldr	r3, [pc, #192]	; (8004fb4 <App_Loop+0x2b0>)
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d052      	beq.n	8004f9e <App_Loop+0x29a>
 8004ef8:	4b2e      	ldr	r3, [pc, #184]	; (8004fb4 <App_Loop+0x2b0>)
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	2b13      	cmp	r3, #19
 8004efe:	d04e      	beq.n	8004f9e <App_Loop+0x29a>
			LED_Set_Mode(LED_ACCELERATE);
 8004f00:	2001      	movs	r0, #1
 8004f02:	f7ff f8f1 	bl	80040e8 <LED_Set_Mode>
		if(app.cmd && (app.cmd != PARSER_CMD_KICK)){
 8004f06:	e04a      	b.n	8004f9e <App_Loop+0x29a>
		}
	}
	//We got same command but we need to update values
	else if(cmd){
 8004f08:	79bb      	ldrb	r3, [r7, #6]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d049      	beq.n	8004fa2 <App_Loop+0x29e>
		switch(app.cmd){
 8004f0e:	4b29      	ldr	r3, [pc, #164]	; (8004fb4 <App_Loop+0x2b0>)
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	3b13      	subs	r3, #19
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	f200 808a 	bhi.w	800502e <App_Loop+0x32a>
 8004f1a:	a201      	add	r2, pc, #4	; (adr r2, 8004f20 <App_Loop+0x21c>)
 8004f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f20:	08004f47 	.word	0x08004f47
 8004f24:	08004f35 	.word	0x08004f35
 8004f28:	08004f69 	.word	0x08004f69
 8004f2c:	08004f7b 	.word	0x08004f7b
 8004f30:	08004f8d 	.word	0x08004f8d
			case PARSER_CMD_DRIVE:
				Animation_Set_Drive(*(uint8_t *)&app.data[0], *(uint8_t *)&app.data[1]);
 8004f34:	4b1f      	ldr	r3, [pc, #124]	; (8004fb4 <App_Loop+0x2b0>)
 8004f36:	7a1b      	ldrb	r3, [r3, #8]
 8004f38:	4a1e      	ldr	r2, [pc, #120]	; (8004fb4 <App_Loop+0x2b0>)
 8004f3a:	7a52      	ldrb	r2, [r2, #9]
 8004f3c:	4611      	mov	r1, r2
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7ff fb20 	bl	8004584 <Animation_Set_Drive>
			break;
 8004f44:	e073      	b.n	800502e <App_Loop+0x32a>
			case PARSER_CMD_KICK:
				if(!Animation_Is_Playing()){
 8004f46:	f7ff fb33 	bl	80045b0 <Animation_Is_Playing>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d12a      	bne.n	8004fa6 <App_Loop+0x2a2>
					Animation_Set_Kick(*(uint8_t *)&app.data[0], *(uint8_t *)&app.data[1]);
 8004f50:	4b18      	ldr	r3, [pc, #96]	; (8004fb4 <App_Loop+0x2b0>)
 8004f52:	7a1b      	ldrb	r3, [r3, #8]
 8004f54:	4a17      	ldr	r2, [pc, #92]	; (8004fb4 <App_Loop+0x2b0>)
 8004f56:	7a52      	ldrb	r2, [r2, #9]
 8004f58:	4611      	mov	r1, r2
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7ff faa2 	bl	80044a4 <Animation_Set_Kick>
					Servo_Set((float *)&anim_data_kick.data[SERVO_COUNT]);
 8004f60:	482e      	ldr	r0, [pc, #184]	; (800501c <App_Loop+0x318>)
 8004f62:	f7ff f921 	bl	80041a8 <Servo_Set>
				}
			break;
 8004f66:	e01e      	b.n	8004fa6 <App_Loop+0x2a2>
			case PARSER_CMD_TRICK_1_SWIM:
				if(!Animation_Is_Playing()){
 8004f68:	f7ff fb22 	bl	80045b0 <Animation_Is_Playing>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d11b      	bne.n	8004faa <App_Loop+0x2a6>
					Animation_Set((anim_data_t *)&anim_data_swim_l);
 8004f72:	482b      	ldr	r0, [pc, #172]	; (8005020 <App_Loop+0x31c>)
 8004f74:	f7ff fb2c 	bl	80045d0 <Animation_Set>
				}
			break;
 8004f78:	e017      	b.n	8004faa <App_Loop+0x2a6>
			case PARSER_CMD_TRICK_2_WORKOUT:
				if(!Animation_Is_Playing()){
 8004f7a:	f7ff fb19 	bl	80045b0 <Animation_Is_Playing>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d114      	bne.n	8004fae <App_Loop+0x2aa>
					Animation_Set((anim_data_t *)&anim_data_workout_l);
 8004f84:	4827      	ldr	r0, [pc, #156]	; (8005024 <App_Loop+0x320>)
 8004f86:	f7ff fb23 	bl	80045d0 <Animation_Set>
				}
			break;
 8004f8a:	e010      	b.n	8004fae <App_Loop+0x2aa>
			case PARSER_CMD_TRICK_3_HELLO:
				if(!Animation_Is_Playing()){
 8004f8c:	f7ff fb10 	bl	80045b0 <Animation_Is_Playing>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d14a      	bne.n	800502c <App_Loop+0x328>
					Animation_Set((anim_data_t *)&anim_data_hello_l);
 8004f96:	4824      	ldr	r0, [pc, #144]	; (8005028 <App_Loop+0x324>)
 8004f98:	f7ff fb1a 	bl	80045d0 <Animation_Set>
				}
			break;
 8004f9c:	e046      	b.n	800502c <App_Loop+0x328>
		if(app.cmd && (app.cmd != PARSER_CMD_KICK)){
 8004f9e:	bf00      	nop
 8004fa0:	e045      	b.n	800502e <App_Loop+0x32a>
		}
	}
 8004fa2:	bf00      	nop
 8004fa4:	e043      	b.n	800502e <App_Loop+0x32a>
			break;
 8004fa6:	bf00      	nop
 8004fa8:	e041      	b.n	800502e <App_Loop+0x32a>
			break;
 8004faa:	bf00      	nop
 8004fac:	e03f      	b.n	800502e <App_Loop+0x32a>
			break;
 8004fae:	bf00      	nop
 8004fb0:	e03d      	b.n	800502e <App_Loop+0x32a>
 8004fb2:	bf00      	nop
 8004fb4:	20000d6c 	.word	0x20000d6c
 8004fb8:	08006d8c 	.word	0x08006d8c
 8004fbc:	20000d74 	.word	0x20000d74
 8004fc0:	08006dec 	.word	0x08006dec
 8004fc4:	08006e7c 	.word	0x08006e7c
 8004fc8:	08006f0c 	.word	0x08006f0c
 8004fcc:	08006f9c 	.word	0x08006f9c
 8004fd0:	0800702c 	.word	0x0800702c
 8004fd4:	080070bc 	.word	0x080070bc
 8004fd8:	0800714c 	.word	0x0800714c
 8004fdc:	080071dc 	.word	0x080071dc
 8004fe0:	0800726c 	.word	0x0800726c
 8004fe4:	080072fc 	.word	0x080072fc
 8004fe8:	0800738c 	.word	0x0800738c
 8004fec:	0800741c 	.word	0x0800741c
 8004ff0:	080074ac 	.word	0x080074ac
 8004ff4:	0800753c 	.word	0x0800753c
 8004ff8:	080075cc 	.word	0x080075cc
 8004ffc:	0800765c 	.word	0x0800765c
 8005000:	080076ec 	.word	0x080076ec
 8005004:	0800777c 	.word	0x0800777c
 8005008:	20000008 	.word	0x20000008
 800500c:	200002a8 	.word	0x200002a8
 8005010:	0800780c 	.word	0x0800780c
 8005014:	08007a2c 	.word	0x08007a2c
 8005018:	08007b4c 	.word	0x08007b4c
 800501c:	20000038 	.word	0x20000038
 8005020:	0800791c 	.word	0x0800791c
 8005024:	08007afc 	.word	0x08007afc
 8005028:	08007b9c 	.word	0x08007b9c
			break;
 800502c:	bf00      	nop

	//Return to standby pose and kick animations if command timed out
	if(app.cmd_time_ms == APP_CMD_TIMEOUT_MS){
 800502e:	4b53      	ldr	r3, [pc, #332]	; (800517c <App_Loop+0x478>)
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	2b96      	cmp	r3, #150	; 0x96
 8005034:	f040 809a 	bne.w	800516c <App_Loop+0x468>
		switch(app.cmd){
 8005038:	4b50      	ldr	r3, [pc, #320]	; (800517c <App_Loop+0x478>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	3b01      	subs	r3, #1
 800503e:	2b16      	cmp	r3, #22
 8005040:	f200 8095 	bhi.w	800516e <App_Loop+0x46a>
 8005044:	a201      	add	r2, pc, #4	; (adr r2, 800504c <App_Loop+0x348>)
 8005046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504a:	bf00      	nop
 800504c:	080050a9 	.word	0x080050a9
 8005050:	080050a9 	.word	0x080050a9
 8005054:	080050a9 	.word	0x080050a9
 8005058:	080050a9 	.word	0x080050a9
 800505c:	080050a9 	.word	0x080050a9
 8005060:	080050a9 	.word	0x080050a9
 8005064:	080050a9 	.word	0x080050a9
 8005068:	080050a9 	.word	0x080050a9
 800506c:	080050a9 	.word	0x080050a9
 8005070:	080050a9 	.word	0x080050a9
 8005074:	080050a9 	.word	0x080050a9
 8005078:	080050a9 	.word	0x080050a9
 800507c:	080050a9 	.word	0x080050a9
 8005080:	080050a9 	.word	0x080050a9
 8005084:	080050a9 	.word	0x080050a9
 8005088:	080050a9 	.word	0x080050a9
 800508c:	080050a9 	.word	0x080050a9
 8005090:	080050a9 	.word	0x080050a9
 8005094:	080050c7 	.word	0x080050c7
 8005098:	080050a9 	.word	0x080050a9
 800509c:	080050dd 	.word	0x080050dd
 80050a0:	0800510d 	.word	0x0800510d
 80050a4:	0800513d 	.word	0x0800513d
			case PARSER_CMD_TURN_RIGHT_1: case PARSER_CMD_TURN_RIGHT_2: case PARSER_CMD_TURN_RIGHT_3:
			case PARSER_CMD_SLIDE_LEFT_1: case PARSER_CMD_SLIDE_LEFT_2: case PARSER_CMD_SLIDE_LEFT_3:
			case PARSER_CMD_SLIDE_RIGHT_1: case PARSER_CMD_SLIDE_RIGHT_2: case PARSER_CMD_SLIDE_RIGHT_3:
			case PARSER_CMD_DRIVE:
				//Return to standby pose
				LED_Set_Mode(LED_COOL_DOWN);
 80050a8:	2002      	movs	r0, #2
 80050aa:	f7ff f81d 	bl	80040e8 <LED_Set_Mode>
				app.cmd = PARSER_CMD_NONE;
 80050ae:	4b33      	ldr	r3, [pc, #204]	; (800517c <App_Loop+0x478>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	701a      	strb	r2, [r3, #0]
				app.cmd_time_ms = 0;
 80050b4:	4b31      	ldr	r3, [pc, #196]	; (800517c <App_Loop+0x478>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	605a      	str	r2, [r3, #4]
				Animation_Stop();
 80050ba:	f7ff fab3 	bl	8004624 <Animation_Stop>
				Servo_Set((float *)&anim_data_standby[0]);
 80050be:	4830      	ldr	r0, [pc, #192]	; (8005180 <App_Loop+0x47c>)
 80050c0:	f7ff f872 	bl	80041a8 <Servo_Set>
			break;
 80050c4:	e053      	b.n	800516e <App_Loop+0x46a>
			case PARSER_CMD_KICK:
				//Kick
				app.cmd = PARSER_CMD_NONE;
 80050c6:	4b2d      	ldr	r3, [pc, #180]	; (800517c <App_Loop+0x478>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	701a      	strb	r2, [r3, #0]
				app.cmd_time_ms = 0;
 80050cc:	4b2b      	ldr	r3, [pc, #172]	; (800517c <App_Loop+0x478>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	605a      	str	r2, [r3, #4]
				Animation_Stop();
 80050d2:	f7ff faa7 	bl	8004624 <Animation_Stop>
				Animation_Kick();
 80050d6:	f7ff fa25 	bl	8004524 <Animation_Kick>
			break;
 80050da:	e048      	b.n	800516e <App_Loop+0x46a>
			case PARSER_CMD_TRICK_1_SWIM:
				//Return from Swim
				Animation_Save_Current_Pose((float *)&anim_data_swim_e.data[0]);
 80050dc:	4829      	ldr	r0, [pc, #164]	; (8005184 <App_Loop+0x480>)
 80050de:	f7ff f9d1 	bl	8004484 <Animation_Save_Current_Pose>
				Animation_Set((anim_data_t *)&anim_data_swim_e);
 80050e2:	4829      	ldr	r0, [pc, #164]	; (8005188 <App_Loop+0x484>)
 80050e4:	f7ff fa74 	bl	80045d0 <Animation_Set>
				while(Animation_Is_Playing()){
 80050e8:	e001      	b.n	80050ee <App_Loop+0x3ea>
					Animation_Play();
 80050ea:	f7ff fdcd 	bl	8004c88 <Animation_Play>
				while(Animation_Is_Playing()){
 80050ee:	f7ff fa5f 	bl	80045b0 <Animation_Is_Playing>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1f8      	bne.n	80050ea <App_Loop+0x3e6>
				}
				LED_Set_Mode(LED_COOL_DOWN);
 80050f8:	2002      	movs	r0, #2
 80050fa:	f7fe fff5 	bl	80040e8 <LED_Set_Mode>
				app.cmd = PARSER_CMD_NONE;
 80050fe:	4b1f      	ldr	r3, [pc, #124]	; (800517c <App_Loop+0x478>)
 8005100:	2200      	movs	r2, #0
 8005102:	701a      	strb	r2, [r3, #0]
				app.cmd_time_ms = 0;
 8005104:	4b1d      	ldr	r3, [pc, #116]	; (800517c <App_Loop+0x478>)
 8005106:	2200      	movs	r2, #0
 8005108:	605a      	str	r2, [r3, #4]
			break;
 800510a:	e030      	b.n	800516e <App_Loop+0x46a>
			case PARSER_CMD_TRICK_2_WORKOUT:
				//Return from Workout
				Animation_Save_Current_Pose((float *)&anim_data_workout_e.data[0]);
 800510c:	481f      	ldr	r0, [pc, #124]	; (800518c <App_Loop+0x488>)
 800510e:	f7ff f9b9 	bl	8004484 <Animation_Save_Current_Pose>
				Animation_Set((anim_data_t *)&anim_data_workout_e);
 8005112:	481f      	ldr	r0, [pc, #124]	; (8005190 <App_Loop+0x48c>)
 8005114:	f7ff fa5c 	bl	80045d0 <Animation_Set>
				while(Animation_Is_Playing()){
 8005118:	e001      	b.n	800511e <App_Loop+0x41a>
					Animation_Play();
 800511a:	f7ff fdb5 	bl	8004c88 <Animation_Play>
				while(Animation_Is_Playing()){
 800511e:	f7ff fa47 	bl	80045b0 <Animation_Is_Playing>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1f8      	bne.n	800511a <App_Loop+0x416>
				}
				LED_Set_Mode(LED_COOL_DOWN);
 8005128:	2002      	movs	r0, #2
 800512a:	f7fe ffdd 	bl	80040e8 <LED_Set_Mode>
				app.cmd = PARSER_CMD_NONE;
 800512e:	4b13      	ldr	r3, [pc, #76]	; (800517c <App_Loop+0x478>)
 8005130:	2200      	movs	r2, #0
 8005132:	701a      	strb	r2, [r3, #0]
				app.cmd_time_ms = 0;
 8005134:	4b11      	ldr	r3, [pc, #68]	; (800517c <App_Loop+0x478>)
 8005136:	2200      	movs	r2, #0
 8005138:	605a      	str	r2, [r3, #4]
			break;
 800513a:	e018      	b.n	800516e <App_Loop+0x46a>
			case PARSER_CMD_TRICK_3_HELLO:
				//Return from Hello
				Animation_Save_Current_Pose((float *)&anim_data_hello_e.data[0]);
 800513c:	4815      	ldr	r0, [pc, #84]	; (8005194 <App_Loop+0x490>)
 800513e:	f7ff f9a1 	bl	8004484 <Animation_Save_Current_Pose>
				Animation_Set((anim_data_t *)&anim_data_hello_e);
 8005142:	4815      	ldr	r0, [pc, #84]	; (8005198 <App_Loop+0x494>)
 8005144:	f7ff fa44 	bl	80045d0 <Animation_Set>
				while(Animation_Is_Playing()){
 8005148:	e001      	b.n	800514e <App_Loop+0x44a>
					Animation_Play();
 800514a:	f7ff fd9d 	bl	8004c88 <Animation_Play>
				while(Animation_Is_Playing()){
 800514e:	f7ff fa2f 	bl	80045b0 <Animation_Is_Playing>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1f8      	bne.n	800514a <App_Loop+0x446>
				}
				LED_Set_Mode(LED_COOL_DOWN);
 8005158:	2002      	movs	r0, #2
 800515a:	f7fe ffc5 	bl	80040e8 <LED_Set_Mode>
				app.cmd = PARSER_CMD_NONE;
 800515e:	4b07      	ldr	r3, [pc, #28]	; (800517c <App_Loop+0x478>)
 8005160:	2200      	movs	r2, #0
 8005162:	701a      	strb	r2, [r3, #0]
				app.cmd_time_ms = 0;
 8005164:	4b05      	ldr	r3, [pc, #20]	; (800517c <App_Loop+0x478>)
 8005166:	2200      	movs	r2, #0
 8005168:	605a      	str	r2, [r3, #4]
			break;
 800516a:	e000      	b.n	800516e <App_Loop+0x46a>
		}
	}
 800516c:	bf00      	nop

	//Play animation if any
	Animation_Play();
 800516e:	f7ff fd8b 	bl	8004c88 <Animation_Play>
}
 8005172:	bf00      	nop
 8005174:	3708      	adds	r7, #8
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	20000d6c 	.word	0x20000d6c
 8005180:	08006dac 	.word	0x08006dac
 8005184:	20000068 	.word	0x20000068
 8005188:	20000058 	.word	0x20000058
 800518c:	20000178 	.word	0x20000178
 8005190:	20000168 	.word	0x20000168
 8005194:	20000268 	.word	0x20000268
 8005198:	20000258 	.word	0x20000258

0800519c <Parser_Update>:

uint8_t parser_symbols[] = {'?', '1', '2', '3', '4', '5', '6', 'L', 'K', 'D', 'E', 'F', 'G', 'H', 'I', 'J'};
uint8_t parser_lengths[] = {2, 4, 4, 4, 4, 4, 4, 7, 8, 3, 3, 2, 2, 2, 5, 16};
uint8_t parser_handshake[] = "#R";

uint8_t Parser_Update(uint8_t *data){
 800519c:	b590      	push	{r4, r7, lr}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
	uint8_t ret = PARSER_CMD_NONE;
 80051a4:	2300      	movs	r3, #0
 80051a6:	73fb      	strb	r3, [r7, #15]
	if(Bluetooth_Rx_Ready()){
 80051a8:	f7fe fd30 	bl	8003c0c <Bluetooth_Rx_Ready>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 8218 	beq.w	80055e4 <Parser_Update+0x448>
		switch(Bluetooth_Rx_Data()[1]){
 80051b4:	f7fe fd20 	bl	8003bf8 <Bluetooth_Rx_Data>
 80051b8:	4603      	mov	r3, r0
 80051ba:	3301      	adds	r3, #1
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	3b31      	subs	r3, #49	; 0x31
 80051c0:	2b1b      	cmp	r3, #27
 80051c2:	f200 820c 	bhi.w	80055de <Parser_Update+0x442>
 80051c6:	a201      	add	r2, pc, #4	; (adr r2, 80051cc <Parser_Update+0x30>)
 80051c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051cc:	08005247 	.word	0x08005247
 80051d0:	08005279 	.word	0x08005279
 80051d4:	080052ab 	.word	0x080052ab
 80051d8:	080052dd 	.word	0x080052dd
 80051dc:	0800530f 	.word	0x0800530f
 80051e0:	08005341 	.word	0x08005341
 80051e4:	080055df 	.word	0x080055df
 80051e8:	080055df 	.word	0x080055df
 80051ec:	080055df 	.word	0x080055df
 80051f0:	080055df 	.word	0x080055df
 80051f4:	080055df 	.word	0x080055df
 80051f8:	080055df 	.word	0x080055df
 80051fc:	080055df 	.word	0x080055df
 8005200:	080055df 	.word	0x080055df
 8005204:	0800523d 	.word	0x0800523d
 8005208:	080055df 	.word	0x080055df
 800520c:	080055df 	.word	0x080055df
 8005210:	080055df 	.word	0x080055df
 8005214:	080055df 	.word	0x080055df
 8005218:	08005479 	.word	0x08005479
 800521c:	080054ab 	.word	0x080054ab
 8005220:	080054d5 	.word	0x080054d5
 8005224:	080054f9 	.word	0x080054f9
 8005228:	080054ff 	.word	0x080054ff
 800522c:	08005515 	.word	0x08005515
 8005230:	0800559b 	.word	0x0800559b
 8005234:	080053e5 	.word	0x080053e5
 8005238:	08005373 	.word	0x08005373
			case '?':
				Bluetooth_Transmit((uint8_t *)&parser_handshake[0], 2);
 800523c:	2102      	movs	r1, #2
 800523e:	48b2      	ldr	r0, [pc, #712]	; (8005508 <Parser_Update+0x36c>)
 8005240:	f7fe fcc2 	bl	8003bc8 <Bluetooth_Transmit>
			break;
 8005244:	e1cb      	b.n	80055de <Parser_Update+0x442>
			case '1':
				switch(Bluetooth_Rx_Data()[3]){
 8005246:	f7fe fcd7 	bl	8003bf8 <Bluetooth_Rx_Data>
 800524a:	4603      	mov	r3, r0
 800524c:	3303      	adds	r3, #3
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	2b33      	cmp	r3, #51	; 0x33
 8005252:	d00d      	beq.n	8005270 <Parser_Update+0xd4>
 8005254:	2b33      	cmp	r3, #51	; 0x33
 8005256:	f300 81b1 	bgt.w	80055bc <Parser_Update+0x420>
 800525a:	2b31      	cmp	r3, #49	; 0x31
 800525c:	d002      	beq.n	8005264 <Parser_Update+0xc8>
 800525e:	2b32      	cmp	r3, #50	; 0x32
 8005260:	d003      	beq.n	800526a <Parser_Update+0xce>
					break;
					case '3':
						ret = PARSER_CMD_FORAWRD_3;
					break;
				}
			break;
 8005262:	e1ab      	b.n	80055bc <Parser_Update+0x420>
						ret = PARSER_CMD_FORAWRD_1;
 8005264:	2301      	movs	r3, #1
 8005266:	73fb      	strb	r3, [r7, #15]
					break;
 8005268:	e005      	b.n	8005276 <Parser_Update+0xda>
						ret = PARSER_CMD_FORAWRD_2;
 800526a:	2302      	movs	r3, #2
 800526c:	73fb      	strb	r3, [r7, #15]
					break;
 800526e:	e002      	b.n	8005276 <Parser_Update+0xda>
						ret = PARSER_CMD_FORAWRD_3;
 8005270:	2303      	movs	r3, #3
 8005272:	73fb      	strb	r3, [r7, #15]
					break;
 8005274:	bf00      	nop
			break;
 8005276:	e1a1      	b.n	80055bc <Parser_Update+0x420>
			case '2':
				switch(Bluetooth_Rx_Data()[3]){
 8005278:	f7fe fcbe 	bl	8003bf8 <Bluetooth_Rx_Data>
 800527c:	4603      	mov	r3, r0
 800527e:	3303      	adds	r3, #3
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	2b33      	cmp	r3, #51	; 0x33
 8005284:	d00d      	beq.n	80052a2 <Parser_Update+0x106>
 8005286:	2b33      	cmp	r3, #51	; 0x33
 8005288:	f300 819a 	bgt.w	80055c0 <Parser_Update+0x424>
 800528c:	2b31      	cmp	r3, #49	; 0x31
 800528e:	d002      	beq.n	8005296 <Parser_Update+0xfa>
 8005290:	2b32      	cmp	r3, #50	; 0x32
 8005292:	d003      	beq.n	800529c <Parser_Update+0x100>
					break;
					case '3':
						ret = PARSER_CMD_BACKWARD_3;
					break;
				}
			break;
 8005294:	e194      	b.n	80055c0 <Parser_Update+0x424>
						ret = PARSER_CMD_BACKWARD_1;
 8005296:	2304      	movs	r3, #4
 8005298:	73fb      	strb	r3, [r7, #15]
					break;
 800529a:	e005      	b.n	80052a8 <Parser_Update+0x10c>
						ret = PARSER_CMD_BACKWARD_2;
 800529c:	2305      	movs	r3, #5
 800529e:	73fb      	strb	r3, [r7, #15]
					break;
 80052a0:	e002      	b.n	80052a8 <Parser_Update+0x10c>
						ret = PARSER_CMD_BACKWARD_3;
 80052a2:	2306      	movs	r3, #6
 80052a4:	73fb      	strb	r3, [r7, #15]
					break;
 80052a6:	bf00      	nop
			break;
 80052a8:	e18a      	b.n	80055c0 <Parser_Update+0x424>
			case '3':
				switch(Bluetooth_Rx_Data()[3]){
 80052aa:	f7fe fca5 	bl	8003bf8 <Bluetooth_Rx_Data>
 80052ae:	4603      	mov	r3, r0
 80052b0:	3303      	adds	r3, #3
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	2b33      	cmp	r3, #51	; 0x33
 80052b6:	d00d      	beq.n	80052d4 <Parser_Update+0x138>
 80052b8:	2b33      	cmp	r3, #51	; 0x33
 80052ba:	f300 8183 	bgt.w	80055c4 <Parser_Update+0x428>
 80052be:	2b31      	cmp	r3, #49	; 0x31
 80052c0:	d002      	beq.n	80052c8 <Parser_Update+0x12c>
 80052c2:	2b32      	cmp	r3, #50	; 0x32
 80052c4:	d003      	beq.n	80052ce <Parser_Update+0x132>
					break;
					case '3':
						ret = PARSER_CMD_TURN_RIGHT_3;
					break;
				}
			break;
 80052c6:	e17d      	b.n	80055c4 <Parser_Update+0x428>
						ret = PARSER_CMD_TURN_RIGHT_1;
 80052c8:	230a      	movs	r3, #10
 80052ca:	73fb      	strb	r3, [r7, #15]
					break;
 80052cc:	e005      	b.n	80052da <Parser_Update+0x13e>
						ret = PARSER_CMD_TURN_RIGHT_2;
 80052ce:	230b      	movs	r3, #11
 80052d0:	73fb      	strb	r3, [r7, #15]
					break;
 80052d2:	e002      	b.n	80052da <Parser_Update+0x13e>
						ret = PARSER_CMD_TURN_RIGHT_3;
 80052d4:	230c      	movs	r3, #12
 80052d6:	73fb      	strb	r3, [r7, #15]
					break;
 80052d8:	bf00      	nop
			break;
 80052da:	e173      	b.n	80055c4 <Parser_Update+0x428>
			case '4':
				switch(Bluetooth_Rx_Data()[3]){
 80052dc:	f7fe fc8c 	bl	8003bf8 <Bluetooth_Rx_Data>
 80052e0:	4603      	mov	r3, r0
 80052e2:	3303      	adds	r3, #3
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	2b33      	cmp	r3, #51	; 0x33
 80052e8:	d00d      	beq.n	8005306 <Parser_Update+0x16a>
 80052ea:	2b33      	cmp	r3, #51	; 0x33
 80052ec:	f300 816c 	bgt.w	80055c8 <Parser_Update+0x42c>
 80052f0:	2b31      	cmp	r3, #49	; 0x31
 80052f2:	d002      	beq.n	80052fa <Parser_Update+0x15e>
 80052f4:	2b32      	cmp	r3, #50	; 0x32
 80052f6:	d003      	beq.n	8005300 <Parser_Update+0x164>
					break;
					case '3':
						ret = PARSER_CMD_TURN_LEFT_3;
					break;
				}
			break;
 80052f8:	e166      	b.n	80055c8 <Parser_Update+0x42c>
						ret = PARSER_CMD_TURN_LEFT_1;
 80052fa:	2307      	movs	r3, #7
 80052fc:	73fb      	strb	r3, [r7, #15]
					break;
 80052fe:	e005      	b.n	800530c <Parser_Update+0x170>
						ret = PARSER_CMD_TURN_LEFT_2;
 8005300:	2308      	movs	r3, #8
 8005302:	73fb      	strb	r3, [r7, #15]
					break;
 8005304:	e002      	b.n	800530c <Parser_Update+0x170>
						ret = PARSER_CMD_TURN_LEFT_3;
 8005306:	2309      	movs	r3, #9
 8005308:	73fb      	strb	r3, [r7, #15]
					break;
 800530a:	bf00      	nop
			break;
 800530c:	e15c      	b.n	80055c8 <Parser_Update+0x42c>
			case '5':
				switch(Bluetooth_Rx_Data()[3]){
 800530e:	f7fe fc73 	bl	8003bf8 <Bluetooth_Rx_Data>
 8005312:	4603      	mov	r3, r0
 8005314:	3303      	adds	r3, #3
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	2b33      	cmp	r3, #51	; 0x33
 800531a:	d00d      	beq.n	8005338 <Parser_Update+0x19c>
 800531c:	2b33      	cmp	r3, #51	; 0x33
 800531e:	f300 8155 	bgt.w	80055cc <Parser_Update+0x430>
 8005322:	2b31      	cmp	r3, #49	; 0x31
 8005324:	d002      	beq.n	800532c <Parser_Update+0x190>
 8005326:	2b32      	cmp	r3, #50	; 0x32
 8005328:	d003      	beq.n	8005332 <Parser_Update+0x196>
					break;
					case '3':
						ret = PARSER_CMD_SLIDE_LEFT_3;
					break;
				}
			break;
 800532a:	e14f      	b.n	80055cc <Parser_Update+0x430>
						ret = PARSER_CMD_SLIDE_LEFT_1;
 800532c:	230d      	movs	r3, #13
 800532e:	73fb      	strb	r3, [r7, #15]
					break;
 8005330:	e005      	b.n	800533e <Parser_Update+0x1a2>
						ret = PARSER_CMD_SLIDE_LEFT_2;
 8005332:	230e      	movs	r3, #14
 8005334:	73fb      	strb	r3, [r7, #15]
					break;
 8005336:	e002      	b.n	800533e <Parser_Update+0x1a2>
						ret = PARSER_CMD_SLIDE_LEFT_3;
 8005338:	230f      	movs	r3, #15
 800533a:	73fb      	strb	r3, [r7, #15]
					break;
 800533c:	bf00      	nop
			break;
 800533e:	e145      	b.n	80055cc <Parser_Update+0x430>
			case '6':
				switch(Bluetooth_Rx_Data()[3]){
 8005340:	f7fe fc5a 	bl	8003bf8 <Bluetooth_Rx_Data>
 8005344:	4603      	mov	r3, r0
 8005346:	3303      	adds	r3, #3
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	2b33      	cmp	r3, #51	; 0x33
 800534c:	d00d      	beq.n	800536a <Parser_Update+0x1ce>
 800534e:	2b33      	cmp	r3, #51	; 0x33
 8005350:	f300 813e 	bgt.w	80055d0 <Parser_Update+0x434>
 8005354:	2b31      	cmp	r3, #49	; 0x31
 8005356:	d002      	beq.n	800535e <Parser_Update+0x1c2>
 8005358:	2b32      	cmp	r3, #50	; 0x32
 800535a:	d003      	beq.n	8005364 <Parser_Update+0x1c8>
					break;
					case '3':
						ret = PARSER_CMD_SLIDE_RIGHT_3;
					break;
				}
			break;
 800535c:	e138      	b.n	80055d0 <Parser_Update+0x434>
						ret = PARSER_CMD_SLIDE_RIGHT_1;
 800535e:	2310      	movs	r3, #16
 8005360:	73fb      	strb	r3, [r7, #15]
					break;
 8005362:	e005      	b.n	8005370 <Parser_Update+0x1d4>
						ret = PARSER_CMD_SLIDE_RIGHT_2;
 8005364:	2311      	movs	r3, #17
 8005366:	73fb      	strb	r3, [r7, #15]
					break;
 8005368:	e002      	b.n	8005370 <Parser_Update+0x1d4>
						ret = PARSER_CMD_SLIDE_RIGHT_3;
 800536a:	2312      	movs	r3, #18
 800536c:	73fb      	strb	r3, [r7, #15]
					break;
 800536e:	bf00      	nop
			break;
 8005370:	e12e      	b.n	80055d0 <Parser_Update+0x434>
			case 'L':
				//Kick
				//Data [DIRECTION][STRENGTH]
				data[0] = ((Bluetooth_Rx_Data()[2] - 48) * 10) + (Bluetooth_Rx_Data()[3] - 48);
 8005372:	f7fe fc41 	bl	8003bf8 <Bluetooth_Rx_Data>
 8005376:	4603      	mov	r3, r0
 8005378:	3302      	adds	r3, #2
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	461a      	mov	r2, r3
 800537e:	0092      	lsls	r2, r2, #2
 8005380:	4413      	add	r3, r2
 8005382:	005b      	lsls	r3, r3, #1
 8005384:	b2dc      	uxtb	r4, r3
 8005386:	f7fe fc37 	bl	8003bf8 <Bluetooth_Rx_Data>
 800538a:	4603      	mov	r3, r0
 800538c:	3303      	adds	r3, #3
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	4423      	add	r3, r4
 8005392:	b2db      	uxtb	r3, r3
 8005394:	3b10      	subs	r3, #16
 8005396:	b2da      	uxtb	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	701a      	strb	r2, [r3, #0]
				data[1] = ((Bluetooth_Rx_Data()[5] - 48) * 10) + (Bluetooth_Rx_Data()[6] - 48);
 800539c:	f7fe fc2c 	bl	8003bf8 <Bluetooth_Rx_Data>
 80053a0:	4603      	mov	r3, r0
 80053a2:	3305      	adds	r3, #5
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	461a      	mov	r2, r3
 80053a8:	0092      	lsls	r2, r2, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	b2dc      	uxtb	r4, r3
 80053b0:	f7fe fc22 	bl	8003bf8 <Bluetooth_Rx_Data>
 80053b4:	4603      	mov	r3, r0
 80053b6:	3306      	adds	r3, #6
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	4423      	add	r3, r4
 80053bc:	b2da      	uxtb	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	3301      	adds	r3, #1
 80053c2:	3a10      	subs	r2, #16
 80053c4:	b2d2      	uxtb	r2, r2
 80053c6:	701a      	strb	r2, [r3, #0]
				if((data[0] <= ANIM_DATA_KICK_DIRECTION_MAX) && (data[1] <= ANIM_DATA_KICK_STRENGTH_MAX)){
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	2b5a      	cmp	r3, #90	; 0x5a
 80053ce:	f200 8101 	bhi.w	80055d4 <Parser_Update+0x438>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	3301      	adds	r3, #1
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b50      	cmp	r3, #80	; 0x50
 80053da:	f200 80fb 	bhi.w	80055d4 <Parser_Update+0x438>
					ret = PARSER_CMD_KICK;
 80053de:	2313      	movs	r3, #19
 80053e0:	73fb      	strb	r3, [r7, #15]
				}
			break;
 80053e2:	e0f7      	b.n	80055d4 <Parser_Update+0x438>
			case 'K':
				//Drive
				//Data [DIRECTION][STRENGTH]
				data[0] = ((Bluetooth_Rx_Data()[2] - 48) * 100) + ((Bluetooth_Rx_Data()[3] - 48) * 10) + (Bluetooth_Rx_Data()[4] - 48);
 80053e4:	f7fe fc08 	bl	8003bf8 <Bluetooth_Rx_Data>
 80053e8:	4603      	mov	r3, r0
 80053ea:	3302      	adds	r3, #2
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	0092      	lsls	r2, r2, #2
 80053f2:	4413      	add	r3, r2
 80053f4:	461a      	mov	r2, r3
 80053f6:	0091      	lsls	r1, r2, #2
 80053f8:	461a      	mov	r2, r3
 80053fa:	460b      	mov	r3, r1
 80053fc:	4413      	add	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	b2dc      	uxtb	r4, r3
 8005402:	f7fe fbf9 	bl	8003bf8 <Bluetooth_Rx_Data>
 8005406:	4603      	mov	r3, r0
 8005408:	3303      	adds	r3, #3
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	461a      	mov	r2, r3
 800540e:	0092      	lsls	r2, r2, #2
 8005410:	4413      	add	r3, r2
 8005412:	005b      	lsls	r3, r3, #1
 8005414:	b2db      	uxtb	r3, r3
 8005416:	4423      	add	r3, r4
 8005418:	b2dc      	uxtb	r4, r3
 800541a:	f7fe fbed 	bl	8003bf8 <Bluetooth_Rx_Data>
 800541e:	4603      	mov	r3, r0
 8005420:	3304      	adds	r3, #4
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	4423      	add	r3, r4
 8005426:	b2db      	uxtb	r3, r3
 8005428:	3330      	adds	r3, #48	; 0x30
 800542a:	b2da      	uxtb	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	701a      	strb	r2, [r3, #0]
				data[1] = ((Bluetooth_Rx_Data()[6] - 48) * 10) + (Bluetooth_Rx_Data()[7] - 48);
 8005430:	f7fe fbe2 	bl	8003bf8 <Bluetooth_Rx_Data>
 8005434:	4603      	mov	r3, r0
 8005436:	3306      	adds	r3, #6
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	461a      	mov	r2, r3
 800543c:	0092      	lsls	r2, r2, #2
 800543e:	4413      	add	r3, r2
 8005440:	005b      	lsls	r3, r3, #1
 8005442:	b2dc      	uxtb	r4, r3
 8005444:	f7fe fbd8 	bl	8003bf8 <Bluetooth_Rx_Data>
 8005448:	4603      	mov	r3, r0
 800544a:	3307      	adds	r3, #7
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	4423      	add	r3, r4
 8005450:	b2da      	uxtb	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	3301      	adds	r3, #1
 8005456:	3a10      	subs	r2, #16
 8005458:	b2d2      	uxtb	r2, r2
 800545a:	701a      	strb	r2, [r3, #0]
				if((data[0] <= ANIM_DATA_DRIVE_DIRECTION_MAX) && (data[1] <= ANIM_DATA_DRIVE_SPEED_MAX)){
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2bb4      	cmp	r3, #180	; 0xb4
 8005462:	f200 80b9 	bhi.w	80055d8 <Parser_Update+0x43c>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	3301      	adds	r3, #1
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	2b50      	cmp	r3, #80	; 0x50
 800546e:	f200 80b3 	bhi.w	80055d8 <Parser_Update+0x43c>
					ret = PARSER_CMD_DRIVE;
 8005472:	2314      	movs	r3, #20
 8005474:	73fb      	strb	r3, [r7, #15]
				}
			break;
 8005476:	e0af      	b.n	80055d8 <Parser_Update+0x43c>
			case 'D':
				//Tricks
				switch(Bluetooth_Rx_Data()[2]){
 8005478:	f7fe fbbe 	bl	8003bf8 <Bluetooth_Rx_Data>
 800547c:	4603      	mov	r3, r0
 800547e:	3302      	adds	r3, #2
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	2b33      	cmp	r3, #51	; 0x33
 8005484:	d00d      	beq.n	80054a2 <Parser_Update+0x306>
 8005486:	2b33      	cmp	r3, #51	; 0x33
 8005488:	f300 80a8 	bgt.w	80055dc <Parser_Update+0x440>
 800548c:	2b31      	cmp	r3, #49	; 0x31
 800548e:	d002      	beq.n	8005496 <Parser_Update+0x2fa>
 8005490:	2b32      	cmp	r3, #50	; 0x32
 8005492:	d003      	beq.n	800549c <Parser_Update+0x300>
					break;
					case '3':
						ret = PARSER_CMD_TRICK_3_HELLO;
					break;
				}
			break;
 8005494:	e0a2      	b.n	80055dc <Parser_Update+0x440>
						ret = PARSER_CMD_TRICK_1_SWIM;
 8005496:	2315      	movs	r3, #21
 8005498:	73fb      	strb	r3, [r7, #15]
					break;
 800549a:	e005      	b.n	80054a8 <Parser_Update+0x30c>
						ret = PARSER_CMD_TRICK_2_WORKOUT;
 800549c:	2316      	movs	r3, #22
 800549e:	73fb      	strb	r3, [r7, #15]
					break;
 80054a0:	e002      	b.n	80054a8 <Parser_Update+0x30c>
						ret = PARSER_CMD_TRICK_3_HELLO;
 80054a2:	2317      	movs	r3, #23
 80054a4:	73fb      	strb	r3, [r7, #15]
					break;
 80054a6:	bf00      	nop
			break;
 80054a8:	e098      	b.n	80055dc <Parser_Update+0x440>
			case 'E':
				//LED Enable/disable from settings page
				LED_Enable(Bluetooth_Rx_Data()[2] - 48);
 80054aa:	f7fe fba5 	bl	8003bf8 <Bluetooth_Rx_Data>
 80054ae:	4603      	mov	r3, r0
 80054b0:	3302      	adds	r3, #2
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	3b30      	subs	r3, #48	; 0x30
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7fe fe2f 	bl	800411c <LED_Enable>
				Settings_Write_LED(Bluetooth_Rx_Data()[2] - 48);
 80054be:	f7fe fb9b 	bl	8003bf8 <Bluetooth_Rx_Data>
 80054c2:	4603      	mov	r3, r0
 80054c4:	3302      	adds	r3, #2
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	3b30      	subs	r3, #48	; 0x30
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fa03 	bl	80058d8 <Settings_Write_LED>
			break;
 80054d2:	e084      	b.n	80055de <Parser_Update+0x442>
			case 'F':
				//Settings page opened
				Animation_Stop();
 80054d4:	f7ff f8a6 	bl	8004624 <Animation_Stop>
				LED_Set_Mode(LED_CONSTANT);
 80054d8:	2000      	movs	r0, #0
 80054da:	f7fe fe05 	bl	80040e8 <LED_Set_Mode>
				Servo_Set((float *)&anim_data_calib[0]);
 80054de:	480b      	ldr	r0, [pc, #44]	; (800550c <Parser_Update+0x370>)
 80054e0:	f7fe fe62 	bl	80041a8 <Servo_Set>
				Bluetooth_Transmit(Settings_Data(), 34);
 80054e4:	f000 f9a0 	bl	8005828 <Settings_Data>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2122      	movs	r1, #34	; 0x22
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7fe fb6b 	bl	8003bc8 <Bluetooth_Transmit>
				ret = PARSER_CMD_SETT;
 80054f2:	2318      	movs	r3, #24
 80054f4:	73fb      	strb	r3, [r7, #15]
			break;
 80054f6:	e072      	b.n	80055de <Parser_Update+0x442>
			case 'G':
				//Write settings to flash request
				Settings_Write();
 80054f8:	f000 f918 	bl	800572c <Settings_Write>
			break;
 80054fc:	e06f      	b.n	80055de <Parser_Update+0x442>
			case 'H':
				//Settings page closed
				Servo_Set((float *)&anim_data_standby[0]);
 80054fe:	4804      	ldr	r0, [pc, #16]	; (8005510 <Parser_Update+0x374>)
 8005500:	f7fe fe52 	bl	80041a8 <Servo_Set>
			break;
 8005504:	e06b      	b.n	80055de <Parser_Update+0x442>
 8005506:	bf00      	nop
 8005508:	20000358 	.word	0x20000358
 800550c:	08006dcc 	.word	0x08006dcc
 8005510:	08006dac 	.word	0x08006dac
			case 'I':
				//Servo calibration reqeuest
				if(Bluetooth_Rx_Data()[2] == '-'){
 8005514:	f7fe fb70 	bl	8003bf8 <Bluetooth_Rx_Data>
 8005518:	4603      	mov	r3, r0
 800551a:	3302      	adds	r3, #2
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b2d      	cmp	r3, #45	; 0x2d
 8005520:	d11e      	bne.n	8005560 <Parser_Update+0x3c4>
					Servo_Set_Calib((int8_t)(Bluetooth_Rx_Data()[3]-48) - (2 * (Bluetooth_Rx_Data()[3]-48)), Bluetooth_Rx_Data()[4]-48);
 8005522:	f7fe fb69 	bl	8003bf8 <Bluetooth_Rx_Data>
 8005526:	4603      	mov	r3, r0
 8005528:	3303      	adds	r3, #3
 800552a:	781c      	ldrb	r4, [r3, #0]
 800552c:	f7fe fb64 	bl	8003bf8 <Bluetooth_Rx_Data>
 8005530:	4603      	mov	r3, r0
 8005532:	3303      	adds	r3, #3
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	3b30      	subs	r3, #48	; 0x30
 8005538:	b2db      	uxtb	r3, r3
 800553a:	005b      	lsls	r3, r3, #1
 800553c:	b2db      	uxtb	r3, r3
 800553e:	1ae3      	subs	r3, r4, r3
 8005540:	b2db      	uxtb	r3, r3
 8005542:	3b30      	subs	r3, #48	; 0x30
 8005544:	b2db      	uxtb	r3, r3
 8005546:	b25c      	sxtb	r4, r3
 8005548:	f7fe fb56 	bl	8003bf8 <Bluetooth_Rx_Data>
 800554c:	4603      	mov	r3, r0
 800554e:	3304      	adds	r3, #4
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	3b30      	subs	r3, #48	; 0x30
 8005554:	b2db      	uxtb	r3, r3
 8005556:	4619      	mov	r1, r3
 8005558:	4620      	mov	r0, r4
 800555a:	f7fe fe0b 	bl	8004174 <Servo_Set_Calib>
 800555e:	e012      	b.n	8005586 <Parser_Update+0x3ea>
				}else{
					Servo_Set_Calib(Bluetooth_Rx_Data()[3]-48, Bluetooth_Rx_Data()[4]-48);
 8005560:	f7fe fb4a 	bl	8003bf8 <Bluetooth_Rx_Data>
 8005564:	4603      	mov	r3, r0
 8005566:	3303      	adds	r3, #3
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	3b30      	subs	r3, #48	; 0x30
 800556c:	b2db      	uxtb	r3, r3
 800556e:	b25c      	sxtb	r4, r3
 8005570:	f7fe fb42 	bl	8003bf8 <Bluetooth_Rx_Data>
 8005574:	4603      	mov	r3, r0
 8005576:	3304      	adds	r3, #4
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	3b30      	subs	r3, #48	; 0x30
 800557c:	b2db      	uxtb	r3, r3
 800557e:	4619      	mov	r1, r3
 8005580:	4620      	mov	r0, r4
 8005582:	f7fe fdf7 	bl	8004174 <Servo_Set_Calib>
				}
				Settings_Set_Calib(Servo_Calib_Data());
 8005586:	f7fe fdeb 	bl	8004160 <Servo_Calib_Data>
 800558a:	4603      	mov	r3, r0
 800558c:	4618      	mov	r0, r3
 800558e:	f000 f955 	bl	800583c <Settings_Set_Calib>
				Servo_Set((float *)&anim_data_calib[0]);
 8005592:	481c      	ldr	r0, [pc, #112]	; (8005604 <Parser_Update+0x468>)
 8005594:	f7fe fe08 	bl	80041a8 <Servo_Set>
			break;
 8005598:	e021      	b.n	80055de <Parser_Update+0x442>
			case 'J':
				//Bluetooth name/password change request
				Settings_Write_Bluetooth(&Bluetooth_Rx_Data()[12], &Bluetooth_Rx_Data()[2]);
 800559a:	f7fe fb2d 	bl	8003bf8 <Bluetooth_Rx_Data>
 800559e:	4603      	mov	r3, r0
 80055a0:	f103 040c 	add.w	r4, r3, #12
 80055a4:	f7fe fb28 	bl	8003bf8 <Bluetooth_Rx_Data>
 80055a8:	4603      	mov	r3, r0
 80055aa:	3302      	adds	r3, #2
 80055ac:	4619      	mov	r1, r3
 80055ae:	4620      	mov	r0, r4
 80055b0:	f000 f9a6 	bl	8005900 <Settings_Write_Bluetooth>
				Servo_Set((float *)&anim_data_standby[0]);
 80055b4:	4814      	ldr	r0, [pc, #80]	; (8005608 <Parser_Update+0x46c>)
 80055b6:	f7fe fdf7 	bl	80041a8 <Servo_Set>
			break;
 80055ba:	e010      	b.n	80055de <Parser_Update+0x442>
			break;
 80055bc:	bf00      	nop
 80055be:	e00e      	b.n	80055de <Parser_Update+0x442>
			break;
 80055c0:	bf00      	nop
 80055c2:	e00c      	b.n	80055de <Parser_Update+0x442>
			break;
 80055c4:	bf00      	nop
 80055c6:	e00a      	b.n	80055de <Parser_Update+0x442>
			break;
 80055c8:	bf00      	nop
 80055ca:	e008      	b.n	80055de <Parser_Update+0x442>
			break;
 80055cc:	bf00      	nop
 80055ce:	e006      	b.n	80055de <Parser_Update+0x442>
			break;
 80055d0:	bf00      	nop
 80055d2:	e004      	b.n	80055de <Parser_Update+0x442>
			break;
 80055d4:	bf00      	nop
 80055d6:	e002      	b.n	80055de <Parser_Update+0x442>
			break;
 80055d8:	bf00      	nop
 80055da:	e000      	b.n	80055de <Parser_Update+0x442>
			break;
 80055dc:	bf00      	nop
		}
		Bluetooth_Listen();
 80055de:	f7fe fad5 	bl	8003b8c <Bluetooth_Listen>
 80055e2:	e009      	b.n	80055f8 <Parser_Update+0x45c>
	}else if(!Bluetooth_Connected_Debounce()){
 80055e4:	f7fe f9fa 	bl	80039dc <Bluetooth_Connected_Debounce>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d104      	bne.n	80055f8 <Parser_Update+0x45c>
		Animation_Stop();
 80055ee:	f7ff f819 	bl	8004624 <Animation_Stop>
		Servo_Set((float *)&anim_data_standby[0]);
 80055f2:	4805      	ldr	r0, [pc, #20]	; (8005608 <Parser_Update+0x46c>)
 80055f4:	f7fe fdd8 	bl	80041a8 <Servo_Set>
	}
	return ret;
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd90      	pop	{r4, r7, pc}
 8005602:	bf00      	nop
 8005604:	08006dcc 	.word	0x08006dcc
 8005608:	08006dac 	.word	0x08006dac

0800560c <Parser_Init>:
void Parser_Init(){
 800560c:	b580      	push	{r7, lr}
 800560e:	af00      	add	r7, sp, #0
	Bluetooth_Init('#', parser_symbols, parser_lengths, sizeof(parser_lengths));
 8005610:	2310      	movs	r3, #16
 8005612:	4a03      	ldr	r2, [pc, #12]	; (8005620 <Parser_Init+0x14>)
 8005614:	4903      	ldr	r1, [pc, #12]	; (8005624 <Parser_Init+0x18>)
 8005616:	2023      	movs	r0, #35	; 0x23
 8005618:	f7fe fb0a 	bl	8003c30 <Bluetooth_Init>
}
 800561c:	bf00      	nop
 800561e:	bd80      	pop	{r7, pc}
 8005620:	20000348 	.word	0x20000348
 8005624:	20000338 	.word	0x20000338

08005628 <Settings_Verify>:
#include "Device/servo.h"

static uint8_t settings_act[35];
static const uint8_t settings_def[35] = "#C+0+0+0+0+0+0+0+01234Quadruped 1\n";

uint8_t Settings_Verify(){
 8005628:	b480      	push	{r7}
 800562a:	af00      	add	r7, sp, #0
	if(
		(settings_act[0] != '#')||
 800562c:	4b3e      	ldr	r3, [pc, #248]	; (8005728 <Settings_Verify+0x100>)
 800562e:	781b      	ldrb	r3, [r3, #0]
	if(
 8005630:	2b23      	cmp	r3, #35	; 0x23
 8005632:	d172      	bne.n	800571a <Settings_Verify+0xf2>
		(settings_act[1] != 'C')||
 8005634:	4b3c      	ldr	r3, [pc, #240]	; (8005728 <Settings_Verify+0x100>)
 8005636:	785b      	ldrb	r3, [r3, #1]
		(settings_act[0] != '#')||
 8005638:	2b43      	cmp	r3, #67	; 0x43
 800563a:	d16e      	bne.n	800571a <Settings_Verify+0xf2>
		((settings_act[2] != '+') && (settings_act[2] != '-')) ||
 800563c:	4b3a      	ldr	r3, [pc, #232]	; (8005728 <Settings_Verify+0x100>)
 800563e:	789b      	ldrb	r3, [r3, #2]
		(settings_act[1] != 'C')||
 8005640:	2b2b      	cmp	r3, #43	; 0x2b
 8005642:	d003      	beq.n	800564c <Settings_Verify+0x24>
		((settings_act[2] != '+') && (settings_act[2] != '-')) ||
 8005644:	4b38      	ldr	r3, [pc, #224]	; (8005728 <Settings_Verify+0x100>)
 8005646:	789b      	ldrb	r3, [r3, #2]
 8005648:	2b2d      	cmp	r3, #45	; 0x2d
 800564a:	d166      	bne.n	800571a <Settings_Verify+0xf2>
		((settings_act[4] != '+') && (settings_act[4] != '-')) ||
 800564c:	4b36      	ldr	r3, [pc, #216]	; (8005728 <Settings_Verify+0x100>)
 800564e:	791b      	ldrb	r3, [r3, #4]
		((settings_act[2] != '+') && (settings_act[2] != '-')) ||
 8005650:	2b2b      	cmp	r3, #43	; 0x2b
 8005652:	d003      	beq.n	800565c <Settings_Verify+0x34>
		((settings_act[4] != '+') && (settings_act[4] != '-')) ||
 8005654:	4b34      	ldr	r3, [pc, #208]	; (8005728 <Settings_Verify+0x100>)
 8005656:	791b      	ldrb	r3, [r3, #4]
 8005658:	2b2d      	cmp	r3, #45	; 0x2d
 800565a:	d15e      	bne.n	800571a <Settings_Verify+0xf2>
		((settings_act[6] != '+') && (settings_act[6] != '-')) ||
 800565c:	4b32      	ldr	r3, [pc, #200]	; (8005728 <Settings_Verify+0x100>)
 800565e:	799b      	ldrb	r3, [r3, #6]
		((settings_act[4] != '+') && (settings_act[4] != '-')) ||
 8005660:	2b2b      	cmp	r3, #43	; 0x2b
 8005662:	d003      	beq.n	800566c <Settings_Verify+0x44>
		((settings_act[6] != '+') && (settings_act[6] != '-')) ||
 8005664:	4b30      	ldr	r3, [pc, #192]	; (8005728 <Settings_Verify+0x100>)
 8005666:	799b      	ldrb	r3, [r3, #6]
 8005668:	2b2d      	cmp	r3, #45	; 0x2d
 800566a:	d156      	bne.n	800571a <Settings_Verify+0xf2>
		((settings_act[8] != '+') && (settings_act[8] != '-')) ||
 800566c:	4b2e      	ldr	r3, [pc, #184]	; (8005728 <Settings_Verify+0x100>)
 800566e:	7a1b      	ldrb	r3, [r3, #8]
		((settings_act[6] != '+') && (settings_act[6] != '-')) ||
 8005670:	2b2b      	cmp	r3, #43	; 0x2b
 8005672:	d003      	beq.n	800567c <Settings_Verify+0x54>
		((settings_act[8] != '+') && (settings_act[8] != '-')) ||
 8005674:	4b2c      	ldr	r3, [pc, #176]	; (8005728 <Settings_Verify+0x100>)
 8005676:	7a1b      	ldrb	r3, [r3, #8]
 8005678:	2b2d      	cmp	r3, #45	; 0x2d
 800567a:	d14e      	bne.n	800571a <Settings_Verify+0xf2>
		((settings_act[10] != '+') && (settings_act[10] != '-')) ||
 800567c:	4b2a      	ldr	r3, [pc, #168]	; (8005728 <Settings_Verify+0x100>)
 800567e:	7a9b      	ldrb	r3, [r3, #10]
		((settings_act[8] != '+') && (settings_act[8] != '-')) ||
 8005680:	2b2b      	cmp	r3, #43	; 0x2b
 8005682:	d003      	beq.n	800568c <Settings_Verify+0x64>
		((settings_act[10] != '+') && (settings_act[10] != '-')) ||
 8005684:	4b28      	ldr	r3, [pc, #160]	; (8005728 <Settings_Verify+0x100>)
 8005686:	7a9b      	ldrb	r3, [r3, #10]
 8005688:	2b2d      	cmp	r3, #45	; 0x2d
 800568a:	d146      	bne.n	800571a <Settings_Verify+0xf2>
		((settings_act[12] != '+') && (settings_act[12] != '-')) ||
 800568c:	4b26      	ldr	r3, [pc, #152]	; (8005728 <Settings_Verify+0x100>)
 800568e:	7b1b      	ldrb	r3, [r3, #12]
		((settings_act[10] != '+') && (settings_act[10] != '-')) ||
 8005690:	2b2b      	cmp	r3, #43	; 0x2b
 8005692:	d003      	beq.n	800569c <Settings_Verify+0x74>
		((settings_act[12] != '+') && (settings_act[12] != '-')) ||
 8005694:	4b24      	ldr	r3, [pc, #144]	; (8005728 <Settings_Verify+0x100>)
 8005696:	7b1b      	ldrb	r3, [r3, #12]
 8005698:	2b2d      	cmp	r3, #45	; 0x2d
 800569a:	d13e      	bne.n	800571a <Settings_Verify+0xf2>
		((settings_act[14] != '+') && (settings_act[14] != '-')) ||
 800569c:	4b22      	ldr	r3, [pc, #136]	; (8005728 <Settings_Verify+0x100>)
 800569e:	7b9b      	ldrb	r3, [r3, #14]
		((settings_act[12] != '+') && (settings_act[12] != '-')) ||
 80056a0:	2b2b      	cmp	r3, #43	; 0x2b
 80056a2:	d003      	beq.n	80056ac <Settings_Verify+0x84>
		((settings_act[14] != '+') && (settings_act[14] != '-')) ||
 80056a4:	4b20      	ldr	r3, [pc, #128]	; (8005728 <Settings_Verify+0x100>)
 80056a6:	7b9b      	ldrb	r3, [r3, #14]
 80056a8:	2b2d      	cmp	r3, #45	; 0x2d
 80056aa:	d136      	bne.n	800571a <Settings_Verify+0xf2>
		((settings_act[16] != '+') && (settings_act[16] != '-')) ||
 80056ac:	4b1e      	ldr	r3, [pc, #120]	; (8005728 <Settings_Verify+0x100>)
 80056ae:	7c1b      	ldrb	r3, [r3, #16]
		((settings_act[14] != '+') && (settings_act[14] != '-')) ||
 80056b0:	2b2b      	cmp	r3, #43	; 0x2b
 80056b2:	d003      	beq.n	80056bc <Settings_Verify+0x94>
		((settings_act[16] != '+') && (settings_act[16] != '-')) ||
 80056b4:	4b1c      	ldr	r3, [pc, #112]	; (8005728 <Settings_Verify+0x100>)
 80056b6:	7c1b      	ldrb	r3, [r3, #16]
 80056b8:	2b2d      	cmp	r3, #45	; 0x2d
 80056ba:	d12e      	bne.n	800571a <Settings_Verify+0xf2>
		((settings_act[3] - 48) > 9) ||
 80056bc:	4b1a      	ldr	r3, [pc, #104]	; (8005728 <Settings_Verify+0x100>)
 80056be:	78db      	ldrb	r3, [r3, #3]
		((settings_act[16] != '+') && (settings_act[16] != '-')) ||
 80056c0:	2b39      	cmp	r3, #57	; 0x39
 80056c2:	d82a      	bhi.n	800571a <Settings_Verify+0xf2>
		((settings_act[5] - 48) > 9) ||
 80056c4:	4b18      	ldr	r3, [pc, #96]	; (8005728 <Settings_Verify+0x100>)
 80056c6:	795b      	ldrb	r3, [r3, #5]
		((settings_act[3] - 48) > 9) ||
 80056c8:	2b39      	cmp	r3, #57	; 0x39
 80056ca:	d826      	bhi.n	800571a <Settings_Verify+0xf2>
		((settings_act[7] - 48) > 9) ||
 80056cc:	4b16      	ldr	r3, [pc, #88]	; (8005728 <Settings_Verify+0x100>)
 80056ce:	79db      	ldrb	r3, [r3, #7]
		((settings_act[5] - 48) > 9) ||
 80056d0:	2b39      	cmp	r3, #57	; 0x39
 80056d2:	d822      	bhi.n	800571a <Settings_Verify+0xf2>
		((settings_act[9] - 48) > 9) ||
 80056d4:	4b14      	ldr	r3, [pc, #80]	; (8005728 <Settings_Verify+0x100>)
 80056d6:	7a5b      	ldrb	r3, [r3, #9]
		((settings_act[7] - 48) > 9) ||
 80056d8:	2b39      	cmp	r3, #57	; 0x39
 80056da:	d81e      	bhi.n	800571a <Settings_Verify+0xf2>
		((settings_act[11] - 48) > 9) ||
 80056dc:	4b12      	ldr	r3, [pc, #72]	; (8005728 <Settings_Verify+0x100>)
 80056de:	7adb      	ldrb	r3, [r3, #11]
		((settings_act[9] - 48) > 9) ||
 80056e0:	2b39      	cmp	r3, #57	; 0x39
 80056e2:	d81a      	bhi.n	800571a <Settings_Verify+0xf2>
		((settings_act[13] - 48) > 9) ||
 80056e4:	4b10      	ldr	r3, [pc, #64]	; (8005728 <Settings_Verify+0x100>)
 80056e6:	7b5b      	ldrb	r3, [r3, #13]
		((settings_act[11] - 48) > 9) ||
 80056e8:	2b39      	cmp	r3, #57	; 0x39
 80056ea:	d816      	bhi.n	800571a <Settings_Verify+0xf2>
		((settings_act[15] - 48) > 9) ||
 80056ec:	4b0e      	ldr	r3, [pc, #56]	; (8005728 <Settings_Verify+0x100>)
 80056ee:	7bdb      	ldrb	r3, [r3, #15]
		((settings_act[13] - 48) > 9) ||
 80056f0:	2b39      	cmp	r3, #57	; 0x39
 80056f2:	d812      	bhi.n	800571a <Settings_Verify+0xf2>
		((settings_act[17] - 48) > 9) ||
 80056f4:	4b0c      	ldr	r3, [pc, #48]	; (8005728 <Settings_Verify+0x100>)
 80056f6:	7c5b      	ldrb	r3, [r3, #17]
		((settings_act[15] - 48) > 9) ||
 80056f8:	2b39      	cmp	r3, #57	; 0x39
 80056fa:	d80e      	bhi.n	800571a <Settings_Verify+0xf2>
		((settings_act[32] - 48) > 1) ||
 80056fc:	4b0a      	ldr	r3, [pc, #40]	; (8005728 <Settings_Verify+0x100>)
 80056fe:	f893 3020 	ldrb.w	r3, [r3, #32]
		((settings_act[17] - 48) > 9) ||
 8005702:	2b31      	cmp	r3, #49	; 0x31
 8005704:	d809      	bhi.n	800571a <Settings_Verify+0xf2>
		(settings_act[33] != '\n') ||
 8005706:	4b08      	ldr	r3, [pc, #32]	; (8005728 <Settings_Verify+0x100>)
 8005708:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		((settings_act[32] - 48) > 1) ||
 800570c:	2b0a      	cmp	r3, #10
 800570e:	d104      	bne.n	800571a <Settings_Verify+0xf2>
		(settings_act[34] != 0)
 8005710:	4b05      	ldr	r3, [pc, #20]	; (8005728 <Settings_Verify+0x100>)
 8005712:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
		(settings_act[33] != '\n') ||
 8005716:	2b00      	cmp	r3, #0
 8005718:	d001      	beq.n	800571e <Settings_Verify+0xf6>
	){
		//Wrong data
		return 0;
 800571a:	2300      	movs	r3, #0
 800571c:	e000      	b.n	8005720 <Settings_Verify+0xf8>
	}
	return 1;
 800571e:	2301      	movs	r3, #1
}
 8005720:	4618      	mov	r0, r3
 8005722:	46bd      	mov	sp, r7
 8005724:	bc80      	pop	{r7}
 8005726:	4770      	bx	lr
 8005728:	20000db4 	.word	0x20000db4

0800572c <Settings_Write>:
void Settings_Write(){
 800572c:	b580      	push	{r7, lr}
 800572e:	af00      	add	r7, sp, #0
	//Verify
	if(!Settings_Verify()){
 8005730:	f7ff ff7a 	bl	8005628 <Settings_Verify>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d104      	bne.n	8005744 <Settings_Write+0x18>
		memcpy(&settings_act[0], &settings_def[0], 35);
 800573a:	2223      	movs	r2, #35	; 0x23
 800573c:	4904      	ldr	r1, [pc, #16]	; (8005750 <Settings_Write+0x24>)
 800573e:	4805      	ldr	r0, [pc, #20]	; (8005754 <Settings_Write+0x28>)
 8005740:	f001 f94a 	bl	80069d8 <memcpy>
	}

	//Write
	Flash_Write((uint8_t *)&settings_act[0], 35);
 8005744:	2123      	movs	r1, #35	; 0x23
 8005746:	4803      	ldr	r0, [pc, #12]	; (8005754 <Settings_Write+0x28>)
 8005748:	f7fe fb6a 	bl	8003e20 <Flash_Write>
}
 800574c:	bf00      	nop
 800574e:	bd80      	pop	{r7, pc}
 8005750:	08007bec 	.word	0x08007bec
 8005754:	20000db4 	.word	0x20000db4

08005758 <Settings_Reset>:
void Settings_Reset(){
 8005758:	b580      	push	{r7, lr}
 800575a:	af00      	add	r7, sp, #0
	memcpy(&settings_act[0], &settings_def[0], 35);
 800575c:	2223      	movs	r2, #35	; 0x23
 800575e:	4907      	ldr	r1, [pc, #28]	; (800577c <Settings_Reset+0x24>)
 8005760:	4807      	ldr	r0, [pc, #28]	; (8005780 <Settings_Reset+0x28>)
 8005762:	f001 f939 	bl	80069d8 <memcpy>
	Flash_Write((uint8_t *)&settings_def[0], 35);
 8005766:	2123      	movs	r1, #35	; 0x23
 8005768:	4804      	ldr	r0, [pc, #16]	; (800577c <Settings_Reset+0x24>)
 800576a:	f7fe fb59 	bl	8003e20 <Flash_Write>
	Settings_Write_Bluetooth(&settings_act[18], &settings_act[22]);
 800576e:	4905      	ldr	r1, [pc, #20]	; (8005784 <Settings_Reset+0x2c>)
 8005770:	4805      	ldr	r0, [pc, #20]	; (8005788 <Settings_Reset+0x30>)
 8005772:	f000 f8c5 	bl	8005900 <Settings_Write_Bluetooth>
}
 8005776:	bf00      	nop
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	08007bec 	.word	0x08007bec
 8005780:	20000db4 	.word	0x20000db4
 8005784:	20000dca 	.word	0x20000dca
 8005788:	20000dc6 	.word	0x20000dc6

0800578c <Settings_Read>:
void Settings_Read(int8_t *calib, uint8_t *led){
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
	Flash_Read(settings_act, 35);
 8005796:	2123      	movs	r1, #35	; 0x23
 8005798:	4821      	ldr	r0, [pc, #132]	; (8005820 <Settings_Read+0x94>)
 800579a:	f7fe fab9 	bl	8003d10 <Flash_Read>
	//Verify
	if(!Settings_Verify()){
 800579e:	f7ff ff43 	bl	8005628 <Settings_Verify>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d104      	bne.n	80057b2 <Settings_Read+0x26>
		memcpy(&settings_act[0], &settings_def[0], 35);
 80057a8:	2223      	movs	r2, #35	; 0x23
 80057aa:	491e      	ldr	r1, [pc, #120]	; (8005824 <Settings_Read+0x98>)
 80057ac:	481c      	ldr	r0, [pc, #112]	; (8005820 <Settings_Read+0x94>)
 80057ae:	f001 f913 	bl	80069d8 <memcpy>
	}

	//Calibration
	uint8_t i = 0;
 80057b2:	2300      	movs	r3, #0
 80057b4:	73fb      	strb	r3, [r7, #15]
	while(i != 8){
 80057b6:	e024      	b.n	8005802 <Settings_Read+0x76>
		i++;
 80057b8:	7bfb      	ldrb	r3, [r7, #15]
 80057ba:	3301      	adds	r3, #1
 80057bc:	73fb      	strb	r3, [r7, #15]
		if(settings_act[(2 * i)] == '-'){
 80057be:	7bfb      	ldrb	r3, [r7, #15]
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	4a17      	ldr	r2, [pc, #92]	; (8005820 <Settings_Read+0x94>)
 80057c4:	5cd3      	ldrb	r3, [r2, r3]
 80057c6:	2b2d      	cmp	r3, #45	; 0x2d
 80057c8:	d10e      	bne.n	80057e8 <Settings_Read+0x5c>
			calib[i - 1] = (settings_act[(2 * i) + 1] - 48) - (2 * (settings_act[(2 * i) + 1] - 48));
 80057ca:	7bfb      	ldrb	r3, [r7, #15]
 80057cc:	005b      	lsls	r3, r3, #1
 80057ce:	3301      	adds	r3, #1
 80057d0:	4a13      	ldr	r2, [pc, #76]	; (8005820 <Settings_Read+0x94>)
 80057d2:	5cd3      	ldrb	r3, [r2, r3]
 80057d4:	f1c3 0330 	rsb	r3, r3, #48	; 0x30
 80057d8:	b2d9      	uxtb	r1, r3
 80057da:	7bfb      	ldrb	r3, [r7, #15]
 80057dc:	3b01      	subs	r3, #1
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	4413      	add	r3, r2
 80057e2:	b24a      	sxtb	r2, r1
 80057e4:	701a      	strb	r2, [r3, #0]
 80057e6:	e00c      	b.n	8005802 <Settings_Read+0x76>
		}else{
			calib[i - 1] = settings_act[(2 * i) + 1] - 48;
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
 80057ea:	005b      	lsls	r3, r3, #1
 80057ec:	3301      	adds	r3, #1
 80057ee:	4a0c      	ldr	r2, [pc, #48]	; (8005820 <Settings_Read+0x94>)
 80057f0:	5cd3      	ldrb	r3, [r2, r3]
 80057f2:	3b30      	subs	r3, #48	; 0x30
 80057f4:	b2d9      	uxtb	r1, r3
 80057f6:	7bfb      	ldrb	r3, [r7, #15]
 80057f8:	3b01      	subs	r3, #1
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	4413      	add	r3, r2
 80057fe:	b24a      	sxtb	r2, r1
 8005800:	701a      	strb	r2, [r3, #0]
	while(i != 8){
 8005802:	7bfb      	ldrb	r3, [r7, #15]
 8005804:	2b08      	cmp	r3, #8
 8005806:	d1d7      	bne.n	80057b8 <Settings_Read+0x2c>
		}
	}
	//LED
	*led = settings_act[32] - 48;
 8005808:	4b05      	ldr	r3, [pc, #20]	; (8005820 <Settings_Read+0x94>)
 800580a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800580e:	3b30      	subs	r3, #48	; 0x30
 8005810:	b2da      	uxtb	r2, r3
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	701a      	strb	r2, [r3, #0]
}
 8005816:	bf00      	nop
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	20000db4 	.word	0x20000db4
 8005824:	08007bec 	.word	0x08007bec

08005828 <Settings_Data>:
uint8_t *Settings_Data(){
 8005828:	b480      	push	{r7}
 800582a:	af00      	add	r7, sp, #0
	return (uint8_t *)&settings_act[0];
 800582c:	4b02      	ldr	r3, [pc, #8]	; (8005838 <Settings_Data+0x10>)
}
 800582e:	4618      	mov	r0, r3
 8005830:	46bd      	mov	sp, r7
 8005832:	bc80      	pop	{r7}
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	20000db4 	.word	0x20000db4

0800583c <Settings_Set_Calib>:
void Settings_Set_Calib(int8_t *calib){
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
	//Calibration
	uint8_t i = 0;
 8005844:	2300      	movs	r3, #0
 8005846:	73fb      	strb	r3, [r7, #15]
	while(i != 8){
 8005848:	e031      	b.n	80058ae <Settings_Set_Calib+0x72>
		if(calib[i] >= 0){
 800584a:	7bfb      	ldrb	r3, [r7, #15]
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	4413      	add	r3, r2
 8005850:	f993 3000 	ldrsb.w	r3, [r3]
 8005854:	2b00      	cmp	r3, #0
 8005856:	db13      	blt.n	8005880 <Settings_Set_Calib+0x44>
			settings_act[2 + (i * 2)] = '+';
 8005858:	7bfb      	ldrb	r3, [r7, #15]
 800585a:	3301      	adds	r3, #1
 800585c:	005b      	lsls	r3, r3, #1
 800585e:	4a1c      	ldr	r2, [pc, #112]	; (80058d0 <Settings_Set_Calib+0x94>)
 8005860:	212b      	movs	r1, #43	; 0x2b
 8005862:	54d1      	strb	r1, [r2, r3]
			settings_act[3 + (i * 2)] = (uint8_t)calib[i] + (uint8_t)48;
 8005864:	7bfb      	ldrb	r3, [r7, #15]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	4413      	add	r3, r2
 800586a:	f993 3000 	ldrsb.w	r3, [r3]
 800586e:	b2da      	uxtb	r2, r3
 8005870:	7bfb      	ldrb	r3, [r7, #15]
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	3303      	adds	r3, #3
 8005876:	3230      	adds	r2, #48	; 0x30
 8005878:	b2d1      	uxtb	r1, r2
 800587a:	4a15      	ldr	r2, [pc, #84]	; (80058d0 <Settings_Set_Calib+0x94>)
 800587c:	54d1      	strb	r1, [r2, r3]
 800587e:	e013      	b.n	80058a8 <Settings_Set_Calib+0x6c>
		}else{
			settings_act[2 + (i * 2)] = '-';
 8005880:	7bfb      	ldrb	r3, [r7, #15]
 8005882:	3301      	adds	r3, #1
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	4a12      	ldr	r2, [pc, #72]	; (80058d0 <Settings_Set_Calib+0x94>)
 8005888:	212d      	movs	r1, #45	; 0x2d
 800588a:	54d1      	strb	r1, [r2, r3]
			settings_act[3 + (i * 2)] = (uint8_t)((int8_t)calib[i] - (2 * (int8_t)calib[i])) + (uint8_t)48;
 800588c:	7bfb      	ldrb	r3, [r7, #15]
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	4413      	add	r3, r2
 8005892:	f993 3000 	ldrsb.w	r3, [r3]
 8005896:	b2da      	uxtb	r2, r3
 8005898:	7bfb      	ldrb	r3, [r7, #15]
 800589a:	005b      	lsls	r3, r3, #1
 800589c:	3303      	adds	r3, #3
 800589e:	f1c2 0230 	rsb	r2, r2, #48	; 0x30
 80058a2:	b2d1      	uxtb	r1, r2
 80058a4:	4a0a      	ldr	r2, [pc, #40]	; (80058d0 <Settings_Set_Calib+0x94>)
 80058a6:	54d1      	strb	r1, [r2, r3]
		}
		i++;
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
 80058aa:	3301      	adds	r3, #1
 80058ac:	73fb      	strb	r3, [r7, #15]
	while(i != 8){
 80058ae:	7bfb      	ldrb	r3, [r7, #15]
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	d1ca      	bne.n	800584a <Settings_Set_Calib+0xe>
	}
	
	//Verify
	if(!Settings_Verify()){
 80058b4:	f7ff feb8 	bl	8005628 <Settings_Verify>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d104      	bne.n	80058c8 <Settings_Set_Calib+0x8c>
		memcpy(&settings_act[0], &settings_def[0], 35);
 80058be:	2223      	movs	r2, #35	; 0x23
 80058c0:	4904      	ldr	r1, [pc, #16]	; (80058d4 <Settings_Set_Calib+0x98>)
 80058c2:	4803      	ldr	r0, [pc, #12]	; (80058d0 <Settings_Set_Calib+0x94>)
 80058c4:	f001 f888 	bl	80069d8 <memcpy>
	}
}
 80058c8:	bf00      	nop
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	20000db4 	.word	0x20000db4
 80058d4:	08007bec 	.word	0x08007bec

080058d8 <Settings_Write_LED>:
void Settings_Write_LED(uint8_t led){
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	4603      	mov	r3, r0
 80058e0:	71fb      	strb	r3, [r7, #7]
	settings_act[32] = led + 48;
 80058e2:	79fb      	ldrb	r3, [r7, #7]
 80058e4:	3330      	adds	r3, #48	; 0x30
 80058e6:	b2da      	uxtb	r2, r3
 80058e8:	4b04      	ldr	r3, [pc, #16]	; (80058fc <Settings_Write_LED+0x24>)
 80058ea:	f883 2020 	strb.w	r2, [r3, #32]
	Settings_Write();
 80058ee:	f7ff ff1d 	bl	800572c <Settings_Write>
}
 80058f2:	bf00      	nop
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	20000db4 	.word	0x20000db4

08005900 <Settings_Write_Bluetooth>:
void Settings_Write_Bluetooth(uint8_t *bt_password, uint8_t *bt_name){
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
	if(!Settings_Verify()){
 800590a:	f7ff fe8d 	bl	8005628 <Settings_Verify>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d104      	bne.n	800591e <Settings_Write_Bluetooth+0x1e>
		memcpy(&settings_act[0], &settings_def[0], 35);
 8005914:	2223      	movs	r2, #35	; 0x23
 8005916:	494e      	ldr	r1, [pc, #312]	; (8005a50 <Settings_Write_Bluetooth+0x150>)
 8005918:	484e      	ldr	r0, [pc, #312]	; (8005a54 <Settings_Write_Bluetooth+0x154>)
 800591a:	f001 f85d 	bl	80069d8 <memcpy>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	461a      	mov	r2, r3
	}

	//Password
	memcpy(&settings_act[18], bt_password, 4);
 8005924:	4b4b      	ldr	r3, [pc, #300]	; (8005a54 <Settings_Write_Bluetooth+0x154>)
 8005926:	f8c3 2012 	str.w	r2, [r3, #18]
	//Name
	memcpy(&settings_act[22], bt_name, 10);
 800592a:	220a      	movs	r2, #10
 800592c:	6839      	ldr	r1, [r7, #0]
 800592e:	484a      	ldr	r0, [pc, #296]	; (8005a58 <Settings_Write_Bluetooth+0x158>)
 8005930:	f001 f852 	bl	80069d8 <memcpy>

	//Write
	Flash_Write((uint8_t *)&settings_act[0], 35);
 8005934:	2123      	movs	r1, #35	; 0x23
 8005936:	4847      	ldr	r0, [pc, #284]	; (8005a54 <Settings_Write_Bluetooth+0x154>)
 8005938:	f7fe fa72 	bl	8003e20 <Flash_Write>

	//Reset Bluetooth
	HAL_GPIO_WritePin(BT_RESET_GPIO_Port, BT_RESET_Pin, GPIO_PIN_RESET);
 800593c:	2200      	movs	r2, #0
 800593e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005942:	4846      	ldr	r0, [pc, #280]	; (8005a5c <Settings_Write_Bluetooth+0x15c>)
 8005944:	f7fb fee9 	bl	800171a <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8005948:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800594c:	f7fa ff54 	bl	80007f8 <HAL_Delay>
	HAL_GPIO_WritePin(BT_RESET_GPIO_Port, BT_RESET_Pin, GPIO_PIN_SET);
 8005950:	2201      	movs	r2, #1
 8005952:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005956:	4841      	ldr	r0, [pc, #260]	; (8005a5c <Settings_Write_Bluetooth+0x15c>)
 8005958:	f7fb fedf 	bl	800171a <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800595c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005960:	f7fa ff4a 	bl	80007f8 <HAL_Delay>

	//Wait for Bluetooth disconnect
	while(HAL_GPIO_ReadPin(BT_STAT_GPIO_Port, BT_STAT_Pin) != GPIO_PIN_RESET);
 8005964:	bf00      	nop
 8005966:	f44f 7180 	mov.w	r1, #256	; 0x100
 800596a:	483c      	ldr	r0, [pc, #240]	; (8005a5c <Settings_Write_Bluetooth+0x15c>)
 800596c:	f7fb febe 	bl	80016ec <HAL_GPIO_ReadPin>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1f7      	bne.n	8005966 <Settings_Write_Bluetooth+0x66>
	HAL_Delay(300);
 8005976:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800597a:	f7fa ff3d 	bl	80007f8 <HAL_Delay>

	//Set Bluetooth password
	uint8_t *tmp = malloc(18);
 800597e:	2012      	movs	r0, #18
 8005980:	f000 fde6 	bl	8006550 <malloc>
 8005984:	4603      	mov	r3, r0
 8005986:	60bb      	str	r3, [r7, #8]
	memcpy(&tmp[0], (uint8_t *)"AT+PIN", 6);
 8005988:	2206      	movs	r2, #6
 800598a:	4935      	ldr	r1, [pc, #212]	; (8005a60 <Settings_Write_Bluetooth+0x160>)
 800598c:	68b8      	ldr	r0, [r7, #8]
 800598e:	f001 f823 	bl	80069d8 <memcpy>
	memcpy(&tmp[6], (uint8_t *)&bt_password[0], 4);
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	3306      	adds	r3, #6
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	6812      	ldr	r2, [r2, #0]
 800599a:	601a      	str	r2, [r3, #0]
	memcpy(&tmp[10], (uint8_t *)"\r\n", 2);
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	330a      	adds	r3, #10
 80059a0:	2202      	movs	r2, #2
 80059a2:	4930      	ldr	r1, [pc, #192]	; (8005a64 <Settings_Write_Bluetooth+0x164>)
 80059a4:	4618      	mov	r0, r3
 80059a6:	f001 f817 	bl	80069d8 <memcpy>
	Bluetooth_Transmit((uint8_t *)tmp, 12);
 80059aa:	210c      	movs	r1, #12
 80059ac:	68b8      	ldr	r0, [r7, #8]
 80059ae:	f7fe f90b 	bl	8003bc8 <Bluetooth_Transmit>
	HAL_Delay(50);
 80059b2:	2032      	movs	r0, #50	; 0x32
 80059b4:	f7fa ff20 	bl	80007f8 <HAL_Delay>

	//Set Bluetooth name
	memcpy(&tmp[0], (uint8_t *)"AT+NAME", 7);
 80059b8:	2207      	movs	r2, #7
 80059ba:	492b      	ldr	r1, [pc, #172]	; (8005a68 <Settings_Write_Bluetooth+0x168>)
 80059bc:	68b8      	ldr	r0, [r7, #8]
 80059be:	f001 f80b 	bl	80069d8 <memcpy>
	//Detect spaces at the end of the name
	uint8_t i = 10;
 80059c2:	230a      	movs	r3, #10
 80059c4:	73fb      	strb	r3, [r7, #15]
	while(i != 0){
 80059c6:	e008      	b.n	80059da <Settings_Write_Bluetooth+0xda>
		i--;
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
 80059ca:	3b01      	subs	r3, #1
 80059cc:	73fb      	strb	r3, [r7, #15]
		if(bt_name[i] != ' '){
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	4413      	add	r3, r2
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	2b20      	cmp	r3, #32
 80059d8:	d103      	bne.n	80059e2 <Settings_Write_Bluetooth+0xe2>
	while(i != 0){
 80059da:	7bfb      	ldrb	r3, [r7, #15]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1f3      	bne.n	80059c8 <Settings_Write_Bluetooth+0xc8>
 80059e0:	e000      	b.n	80059e4 <Settings_Write_Bluetooth+0xe4>
			break;
 80059e2:	bf00      	nop
		}
	}
	memcpy(&tmp[7], (uint8_t *)&bt_name[0], i + 1);
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	1dd8      	adds	r0, r3, #7
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
 80059ea:	3301      	adds	r3, #1
 80059ec:	461a      	mov	r2, r3
 80059ee:	6839      	ldr	r1, [r7, #0]
 80059f0:	f000 fff2 	bl	80069d8 <memcpy>
	memcpy(&tmp[i + 8], (uint8_t *)"\r\n", 2);
 80059f4:	7bfb      	ldrb	r3, [r7, #15]
 80059f6:	3308      	adds	r3, #8
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	4413      	add	r3, r2
 80059fc:	2202      	movs	r2, #2
 80059fe:	4919      	ldr	r1, [pc, #100]	; (8005a64 <Settings_Write_Bluetooth+0x164>)
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 ffe9 	bl	80069d8 <memcpy>
	Bluetooth_Transmit((uint8_t *)tmp, 12);
 8005a06:	210c      	movs	r1, #12
 8005a08:	68b8      	ldr	r0, [r7, #8]
 8005a0a:	f7fe f8dd 	bl	8003bc8 <Bluetooth_Transmit>
	Bluetooth_Transmit((uint8_t *)tmp, 18);
 8005a0e:	2112      	movs	r1, #18
 8005a10:	68b8      	ldr	r0, [r7, #8]
 8005a12:	f7fe f8d9 	bl	8003bc8 <Bluetooth_Transmit>
	HAL_Delay(800);
 8005a16:	f44f 7048 	mov.w	r0, #800	; 0x320
 8005a1a:	f7fa feed 	bl	80007f8 <HAL_Delay>

	//Reset Bluetooth
	HAL_GPIO_WritePin(BT_RESET_GPIO_Port, BT_RESET_Pin, GPIO_PIN_RESET);
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005a24:	480d      	ldr	r0, [pc, #52]	; (8005a5c <Settings_Write_Bluetooth+0x15c>)
 8005a26:	f7fb fe78 	bl	800171a <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8005a2a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005a2e:	f7fa fee3 	bl	80007f8 <HAL_Delay>
	HAL_GPIO_WritePin(BT_RESET_GPIO_Port, BT_RESET_Pin, GPIO_PIN_SET);
 8005a32:	2201      	movs	r2, #1
 8005a34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005a38:	4808      	ldr	r0, [pc, #32]	; (8005a5c <Settings_Write_Bluetooth+0x15c>)
 8005a3a:	f7fb fe6e 	bl	800171a <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8005a3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005a42:	f7fa fed9 	bl	80007f8 <HAL_Delay>
}
 8005a46:	bf00      	nop
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	08007bec 	.word	0x08007bec
 8005a54:	20000db4 	.word	0x20000db4
 8005a58:	20000dca 	.word	0x20000dca
 8005a5c:	40010800 	.word	0x40010800
 8005a60:	08006d78 	.word	0x08006d78
 8005a64:	08006d80 	.word	0x08006d80
 8005a68:	08006d84 	.word	0x08006d84

08005a6c <Settings_Init>:
void Settings_Init(){
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
	uint8_t led = 0;
 8005a72:	2300      	movs	r3, #0
 8005a74:	71fb      	strb	r3, [r7, #7]
	Settings_Read(Servo_Calib_Data(), &led);
 8005a76:	f7fe fb73 	bl	8004160 <Servo_Calib_Data>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	1dfb      	adds	r3, r7, #7
 8005a7e:	4619      	mov	r1, r3
 8005a80:	4610      	mov	r0, r2
 8005a82:	f7ff fe83 	bl	800578c <Settings_Read>

	//Enable LED
	LED_Enable(led);
 8005a86:	79fb      	ldrb	r3, [r7, #7]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7fe fb47 	bl	800411c <LED_Enable>
	LED_Init();
 8005a8e:	f7fe fb5d 	bl	800414c <LED_Init>

	//Enable servos
	Servo_Init();
 8005a92:	f7fe fcbf 	bl	8004414 <Servo_Init>
	Servo_Set((float *)&anim_data_standby[0]);
 8005a96:	4803      	ldr	r0, [pc, #12]	; (8005aa4 <Settings_Init+0x38>)
 8005a98:	f7fe fb86 	bl	80041a8 <Servo_Set>
}
 8005a9c:	bf00      	nop
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	08006dac 	.word	0x08006dac

08005aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005aac:	f7fa fe42 	bl	8000734 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005ab0:	f000 f813 	bl	8005ada <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005ab4:	f000 fa52 	bl	8005f5c <MX_GPIO_Init>
  MX_CRC_Init();
 8005ab8:	f000 f850 	bl	8005b5c <MX_CRC_Init>
  MX_TIM2_Init();
 8005abc:	f000 f862 	bl	8005b84 <MX_TIM2_Init>
  MX_TIM3_Init();
 8005ac0:	f000 f8d4 	bl	8005c6c <MX_TIM3_Init>
  MX_DMA_Init();
 8005ac4:	f000 fa2c 	bl	8005f20 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8005ac8:	f000 fa00 	bl	8005ecc <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8005acc:	f000 f966 	bl	8005d9c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  App_Init();
 8005ad0:	f7ff f910 	bl	8004cf4 <App_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    App_Loop();
 8005ad4:	f7ff f916 	bl	8004d04 <App_Loop>
 8005ad8:	e7fc      	b.n	8005ad4 <main+0x2c>

08005ada <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b090      	sub	sp, #64	; 0x40
 8005ade:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ae0:	f107 0318 	add.w	r3, r7, #24
 8005ae4:	2228      	movs	r2, #40	; 0x28
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f000 ff83 	bl	80069f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005aee:	1d3b      	adds	r3, r7, #4
 8005af0:	2200      	movs	r2, #0
 8005af2:	601a      	str	r2, [r3, #0]
 8005af4:	605a      	str	r2, [r3, #4]
 8005af6:	609a      	str	r2, [r3, #8]
 8005af8:	60da      	str	r2, [r3, #12]
 8005afa:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005afc:	2302      	movs	r3, #2
 8005afe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005b00:	2301      	movs	r3, #1
 8005b02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005b04:	2310      	movs	r3, #16
 8005b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005b08:	2302      	movs	r3, #2
 8005b0a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8005b10:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8005b14:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005b16:	f107 0318 	add.w	r3, r7, #24
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fb fe2e 	bl	800177c <HAL_RCC_OscConfig>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <SystemClock_Config+0x50>
  {
    Error_Handler();
 8005b26:	f000 fa7b 	bl	8006020 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005b2a:	230f      	movs	r3, #15
 8005b2c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005b2e:	2302      	movs	r3, #2
 8005b30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005b32:	2300      	movs	r3, #0
 8005b34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005b40:	1d3b      	adds	r3, r7, #4
 8005b42:	2102      	movs	r1, #2
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7fc f89b 	bl	8001c80 <HAL_RCC_ClockConfig>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8005b50:	f000 fa66 	bl	8006020 <Error_Handler>
  }
}
 8005b54:	bf00      	nop
 8005b56:	3740      	adds	r7, #64	; 0x40
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8005b60:	4b06      	ldr	r3, [pc, #24]	; (8005b7c <MX_CRC_Init+0x20>)
 8005b62:	4a07      	ldr	r2, [pc, #28]	; (8005b80 <MX_CRC_Init+0x24>)
 8005b64:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8005b66:	4805      	ldr	r0, [pc, #20]	; (8005b7c <MX_CRC_Init+0x20>)
 8005b68:	f7fa ff77 	bl	8000a5a <HAL_CRC_Init>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8005b72:	f000 fa55 	bl	8006020 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8005b76:	bf00      	nop
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	20000dd8 	.word	0x20000dd8
 8005b80:	40023000 	.word	0x40023000

08005b84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b08e      	sub	sp, #56	; 0x38
 8005b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b8e:	2200      	movs	r2, #0
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	605a      	str	r2, [r3, #4]
 8005b94:	609a      	str	r2, [r3, #8]
 8005b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b98:	f107 0320 	add.w	r3, r7, #32
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	601a      	str	r2, [r3, #0]
 8005ba0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005ba2:	1d3b      	adds	r3, r7, #4
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	601a      	str	r2, [r3, #0]
 8005ba8:	605a      	str	r2, [r3, #4]
 8005baa:	609a      	str	r2, [r3, #8]
 8005bac:	60da      	str	r2, [r3, #12]
 8005bae:	611a      	str	r2, [r3, #16]
 8005bb0:	615a      	str	r2, [r3, #20]
 8005bb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005bb4:	4b2c      	ldr	r3, [pc, #176]	; (8005c68 <MX_TIM2_Init+0xe4>)
 8005bb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005bba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8005bbc:	4b2a      	ldr	r3, [pc, #168]	; (8005c68 <MX_TIM2_Init+0xe4>)
 8005bbe:	221f      	movs	r2, #31
 8005bc0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005bc2:	4b29      	ldr	r3, [pc, #164]	; (8005c68 <MX_TIM2_Init+0xe4>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 8005bc8:	4b27      	ldr	r3, [pc, #156]	; (8005c68 <MX_TIM2_Init+0xe4>)
 8005bca:	223f      	movs	r2, #63	; 0x3f
 8005bcc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005bce:	4b26      	ldr	r3, [pc, #152]	; (8005c68 <MX_TIM2_Init+0xe4>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005bd4:	4b24      	ldr	r3, [pc, #144]	; (8005c68 <MX_TIM2_Init+0xe4>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005bda:	4823      	ldr	r0, [pc, #140]	; (8005c68 <MX_TIM2_Init+0xe4>)
 8005bdc:	f7fc f9e8 	bl	8001fb0 <HAL_TIM_Base_Init>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8005be6:	f000 fa1b 	bl	8006020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005bf0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	481c      	ldr	r0, [pc, #112]	; (8005c68 <MX_TIM2_Init+0xe4>)
 8005bf8:	f7fc fbe2 	bl	80023c0 <HAL_TIM_ConfigClockSource>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8005c02:	f000 fa0d 	bl	8006020 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005c06:	4818      	ldr	r0, [pc, #96]	; (8005c68 <MX_TIM2_Init+0xe4>)
 8005c08:	f7fc fa21 	bl	800204e <HAL_TIM_PWM_Init>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d001      	beq.n	8005c16 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8005c12:	f000 fa05 	bl	8006020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c16:	2300      	movs	r3, #0
 8005c18:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005c1e:	f107 0320 	add.w	r3, r7, #32
 8005c22:	4619      	mov	r1, r3
 8005c24:	4810      	ldr	r0, [pc, #64]	; (8005c68 <MX_TIM2_Init+0xe4>)
 8005c26:	f7fc ff33 	bl	8002a90 <HAL_TIMEx_MasterConfigSynchronization>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8005c30:	f000 f9f6 	bl	8006020 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005c34:	2360      	movs	r3, #96	; 0x60
 8005c36:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005c40:	2300      	movs	r3, #0
 8005c42:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005c44:	1d3b      	adds	r3, r7, #4
 8005c46:	2204      	movs	r2, #4
 8005c48:	4619      	mov	r1, r3
 8005c4a:	4807      	ldr	r0, [pc, #28]	; (8005c68 <MX_TIM2_Init+0xe4>)
 8005c4c:	f7fc fafa 	bl	8002244 <HAL_TIM_PWM_ConfigChannel>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d001      	beq.n	8005c5a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8005c56:	f000 f9e3 	bl	8006020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005c5a:	4803      	ldr	r0, [pc, #12]	; (8005c68 <MX_TIM2_Init+0xe4>)
 8005c5c:	f000 fa7a 	bl	8006154 <HAL_TIM_MspPostInit>

}
 8005c60:	bf00      	nop
 8005c62:	3738      	adds	r7, #56	; 0x38
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	20000de0 	.word	0x20000de0

08005c6c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b08e      	sub	sp, #56	; 0x38
 8005c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c76:	2200      	movs	r2, #0
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	605a      	str	r2, [r3, #4]
 8005c7c:	609a      	str	r2, [r3, #8]
 8005c7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c80:	f107 0320 	add.w	r3, r7, #32
 8005c84:	2200      	movs	r2, #0
 8005c86:	601a      	str	r2, [r3, #0]
 8005c88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c8a:	1d3b      	adds	r3, r7, #4
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	605a      	str	r2, [r3, #4]
 8005c92:	609a      	str	r2, [r3, #8]
 8005c94:	60da      	str	r2, [r3, #12]
 8005c96:	611a      	str	r2, [r3, #16]
 8005c98:	615a      	str	r2, [r3, #20]
 8005c9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005c9c:	4b3d      	ldr	r3, [pc, #244]	; (8005d94 <MX_TIM3_Init+0x128>)
 8005c9e:	4a3e      	ldr	r2, [pc, #248]	; (8005d98 <MX_TIM3_Init+0x12c>)
 8005ca0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8005ca2:	4b3c      	ldr	r3, [pc, #240]	; (8005d94 <MX_TIM3_Init+0x128>)
 8005ca4:	223f      	movs	r2, #63	; 0x3f
 8005ca6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ca8:	4b3a      	ldr	r3, [pc, #232]	; (8005d94 <MX_TIM3_Init+0x128>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8005cae:	4b39      	ldr	r3, [pc, #228]	; (8005d94 <MX_TIM3_Init+0x128>)
 8005cb0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005cb4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005cb6:	4b37      	ldr	r3, [pc, #220]	; (8005d94 <MX_TIM3_Init+0x128>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005cbc:	4b35      	ldr	r3, [pc, #212]	; (8005d94 <MX_TIM3_Init+0x128>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005cc2:	4834      	ldr	r0, [pc, #208]	; (8005d94 <MX_TIM3_Init+0x128>)
 8005cc4:	f7fc f974 	bl	8001fb0 <HAL_TIM_Base_Init>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8005cce:	f000 f9a7 	bl	8006020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005cd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cdc:	4619      	mov	r1, r3
 8005cde:	482d      	ldr	r0, [pc, #180]	; (8005d94 <MX_TIM3_Init+0x128>)
 8005ce0:	f7fc fb6e 	bl	80023c0 <HAL_TIM_ConfigClockSource>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8005cea:	f000 f999 	bl	8006020 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005cee:	4829      	ldr	r0, [pc, #164]	; (8005d94 <MX_TIM3_Init+0x128>)
 8005cf0:	f7fc f9ad 	bl	800204e <HAL_TIM_PWM_Init>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8005cfa:	f000 f991 	bl	8006020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d02:	2300      	movs	r3, #0
 8005d04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005d06:	f107 0320 	add.w	r3, r7, #32
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	4821      	ldr	r0, [pc, #132]	; (8005d94 <MX_TIM3_Init+0x128>)
 8005d0e:	f7fc febf 	bl	8002a90 <HAL_TIMEx_MasterConfigSynchronization>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d001      	beq.n	8005d1c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8005d18:	f000 f982 	bl	8006020 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005d1c:	2360      	movs	r3, #96	; 0x60
 8005d1e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005d20:	2300      	movs	r3, #0
 8005d22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005d24:	2300      	movs	r3, #0
 8005d26:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005d2c:	1d3b      	adds	r3, r7, #4
 8005d2e:	2200      	movs	r2, #0
 8005d30:	4619      	mov	r1, r3
 8005d32:	4818      	ldr	r0, [pc, #96]	; (8005d94 <MX_TIM3_Init+0x128>)
 8005d34:	f7fc fa86 	bl	8002244 <HAL_TIM_PWM_ConfigChannel>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8005d3e:	f000 f96f 	bl	8006020 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005d42:	1d3b      	adds	r3, r7, #4
 8005d44:	2204      	movs	r2, #4
 8005d46:	4619      	mov	r1, r3
 8005d48:	4812      	ldr	r0, [pc, #72]	; (8005d94 <MX_TIM3_Init+0x128>)
 8005d4a:	f7fc fa7b 	bl	8002244 <HAL_TIM_PWM_ConfigChannel>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d001      	beq.n	8005d58 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8005d54:	f000 f964 	bl	8006020 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005d58:	1d3b      	adds	r3, r7, #4
 8005d5a:	2208      	movs	r2, #8
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	480d      	ldr	r0, [pc, #52]	; (8005d94 <MX_TIM3_Init+0x128>)
 8005d60:	f7fc fa70 	bl	8002244 <HAL_TIM_PWM_ConfigChannel>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8005d6a:	f000 f959 	bl	8006020 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005d6e:	1d3b      	adds	r3, r7, #4
 8005d70:	220c      	movs	r2, #12
 8005d72:	4619      	mov	r1, r3
 8005d74:	4807      	ldr	r0, [pc, #28]	; (8005d94 <MX_TIM3_Init+0x128>)
 8005d76:	f7fc fa65 	bl	8002244 <HAL_TIM_PWM_ConfigChannel>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8005d80:	f000 f94e 	bl	8006020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005d84:	4803      	ldr	r0, [pc, #12]	; (8005d94 <MX_TIM3_Init+0x128>)
 8005d86:	f000 f9e5 	bl	8006154 <HAL_TIM_MspPostInit>

}
 8005d8a:	bf00      	nop
 8005d8c:	3738      	adds	r7, #56	; 0x38
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	20000e28 	.word	0x20000e28
 8005d98:	40000400 	.word	0x40000400

08005d9c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08e      	sub	sp, #56	; 0x38
 8005da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005da2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005da6:	2200      	movs	r2, #0
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	605a      	str	r2, [r3, #4]
 8005dac:	609a      	str	r2, [r3, #8]
 8005dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005db0:	f107 0320 	add.w	r3, r7, #32
 8005db4:	2200      	movs	r2, #0
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005dba:	1d3b      	adds	r3, r7, #4
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	605a      	str	r2, [r3, #4]
 8005dc2:	609a      	str	r2, [r3, #8]
 8005dc4:	60da      	str	r2, [r3, #12]
 8005dc6:	611a      	str	r2, [r3, #16]
 8005dc8:	615a      	str	r2, [r3, #20]
 8005dca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005dcc:	4b3d      	ldr	r3, [pc, #244]	; (8005ec4 <MX_TIM4_Init+0x128>)
 8005dce:	4a3e      	ldr	r2, [pc, #248]	; (8005ec8 <MX_TIM4_Init+0x12c>)
 8005dd0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63;
 8005dd2:	4b3c      	ldr	r3, [pc, #240]	; (8005ec4 <MX_TIM4_Init+0x128>)
 8005dd4:	223f      	movs	r2, #63	; 0x3f
 8005dd6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005dd8:	4b3a      	ldr	r3, [pc, #232]	; (8005ec4 <MX_TIM4_Init+0x128>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8005dde:	4b39      	ldr	r3, [pc, #228]	; (8005ec4 <MX_TIM4_Init+0x128>)
 8005de0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005de4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005de6:	4b37      	ldr	r3, [pc, #220]	; (8005ec4 <MX_TIM4_Init+0x128>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005dec:	4b35      	ldr	r3, [pc, #212]	; (8005ec4 <MX_TIM4_Init+0x128>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005df2:	4834      	ldr	r0, [pc, #208]	; (8005ec4 <MX_TIM4_Init+0x128>)
 8005df4:	f7fc f8dc 	bl	8001fb0 <HAL_TIM_Base_Init>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8005dfe:	f000 f90f 	bl	8006020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e06:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005e08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	482d      	ldr	r0, [pc, #180]	; (8005ec4 <MX_TIM4_Init+0x128>)
 8005e10:	f7fc fad6 	bl	80023c0 <HAL_TIM_ConfigClockSource>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d001      	beq.n	8005e1e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8005e1a:	f000 f901 	bl	8006020 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005e1e:	4829      	ldr	r0, [pc, #164]	; (8005ec4 <MX_TIM4_Init+0x128>)
 8005e20:	f7fc f915 	bl	800204e <HAL_TIM_PWM_Init>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d001      	beq.n	8005e2e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8005e2a:	f000 f8f9 	bl	8006020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e32:	2300      	movs	r3, #0
 8005e34:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005e36:	f107 0320 	add.w	r3, r7, #32
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	4821      	ldr	r0, [pc, #132]	; (8005ec4 <MX_TIM4_Init+0x128>)
 8005e3e:	f7fc fe27 	bl	8002a90 <HAL_TIMEx_MasterConfigSynchronization>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8005e48:	f000 f8ea 	bl	8006020 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005e4c:	2360      	movs	r3, #96	; 0x60
 8005e4e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005e50:	2300      	movs	r3, #0
 8005e52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005e54:	2300      	movs	r3, #0
 8005e56:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005e5c:	1d3b      	adds	r3, r7, #4
 8005e5e:	2200      	movs	r2, #0
 8005e60:	4619      	mov	r1, r3
 8005e62:	4818      	ldr	r0, [pc, #96]	; (8005ec4 <MX_TIM4_Init+0x128>)
 8005e64:	f7fc f9ee 	bl	8002244 <HAL_TIM_PWM_ConfigChannel>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d001      	beq.n	8005e72 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8005e6e:	f000 f8d7 	bl	8006020 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005e72:	1d3b      	adds	r3, r7, #4
 8005e74:	2204      	movs	r2, #4
 8005e76:	4619      	mov	r1, r3
 8005e78:	4812      	ldr	r0, [pc, #72]	; (8005ec4 <MX_TIM4_Init+0x128>)
 8005e7a:	f7fc f9e3 	bl	8002244 <HAL_TIM_PWM_ConfigChannel>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d001      	beq.n	8005e88 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8005e84:	f000 f8cc 	bl	8006020 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005e88:	1d3b      	adds	r3, r7, #4
 8005e8a:	2208      	movs	r2, #8
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	480d      	ldr	r0, [pc, #52]	; (8005ec4 <MX_TIM4_Init+0x128>)
 8005e90:	f7fc f9d8 	bl	8002244 <HAL_TIM_PWM_ConfigChannel>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8005e9a:	f000 f8c1 	bl	8006020 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005e9e:	1d3b      	adds	r3, r7, #4
 8005ea0:	220c      	movs	r2, #12
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	4807      	ldr	r0, [pc, #28]	; (8005ec4 <MX_TIM4_Init+0x128>)
 8005ea6:	f7fc f9cd 	bl	8002244 <HAL_TIM_PWM_ConfigChannel>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d001      	beq.n	8005eb4 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8005eb0:	f000 f8b6 	bl	8006020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005eb4:	4803      	ldr	r0, [pc, #12]	; (8005ec4 <MX_TIM4_Init+0x128>)
 8005eb6:	f000 f94d 	bl	8006154 <HAL_TIM_MspPostInit>

}
 8005eba:	bf00      	nop
 8005ebc:	3738      	adds	r7, #56	; 0x38
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	20000e70 	.word	0x20000e70
 8005ec8:	40000800 	.word	0x40000800

08005ecc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005ed0:	4b11      	ldr	r3, [pc, #68]	; (8005f18 <MX_USART1_UART_Init+0x4c>)
 8005ed2:	4a12      	ldr	r2, [pc, #72]	; (8005f1c <MX_USART1_UART_Init+0x50>)
 8005ed4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8005ed6:	4b10      	ldr	r3, [pc, #64]	; (8005f18 <MX_USART1_UART_Init+0x4c>)
 8005ed8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005edc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005ede:	4b0e      	ldr	r3, [pc, #56]	; (8005f18 <MX_USART1_UART_Init+0x4c>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005ee4:	4b0c      	ldr	r3, [pc, #48]	; (8005f18 <MX_USART1_UART_Init+0x4c>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005eea:	4b0b      	ldr	r3, [pc, #44]	; (8005f18 <MX_USART1_UART_Init+0x4c>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005ef0:	4b09      	ldr	r3, [pc, #36]	; (8005f18 <MX_USART1_UART_Init+0x4c>)
 8005ef2:	220c      	movs	r2, #12
 8005ef4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ef6:	4b08      	ldr	r3, [pc, #32]	; (8005f18 <MX_USART1_UART_Init+0x4c>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005efc:	4b06      	ldr	r3, [pc, #24]	; (8005f18 <MX_USART1_UART_Init+0x4c>)
 8005efe:	2200      	movs	r2, #0
 8005f00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005f02:	4805      	ldr	r0, [pc, #20]	; (8005f18 <MX_USART1_UART_Init+0x4c>)
 8005f04:	f7fc fe22 	bl	8002b4c <HAL_UART_Init>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d001      	beq.n	8005f12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005f0e:	f000 f887 	bl	8006020 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005f12:	bf00      	nop
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	20000eb8 	.word	0x20000eb8
 8005f1c:	40013800 	.word	0x40013800

08005f20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005f26:	4b0c      	ldr	r3, [pc, #48]	; (8005f58 <MX_DMA_Init+0x38>)
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	4a0b      	ldr	r2, [pc, #44]	; (8005f58 <MX_DMA_Init+0x38>)
 8005f2c:	f043 0301 	orr.w	r3, r3, #1
 8005f30:	6153      	str	r3, [r2, #20]
 8005f32:	4b09      	ldr	r3, [pc, #36]	; (8005f58 <MX_DMA_Init+0x38>)
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	607b      	str	r3, [r7, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8005f3e:	2200      	movs	r2, #0
 8005f40:	2100      	movs	r1, #0
 8005f42:	200f      	movs	r0, #15
 8005f44:	f7fa fd53 	bl	80009ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8005f48:	200f      	movs	r0, #15
 8005f4a:	f7fa fd6c 	bl	8000a26 <HAL_NVIC_EnableIRQ>

}
 8005f4e:	bf00      	nop
 8005f50:	3708      	adds	r7, #8
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	40021000 	.word	0x40021000

08005f5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f62:	f107 0308 	add.w	r3, r7, #8
 8005f66:	2200      	movs	r2, #0
 8005f68:	601a      	str	r2, [r3, #0]
 8005f6a:	605a      	str	r2, [r3, #4]
 8005f6c:	609a      	str	r2, [r3, #8]
 8005f6e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f70:	4b28      	ldr	r3, [pc, #160]	; (8006014 <MX_GPIO_Init+0xb8>)
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	4a27      	ldr	r2, [pc, #156]	; (8006014 <MX_GPIO_Init+0xb8>)
 8005f76:	f043 0304 	orr.w	r3, r3, #4
 8005f7a:	6193      	str	r3, [r2, #24]
 8005f7c:	4b25      	ldr	r3, [pc, #148]	; (8006014 <MX_GPIO_Init+0xb8>)
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	607b      	str	r3, [r7, #4]
 8005f86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f88:	4b22      	ldr	r3, [pc, #136]	; (8006014 <MX_GPIO_Init+0xb8>)
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	4a21      	ldr	r2, [pc, #132]	; (8006014 <MX_GPIO_Init+0xb8>)
 8005f8e:	f043 0308 	orr.w	r3, r3, #8
 8005f92:	6193      	str	r3, [r2, #24]
 8005f94:	4b1f      	ldr	r3, [pc, #124]	; (8006014 <MX_GPIO_Init+0xb8>)
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	f003 0308 	and.w	r3, r3, #8
 8005f9c:	603b      	str	r3, [r7, #0]
 8005f9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BT_RESET_GPIO_Port, BT_RESET_Pin, GPIO_PIN_SET);
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005fa6:	481c      	ldr	r0, [pc, #112]	; (8006018 <MX_GPIO_Init+0xbc>)
 8005fa8:	f7fb fbb7 	bl	800171a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_RESET_Pin */
  GPIO_InitStruct.Pin = BUTTON_RESET_Pin;
 8005fac:	2308      	movs	r3, #8
 8005fae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005fb0:	4b1a      	ldr	r3, [pc, #104]	; (800601c <MX_GPIO_Init+0xc0>)
 8005fb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON_RESET_GPIO_Port, &GPIO_InitStruct);
 8005fb8:	f107 0308 	add.w	r3, r7, #8
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	4816      	ldr	r0, [pc, #88]	; (8006018 <MX_GPIO_Init+0xbc>)
 8005fc0:	f7fb fa10 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_STAT_Pin */
  GPIO_InitStruct.Pin = BT_STAT_Pin;
 8005fc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fc8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BT_STAT_GPIO_Port, &GPIO_InitStruct);
 8005fd2:	f107 0308 	add.w	r3, r7, #8
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	480f      	ldr	r0, [pc, #60]	; (8006018 <MX_GPIO_Init+0xbc>)
 8005fda:	f7fb fa03 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_RESET_Pin */
  GPIO_InitStruct.Pin = BT_RESET_Pin;
 8005fde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005fe2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005fec:	2303      	movs	r3, #3
 8005fee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BT_RESET_GPIO_Port, &GPIO_InitStruct);
 8005ff0:	f107 0308 	add.w	r3, r7, #8
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	4808      	ldr	r0, [pc, #32]	; (8006018 <MX_GPIO_Init+0xbc>)
 8005ff8:	f7fb f9f4 	bl	80013e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	2100      	movs	r1, #0
 8006000:	2009      	movs	r0, #9
 8006002:	f7fa fcf4 	bl	80009ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8006006:	2009      	movs	r0, #9
 8006008:	f7fa fd0d 	bl	8000a26 <HAL_NVIC_EnableIRQ>

}
 800600c:	bf00      	nop
 800600e:	3718      	adds	r7, #24
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	40021000 	.word	0x40021000
 8006018:	40010800 	.word	0x40010800
 800601c:	10210000 	.word	0x10210000

08006020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006024:	bf00      	nop
 8006026:	46bd      	mov	sp, r7
 8006028:	bc80      	pop	{r7}
 800602a:	4770      	bx	lr

0800602c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006032:	4b15      	ldr	r3, [pc, #84]	; (8006088 <HAL_MspInit+0x5c>)
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	4a14      	ldr	r2, [pc, #80]	; (8006088 <HAL_MspInit+0x5c>)
 8006038:	f043 0301 	orr.w	r3, r3, #1
 800603c:	6193      	str	r3, [r2, #24]
 800603e:	4b12      	ldr	r3, [pc, #72]	; (8006088 <HAL_MspInit+0x5c>)
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	60bb      	str	r3, [r7, #8]
 8006048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800604a:	4b0f      	ldr	r3, [pc, #60]	; (8006088 <HAL_MspInit+0x5c>)
 800604c:	69db      	ldr	r3, [r3, #28]
 800604e:	4a0e      	ldr	r2, [pc, #56]	; (8006088 <HAL_MspInit+0x5c>)
 8006050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006054:	61d3      	str	r3, [r2, #28]
 8006056:	4b0c      	ldr	r3, [pc, #48]	; (8006088 <HAL_MspInit+0x5c>)
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800605e:	607b      	str	r3, [r7, #4]
 8006060:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006062:	4b0a      	ldr	r3, [pc, #40]	; (800608c <HAL_MspInit+0x60>)
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800606e:	60fb      	str	r3, [r7, #12]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006076:	60fb      	str	r3, [r7, #12]
 8006078:	4a04      	ldr	r2, [pc, #16]	; (800608c <HAL_MspInit+0x60>)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800607e:	bf00      	nop
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	bc80      	pop	{r7}
 8006086:	4770      	bx	lr
 8006088:	40021000 	.word	0x40021000
 800608c:	40010000 	.word	0x40010000

08006090 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a09      	ldr	r2, [pc, #36]	; (80060c4 <HAL_CRC_MspInit+0x34>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d10b      	bne.n	80060ba <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80060a2:	4b09      	ldr	r3, [pc, #36]	; (80060c8 <HAL_CRC_MspInit+0x38>)
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	4a08      	ldr	r2, [pc, #32]	; (80060c8 <HAL_CRC_MspInit+0x38>)
 80060a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060ac:	6153      	str	r3, [r2, #20]
 80060ae:	4b06      	ldr	r3, [pc, #24]	; (80060c8 <HAL_CRC_MspInit+0x38>)
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b6:	60fb      	str	r3, [r7, #12]
 80060b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80060ba:	bf00      	nop
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	bc80      	pop	{r7}
 80060c2:	4770      	bx	lr
 80060c4:	40023000 	.word	0x40023000
 80060c8:	40021000 	.word	0x40021000

080060cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b087      	sub	sp, #28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060dc:	d10c      	bne.n	80060f8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80060de:	4b1a      	ldr	r3, [pc, #104]	; (8006148 <HAL_TIM_Base_MspInit+0x7c>)
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	4a19      	ldr	r2, [pc, #100]	; (8006148 <HAL_TIM_Base_MspInit+0x7c>)
 80060e4:	f043 0301 	orr.w	r3, r3, #1
 80060e8:	61d3      	str	r3, [r2, #28]
 80060ea:	4b17      	ldr	r3, [pc, #92]	; (8006148 <HAL_TIM_Base_MspInit+0x7c>)
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	617b      	str	r3, [r7, #20]
 80060f4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80060f6:	e022      	b.n	800613e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a13      	ldr	r2, [pc, #76]	; (800614c <HAL_TIM_Base_MspInit+0x80>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d10c      	bne.n	800611c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006102:	4b11      	ldr	r3, [pc, #68]	; (8006148 <HAL_TIM_Base_MspInit+0x7c>)
 8006104:	69db      	ldr	r3, [r3, #28]
 8006106:	4a10      	ldr	r2, [pc, #64]	; (8006148 <HAL_TIM_Base_MspInit+0x7c>)
 8006108:	f043 0302 	orr.w	r3, r3, #2
 800610c:	61d3      	str	r3, [r2, #28]
 800610e:	4b0e      	ldr	r3, [pc, #56]	; (8006148 <HAL_TIM_Base_MspInit+0x7c>)
 8006110:	69db      	ldr	r3, [r3, #28]
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	613b      	str	r3, [r7, #16]
 8006118:	693b      	ldr	r3, [r7, #16]
}
 800611a:	e010      	b.n	800613e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a0b      	ldr	r2, [pc, #44]	; (8006150 <HAL_TIM_Base_MspInit+0x84>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d10b      	bne.n	800613e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006126:	4b08      	ldr	r3, [pc, #32]	; (8006148 <HAL_TIM_Base_MspInit+0x7c>)
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	4a07      	ldr	r2, [pc, #28]	; (8006148 <HAL_TIM_Base_MspInit+0x7c>)
 800612c:	f043 0304 	orr.w	r3, r3, #4
 8006130:	61d3      	str	r3, [r2, #28]
 8006132:	4b05      	ldr	r3, [pc, #20]	; (8006148 <HAL_TIM_Base_MspInit+0x7c>)
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	f003 0304 	and.w	r3, r3, #4
 800613a:	60fb      	str	r3, [r7, #12]
 800613c:	68fb      	ldr	r3, [r7, #12]
}
 800613e:	bf00      	nop
 8006140:	371c      	adds	r7, #28
 8006142:	46bd      	mov	sp, r7
 8006144:	bc80      	pop	{r7}
 8006146:	4770      	bx	lr
 8006148:	40021000 	.word	0x40021000
 800614c:	40000400 	.word	0x40000400
 8006150:	40000800 	.word	0x40000800

08006154 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b08a      	sub	sp, #40	; 0x28
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800615c:	f107 0314 	add.w	r3, r7, #20
 8006160:	2200      	movs	r2, #0
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	605a      	str	r2, [r3, #4]
 8006166:	609a      	str	r2, [r3, #8]
 8006168:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006172:	d118      	bne.n	80061a6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006174:	4b35      	ldr	r3, [pc, #212]	; (800624c <HAL_TIM_MspPostInit+0xf8>)
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	4a34      	ldr	r2, [pc, #208]	; (800624c <HAL_TIM_MspPostInit+0xf8>)
 800617a:	f043 0304 	orr.w	r3, r3, #4
 800617e:	6193      	str	r3, [r2, #24]
 8006180:	4b32      	ldr	r3, [pc, #200]	; (800624c <HAL_TIM_MspPostInit+0xf8>)
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	f003 0304 	and.w	r3, r3, #4
 8006188:	613b      	str	r3, [r7, #16]
 800618a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LED_STATUS_Pin;
 800618c:	2302      	movs	r3, #2
 800618e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006190:	2302      	movs	r3, #2
 8006192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006194:	2302      	movs	r3, #2
 8006196:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LED_STATUS_GPIO_Port, &GPIO_InitStruct);
 8006198:	f107 0314 	add.w	r3, r7, #20
 800619c:	4619      	mov	r1, r3
 800619e:	482c      	ldr	r0, [pc, #176]	; (8006250 <HAL_TIM_MspPostInit+0xfc>)
 80061a0:	f7fb f920 	bl	80013e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80061a4:	e04d      	b.n	8006242 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a2a      	ldr	r2, [pc, #168]	; (8006254 <HAL_TIM_MspPostInit+0x100>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d12a      	bne.n	8006206 <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061b0:	4b26      	ldr	r3, [pc, #152]	; (800624c <HAL_TIM_MspPostInit+0xf8>)
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	4a25      	ldr	r2, [pc, #148]	; (800624c <HAL_TIM_MspPostInit+0xf8>)
 80061b6:	f043 0308 	orr.w	r3, r3, #8
 80061ba:	6193      	str	r3, [r2, #24]
 80061bc:	4b23      	ldr	r3, [pc, #140]	; (800624c <HAL_TIM_MspPostInit+0xf8>)
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	f003 0308 	and.w	r3, r3, #8
 80061c4:	60fb      	str	r3, [r7, #12]
 80061c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_3_Pin|SERVO_4_Pin|SERVO_1_Pin|SERVO_2_Pin;
 80061c8:	2333      	movs	r3, #51	; 0x33
 80061ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061cc:	2302      	movs	r3, #2
 80061ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061d0:	2302      	movs	r3, #2
 80061d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061d4:	f107 0314 	add.w	r3, r7, #20
 80061d8:	4619      	mov	r1, r3
 80061da:	481f      	ldr	r0, [pc, #124]	; (8006258 <HAL_TIM_MspPostInit+0x104>)
 80061dc:	f7fb f902 	bl	80013e4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80061e0:	4b1e      	ldr	r3, [pc, #120]	; (800625c <HAL_TIM_MspPostInit+0x108>)
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	627b      	str	r3, [r7, #36]	; 0x24
 80061e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80061ec:	627b      	str	r3, [r7, #36]	; 0x24
 80061ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80061f4:	627b      	str	r3, [r7, #36]	; 0x24
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80061fc:	627b      	str	r3, [r7, #36]	; 0x24
 80061fe:	4a17      	ldr	r2, [pc, #92]	; (800625c <HAL_TIM_MspPostInit+0x108>)
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	6053      	str	r3, [r2, #4]
}
 8006204:	e01d      	b.n	8006242 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM4)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a15      	ldr	r2, [pc, #84]	; (8006260 <HAL_TIM_MspPostInit+0x10c>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d118      	bne.n	8006242 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006210:	4b0e      	ldr	r3, [pc, #56]	; (800624c <HAL_TIM_MspPostInit+0xf8>)
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	4a0d      	ldr	r2, [pc, #52]	; (800624c <HAL_TIM_MspPostInit+0xf8>)
 8006216:	f043 0308 	orr.w	r3, r3, #8
 800621a:	6193      	str	r3, [r2, #24]
 800621c:	4b0b      	ldr	r3, [pc, #44]	; (800624c <HAL_TIM_MspPostInit+0xf8>)
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	f003 0308 	and.w	r3, r3, #8
 8006224:	60bb      	str	r3, [r7, #8]
 8006226:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SERVO_5_Pin|SERVO_6_Pin|SERVO_7_Pin|SERVO_8_Pin;
 8006228:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800622c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800622e:	2302      	movs	r3, #2
 8006230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006232:	2302      	movs	r3, #2
 8006234:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006236:	f107 0314 	add.w	r3, r7, #20
 800623a:	4619      	mov	r1, r3
 800623c:	4806      	ldr	r0, [pc, #24]	; (8006258 <HAL_TIM_MspPostInit+0x104>)
 800623e:	f7fb f8d1 	bl	80013e4 <HAL_GPIO_Init>
}
 8006242:	bf00      	nop
 8006244:	3728      	adds	r7, #40	; 0x28
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	40021000 	.word	0x40021000
 8006250:	40010800 	.word	0x40010800
 8006254:	40000400 	.word	0x40000400
 8006258:	40010c00 	.word	0x40010c00
 800625c:	40010000 	.word	0x40010000
 8006260:	40000800 	.word	0x40000800

08006264 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b088      	sub	sp, #32
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800626c:	f107 0310 	add.w	r3, r7, #16
 8006270:	2200      	movs	r2, #0
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	605a      	str	r2, [r3, #4]
 8006276:	609a      	str	r2, [r3, #8]
 8006278:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a33      	ldr	r2, [pc, #204]	; (800634c <HAL_UART_MspInit+0xe8>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d15f      	bne.n	8006344 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006284:	4b32      	ldr	r3, [pc, #200]	; (8006350 <HAL_UART_MspInit+0xec>)
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	4a31      	ldr	r2, [pc, #196]	; (8006350 <HAL_UART_MspInit+0xec>)
 800628a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800628e:	6193      	str	r3, [r2, #24]
 8006290:	4b2f      	ldr	r3, [pc, #188]	; (8006350 <HAL_UART_MspInit+0xec>)
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006298:	60fb      	str	r3, [r7, #12]
 800629a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800629c:	4b2c      	ldr	r3, [pc, #176]	; (8006350 <HAL_UART_MspInit+0xec>)
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	4a2b      	ldr	r2, [pc, #172]	; (8006350 <HAL_UART_MspInit+0xec>)
 80062a2:	f043 0304 	orr.w	r3, r3, #4
 80062a6:	6193      	str	r3, [r2, #24]
 80062a8:	4b29      	ldr	r3, [pc, #164]	; (8006350 <HAL_UART_MspInit+0xec>)
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	f003 0304 	and.w	r3, r3, #4
 80062b0:	60bb      	str	r3, [r7, #8]
 80062b2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BT_TX_Pin;
 80062b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062ba:	2302      	movs	r3, #2
 80062bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80062be:	2303      	movs	r3, #3
 80062c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BT_TX_GPIO_Port, &GPIO_InitStruct);
 80062c2:	f107 0310 	add.w	r3, r7, #16
 80062c6:	4619      	mov	r1, r3
 80062c8:	4822      	ldr	r0, [pc, #136]	; (8006354 <HAL_UART_MspInit+0xf0>)
 80062ca:	f7fb f88b 	bl	80013e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BT_RX_Pin;
 80062ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80062d4:	2300      	movs	r3, #0
 80062d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80062d8:	2301      	movs	r3, #1
 80062da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BT_RX_GPIO_Port, &GPIO_InitStruct);
 80062dc:	f107 0310 	add.w	r3, r7, #16
 80062e0:	4619      	mov	r1, r3
 80062e2:	481c      	ldr	r0, [pc, #112]	; (8006354 <HAL_UART_MspInit+0xf0>)
 80062e4:	f7fb f87e 	bl	80013e4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80062e8:	4b1b      	ldr	r3, [pc, #108]	; (8006358 <HAL_UART_MspInit+0xf4>)
 80062ea:	4a1c      	ldr	r2, [pc, #112]	; (800635c <HAL_UART_MspInit+0xf8>)
 80062ec:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80062ee:	4b1a      	ldr	r3, [pc, #104]	; (8006358 <HAL_UART_MspInit+0xf4>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80062f4:	4b18      	ldr	r3, [pc, #96]	; (8006358 <HAL_UART_MspInit+0xf4>)
 80062f6:	2200      	movs	r2, #0
 80062f8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80062fa:	4b17      	ldr	r3, [pc, #92]	; (8006358 <HAL_UART_MspInit+0xf4>)
 80062fc:	2280      	movs	r2, #128	; 0x80
 80062fe:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006300:	4b15      	ldr	r3, [pc, #84]	; (8006358 <HAL_UART_MspInit+0xf4>)
 8006302:	2200      	movs	r2, #0
 8006304:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006306:	4b14      	ldr	r3, [pc, #80]	; (8006358 <HAL_UART_MspInit+0xf4>)
 8006308:	2200      	movs	r2, #0
 800630a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800630c:	4b12      	ldr	r3, [pc, #72]	; (8006358 <HAL_UART_MspInit+0xf4>)
 800630e:	2200      	movs	r2, #0
 8006310:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006312:	4b11      	ldr	r3, [pc, #68]	; (8006358 <HAL_UART_MspInit+0xf4>)
 8006314:	2200      	movs	r2, #0
 8006316:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006318:	480f      	ldr	r0, [pc, #60]	; (8006358 <HAL_UART_MspInit+0xf4>)
 800631a:	f7fa fbbb 	bl	8000a94 <HAL_DMA_Init>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d001      	beq.n	8006328 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8006324:	f7ff fe7c 	bl	8006020 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a0b      	ldr	r2, [pc, #44]	; (8006358 <HAL_UART_MspInit+0xf4>)
 800632c:	639a      	str	r2, [r3, #56]	; 0x38
 800632e:	4a0a      	ldr	r2, [pc, #40]	; (8006358 <HAL_UART_MspInit+0xf4>)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006334:	2200      	movs	r2, #0
 8006336:	2100      	movs	r1, #0
 8006338:	2025      	movs	r0, #37	; 0x25
 800633a:	f7fa fb58 	bl	80009ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800633e:	2025      	movs	r0, #37	; 0x25
 8006340:	f7fa fb71 	bl	8000a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006344:	bf00      	nop
 8006346:	3720      	adds	r7, #32
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	40013800 	.word	0x40013800
 8006350:	40021000 	.word	0x40021000
 8006354:	40010800 	.word	0x40010800
 8006358:	20000efc 	.word	0x20000efc
 800635c:	40020058 	.word	0x40020058

08006360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006360:	b480      	push	{r7}
 8006362:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006364:	bf00      	nop
 8006366:	46bd      	mov	sp, r7
 8006368:	bc80      	pop	{r7}
 800636a:	4770      	bx	lr

0800636c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800636c:	b480      	push	{r7}
 800636e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006370:	e7fe      	b.n	8006370 <HardFault_Handler+0x4>

08006372 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006372:	b480      	push	{r7}
 8006374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006376:	e7fe      	b.n	8006376 <MemManage_Handler+0x4>

08006378 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006378:	b480      	push	{r7}
 800637a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800637c:	e7fe      	b.n	800637c <BusFault_Handler+0x4>

0800637e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800637e:	b480      	push	{r7}
 8006380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006382:	e7fe      	b.n	8006382 <UsageFault_Handler+0x4>

08006384 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006384:	b480      	push	{r7}
 8006386:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006388:	bf00      	nop
 800638a:	46bd      	mov	sp, r7
 800638c:	bc80      	pop	{r7}
 800638e:	4770      	bx	lr

08006390 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006390:	b480      	push	{r7}
 8006392:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006394:	bf00      	nop
 8006396:	46bd      	mov	sp, r7
 8006398:	bc80      	pop	{r7}
 800639a:	4770      	bx	lr

0800639c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800639c:	b480      	push	{r7}
 800639e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80063a0:	bf00      	nop
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bc80      	pop	{r7}
 80063a6:	4770      	bx	lr

080063a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80063ac:	f7fa fa08 	bl	80007c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Interrupts_SysTick();
 80063b0:	f7fd fdde 	bl	8003f70 <Interrupts_SysTick>
  /* USER CODE END SysTick_IRQn 1 */
}
 80063b4:	bf00      	nop
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_RESET_Pin);
 80063bc:	2008      	movs	r0, #8
 80063be:	f7fb f9c5 	bl	800174c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80063c2:	bf00      	nop
 80063c4:	bd80      	pop	{r7, pc}
	...

080063c8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80063cc:	4802      	ldr	r0, [pc, #8]	; (80063d8 <DMA1_Channel5_IRQHandler+0x10>)
 80063ce:	f7fa fccb 	bl	8000d68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80063d2:	bf00      	nop
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20000efc 	.word	0x20000efc

080063dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80063e0:	4802      	ldr	r0, [pc, #8]	; (80063ec <USART1_IRQHandler+0x10>)
 80063e2:	f7fc fd83 	bl	8002eec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80063e6:	bf00      	nop
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20000eb8 	.word	0x20000eb8

080063f0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80063f8:	4b11      	ldr	r3, [pc, #68]	; (8006440 <_sbrk+0x50>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d102      	bne.n	8006406 <_sbrk+0x16>
		heap_end = &end;
 8006400:	4b0f      	ldr	r3, [pc, #60]	; (8006440 <_sbrk+0x50>)
 8006402:	4a10      	ldr	r2, [pc, #64]	; (8006444 <_sbrk+0x54>)
 8006404:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006406:	4b0e      	ldr	r3, [pc, #56]	; (8006440 <_sbrk+0x50>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800640c:	4b0c      	ldr	r3, [pc, #48]	; (8006440 <_sbrk+0x50>)
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4413      	add	r3, r2
 8006414:	466a      	mov	r2, sp
 8006416:	4293      	cmp	r3, r2
 8006418:	d907      	bls.n	800642a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800641a:	f000 f86f 	bl	80064fc <__errno>
 800641e:	4603      	mov	r3, r0
 8006420:	220c      	movs	r2, #12
 8006422:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8006424:	f04f 33ff 	mov.w	r3, #4294967295
 8006428:	e006      	b.n	8006438 <_sbrk+0x48>
	}

	heap_end += incr;
 800642a:	4b05      	ldr	r3, [pc, #20]	; (8006440 <_sbrk+0x50>)
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4413      	add	r3, r2
 8006432:	4a03      	ldr	r2, [pc, #12]	; (8006440 <_sbrk+0x50>)
 8006434:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006436:	68fb      	ldr	r3, [r7, #12]
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	20000f40 	.word	0x20000f40
 8006444:	20000f80 	.word	0x20000f80

08006448 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006448:	b480      	push	{r7}
 800644a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800644c:	4b15      	ldr	r3, [pc, #84]	; (80064a4 <SystemInit+0x5c>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a14      	ldr	r2, [pc, #80]	; (80064a4 <SystemInit+0x5c>)
 8006452:	f043 0301 	orr.w	r3, r3, #1
 8006456:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8006458:	4b12      	ldr	r3, [pc, #72]	; (80064a4 <SystemInit+0x5c>)
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	4911      	ldr	r1, [pc, #68]	; (80064a4 <SystemInit+0x5c>)
 800645e:	4b12      	ldr	r3, [pc, #72]	; (80064a8 <SystemInit+0x60>)
 8006460:	4013      	ands	r3, r2
 8006462:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006464:	4b0f      	ldr	r3, [pc, #60]	; (80064a4 <SystemInit+0x5c>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a0e      	ldr	r2, [pc, #56]	; (80064a4 <SystemInit+0x5c>)
 800646a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800646e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006472:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006474:	4b0b      	ldr	r3, [pc, #44]	; (80064a4 <SystemInit+0x5c>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a0a      	ldr	r2, [pc, #40]	; (80064a4 <SystemInit+0x5c>)
 800647a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800647e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8006480:	4b08      	ldr	r3, [pc, #32]	; (80064a4 <SystemInit+0x5c>)
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	4a07      	ldr	r2, [pc, #28]	; (80064a4 <SystemInit+0x5c>)
 8006486:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800648a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800648c:	4b05      	ldr	r3, [pc, #20]	; (80064a4 <SystemInit+0x5c>)
 800648e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8006492:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8006494:	4b05      	ldr	r3, [pc, #20]	; (80064ac <SystemInit+0x64>)
 8006496:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800649a:	609a      	str	r2, [r3, #8]
#endif 
}
 800649c:	bf00      	nop
 800649e:	46bd      	mov	sp, r7
 80064a0:	bc80      	pop	{r7}
 80064a2:	4770      	bx	lr
 80064a4:	40021000 	.word	0x40021000
 80064a8:	f8ff0000 	.word	0xf8ff0000
 80064ac:	e000ed00 	.word	0xe000ed00

080064b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80064b0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80064b2:	e003      	b.n	80064bc <LoopCopyDataInit>

080064b4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80064b4:	4b0b      	ldr	r3, [pc, #44]	; (80064e4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80064b6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80064b8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80064ba:	3104      	adds	r1, #4

080064bc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80064bc:	480a      	ldr	r0, [pc, #40]	; (80064e8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80064be:	4b0b      	ldr	r3, [pc, #44]	; (80064ec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80064c0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80064c2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80064c4:	d3f6      	bcc.n	80064b4 <CopyDataInit>
  ldr r2, =_sbss
 80064c6:	4a0a      	ldr	r2, [pc, #40]	; (80064f0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80064c8:	e002      	b.n	80064d0 <LoopFillZerobss>

080064ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80064ca:	2300      	movs	r3, #0
  str r3, [r2], #4
 80064cc:	f842 3b04 	str.w	r3, [r2], #4

080064d0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80064d0:	4b08      	ldr	r3, [pc, #32]	; (80064f4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80064d2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80064d4:	d3f9      	bcc.n	80064ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80064d6:	f7ff ffb7 	bl	8006448 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80064da:	f000 f815 	bl	8006508 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80064de:	f7ff fae3 	bl	8005aa8 <main>
  bx lr
 80064e2:	4770      	bx	lr
  ldr r3, =_sidata
 80064e4:	08007c38 	.word	0x08007c38
  ldr r0, =_sdata
 80064e8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80064ec:	20000ba4 	.word	0x20000ba4
  ldr r2, =_sbss
 80064f0:	20000ba8 	.word	0x20000ba8
  ldr r3, = _ebss
 80064f4:	20000f80 	.word	0x20000f80

080064f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80064f8:	e7fe      	b.n	80064f8 <ADC1_2_IRQHandler>
	...

080064fc <__errno>:
 80064fc:	4b01      	ldr	r3, [pc, #4]	; (8006504 <__errno+0x8>)
 80064fe:	6818      	ldr	r0, [r3, #0]
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	20000360 	.word	0x20000360

08006508 <__libc_init_array>:
 8006508:	b570      	push	{r4, r5, r6, lr}
 800650a:	2600      	movs	r6, #0
 800650c:	4d0c      	ldr	r5, [pc, #48]	; (8006540 <__libc_init_array+0x38>)
 800650e:	4c0d      	ldr	r4, [pc, #52]	; (8006544 <__libc_init_array+0x3c>)
 8006510:	1b64      	subs	r4, r4, r5
 8006512:	10a4      	asrs	r4, r4, #2
 8006514:	42a6      	cmp	r6, r4
 8006516:	d109      	bne.n	800652c <__libc_init_array+0x24>
 8006518:	f000 fc1a 	bl	8006d50 <_init>
 800651c:	2600      	movs	r6, #0
 800651e:	4d0a      	ldr	r5, [pc, #40]	; (8006548 <__libc_init_array+0x40>)
 8006520:	4c0a      	ldr	r4, [pc, #40]	; (800654c <__libc_init_array+0x44>)
 8006522:	1b64      	subs	r4, r4, r5
 8006524:	10a4      	asrs	r4, r4, #2
 8006526:	42a6      	cmp	r6, r4
 8006528:	d105      	bne.n	8006536 <__libc_init_array+0x2e>
 800652a:	bd70      	pop	{r4, r5, r6, pc}
 800652c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006530:	4798      	blx	r3
 8006532:	3601      	adds	r6, #1
 8006534:	e7ee      	b.n	8006514 <__libc_init_array+0xc>
 8006536:	f855 3b04 	ldr.w	r3, [r5], #4
 800653a:	4798      	blx	r3
 800653c:	3601      	adds	r6, #1
 800653e:	e7f2      	b.n	8006526 <__libc_init_array+0x1e>
 8006540:	08007c2c 	.word	0x08007c2c
 8006544:	08007c2c 	.word	0x08007c2c
 8006548:	08007c2c 	.word	0x08007c2c
 800654c:	08007c34 	.word	0x08007c34

08006550 <malloc>:
 8006550:	4b02      	ldr	r3, [pc, #8]	; (800655c <malloc+0xc>)
 8006552:	4601      	mov	r1, r0
 8006554:	6818      	ldr	r0, [r3, #0]
 8006556:	f000 b803 	b.w	8006560 <_malloc_r>
 800655a:	bf00      	nop
 800655c:	20000360 	.word	0x20000360

08006560 <_malloc_r>:
 8006560:	f101 030b 	add.w	r3, r1, #11
 8006564:	2b16      	cmp	r3, #22
 8006566:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800656a:	4605      	mov	r5, r0
 800656c:	d906      	bls.n	800657c <_malloc_r+0x1c>
 800656e:	f033 0707 	bics.w	r7, r3, #7
 8006572:	d504      	bpl.n	800657e <_malloc_r+0x1e>
 8006574:	230c      	movs	r3, #12
 8006576:	602b      	str	r3, [r5, #0]
 8006578:	2400      	movs	r4, #0
 800657a:	e1a3      	b.n	80068c4 <_malloc_r+0x364>
 800657c:	2710      	movs	r7, #16
 800657e:	42b9      	cmp	r1, r7
 8006580:	d8f8      	bhi.n	8006574 <_malloc_r+0x14>
 8006582:	4628      	mov	r0, r5
 8006584:	f000 fa3e 	bl	8006a04 <__malloc_lock>
 8006588:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 800658c:	4eaf      	ldr	r6, [pc, #700]	; (800684c <_malloc_r+0x2ec>)
 800658e:	d237      	bcs.n	8006600 <_malloc_r+0xa0>
 8006590:	f107 0208 	add.w	r2, r7, #8
 8006594:	4432      	add	r2, r6
 8006596:	6854      	ldr	r4, [r2, #4]
 8006598:	f1a2 0108 	sub.w	r1, r2, #8
 800659c:	428c      	cmp	r4, r1
 800659e:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 80065a2:	d102      	bne.n	80065aa <_malloc_r+0x4a>
 80065a4:	68d4      	ldr	r4, [r2, #12]
 80065a6:	42a2      	cmp	r2, r4
 80065a8:	d010      	beq.n	80065cc <_malloc_r+0x6c>
 80065aa:	6863      	ldr	r3, [r4, #4]
 80065ac:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80065b0:	f023 0303 	bic.w	r3, r3, #3
 80065b4:	60ca      	str	r2, [r1, #12]
 80065b6:	4423      	add	r3, r4
 80065b8:	6091      	str	r1, [r2, #8]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	f042 0201 	orr.w	r2, r2, #1
 80065c0:	605a      	str	r2, [r3, #4]
 80065c2:	4628      	mov	r0, r5
 80065c4:	f000 fa24 	bl	8006a10 <__malloc_unlock>
 80065c8:	3408      	adds	r4, #8
 80065ca:	e17b      	b.n	80068c4 <_malloc_r+0x364>
 80065cc:	3302      	adds	r3, #2
 80065ce:	6934      	ldr	r4, [r6, #16]
 80065d0:	499f      	ldr	r1, [pc, #636]	; (8006850 <_malloc_r+0x2f0>)
 80065d2:	428c      	cmp	r4, r1
 80065d4:	d077      	beq.n	80066c6 <_malloc_r+0x166>
 80065d6:	6862      	ldr	r2, [r4, #4]
 80065d8:	f022 0c03 	bic.w	ip, r2, #3
 80065dc:	ebac 0007 	sub.w	r0, ip, r7
 80065e0:	280f      	cmp	r0, #15
 80065e2:	dd48      	ble.n	8006676 <_malloc_r+0x116>
 80065e4:	19e2      	adds	r2, r4, r7
 80065e6:	f040 0301 	orr.w	r3, r0, #1
 80065ea:	f047 0701 	orr.w	r7, r7, #1
 80065ee:	6067      	str	r7, [r4, #4]
 80065f0:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80065f4:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80065f8:	6053      	str	r3, [r2, #4]
 80065fa:	f844 000c 	str.w	r0, [r4, ip]
 80065fe:	e7e0      	b.n	80065c2 <_malloc_r+0x62>
 8006600:	0a7b      	lsrs	r3, r7, #9
 8006602:	d02a      	beq.n	800665a <_malloc_r+0xfa>
 8006604:	2b04      	cmp	r3, #4
 8006606:	d812      	bhi.n	800662e <_malloc_r+0xce>
 8006608:	09bb      	lsrs	r3, r7, #6
 800660a:	3338      	adds	r3, #56	; 0x38
 800660c:	1c5a      	adds	r2, r3, #1
 800660e:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8006612:	6854      	ldr	r4, [r2, #4]
 8006614:	f1a2 0c08 	sub.w	ip, r2, #8
 8006618:	4564      	cmp	r4, ip
 800661a:	d006      	beq.n	800662a <_malloc_r+0xca>
 800661c:	6862      	ldr	r2, [r4, #4]
 800661e:	f022 0203 	bic.w	r2, r2, #3
 8006622:	1bd0      	subs	r0, r2, r7
 8006624:	280f      	cmp	r0, #15
 8006626:	dd1c      	ble.n	8006662 <_malloc_r+0x102>
 8006628:	3b01      	subs	r3, #1
 800662a:	3301      	adds	r3, #1
 800662c:	e7cf      	b.n	80065ce <_malloc_r+0x6e>
 800662e:	2b14      	cmp	r3, #20
 8006630:	d801      	bhi.n	8006636 <_malloc_r+0xd6>
 8006632:	335b      	adds	r3, #91	; 0x5b
 8006634:	e7ea      	b.n	800660c <_malloc_r+0xac>
 8006636:	2b54      	cmp	r3, #84	; 0x54
 8006638:	d802      	bhi.n	8006640 <_malloc_r+0xe0>
 800663a:	0b3b      	lsrs	r3, r7, #12
 800663c:	336e      	adds	r3, #110	; 0x6e
 800663e:	e7e5      	b.n	800660c <_malloc_r+0xac>
 8006640:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8006644:	d802      	bhi.n	800664c <_malloc_r+0xec>
 8006646:	0bfb      	lsrs	r3, r7, #15
 8006648:	3377      	adds	r3, #119	; 0x77
 800664a:	e7df      	b.n	800660c <_malloc_r+0xac>
 800664c:	f240 5254 	movw	r2, #1364	; 0x554
 8006650:	4293      	cmp	r3, r2
 8006652:	d804      	bhi.n	800665e <_malloc_r+0xfe>
 8006654:	0cbb      	lsrs	r3, r7, #18
 8006656:	337c      	adds	r3, #124	; 0x7c
 8006658:	e7d8      	b.n	800660c <_malloc_r+0xac>
 800665a:	233f      	movs	r3, #63	; 0x3f
 800665c:	e7d6      	b.n	800660c <_malloc_r+0xac>
 800665e:	237e      	movs	r3, #126	; 0x7e
 8006660:	e7d4      	b.n	800660c <_malloc_r+0xac>
 8006662:	2800      	cmp	r0, #0
 8006664:	68e1      	ldr	r1, [r4, #12]
 8006666:	db04      	blt.n	8006672 <_malloc_r+0x112>
 8006668:	68a3      	ldr	r3, [r4, #8]
 800666a:	60d9      	str	r1, [r3, #12]
 800666c:	608b      	str	r3, [r1, #8]
 800666e:	18a3      	adds	r3, r4, r2
 8006670:	e7a3      	b.n	80065ba <_malloc_r+0x5a>
 8006672:	460c      	mov	r4, r1
 8006674:	e7d0      	b.n	8006618 <_malloc_r+0xb8>
 8006676:	2800      	cmp	r0, #0
 8006678:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800667c:	db07      	blt.n	800668e <_malloc_r+0x12e>
 800667e:	44a4      	add	ip, r4
 8006680:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8006684:	f043 0301 	orr.w	r3, r3, #1
 8006688:	f8cc 3004 	str.w	r3, [ip, #4]
 800668c:	e799      	b.n	80065c2 <_malloc_r+0x62>
 800668e:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8006692:	6870      	ldr	r0, [r6, #4]
 8006694:	f080 8094 	bcs.w	80067c0 <_malloc_r+0x260>
 8006698:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800669c:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 80066a0:	f04f 0c01 	mov.w	ip, #1
 80066a4:	fa0c fc0e 	lsl.w	ip, ip, lr
 80066a8:	ea4c 0000 	orr.w	r0, ip, r0
 80066ac:	3201      	adds	r2, #1
 80066ae:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 80066b2:	6070      	str	r0, [r6, #4]
 80066b4:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 80066b8:	3808      	subs	r0, #8
 80066ba:	e9c4 c002 	strd	ip, r0, [r4, #8]
 80066be:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 80066c2:	f8cc 400c 	str.w	r4, [ip, #12]
 80066c6:	2001      	movs	r0, #1
 80066c8:	109a      	asrs	r2, r3, #2
 80066ca:	fa00 f202 	lsl.w	r2, r0, r2
 80066ce:	6870      	ldr	r0, [r6, #4]
 80066d0:	4290      	cmp	r0, r2
 80066d2:	d326      	bcc.n	8006722 <_malloc_r+0x1c2>
 80066d4:	4210      	tst	r0, r2
 80066d6:	d106      	bne.n	80066e6 <_malloc_r+0x186>
 80066d8:	f023 0303 	bic.w	r3, r3, #3
 80066dc:	0052      	lsls	r2, r2, #1
 80066de:	4210      	tst	r0, r2
 80066e0:	f103 0304 	add.w	r3, r3, #4
 80066e4:	d0fa      	beq.n	80066dc <_malloc_r+0x17c>
 80066e6:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 80066ea:	46c1      	mov	r9, r8
 80066ec:	469e      	mov	lr, r3
 80066ee:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80066f2:	454c      	cmp	r4, r9
 80066f4:	f040 80b8 	bne.w	8006868 <_malloc_r+0x308>
 80066f8:	f10e 0e01 	add.w	lr, lr, #1
 80066fc:	f01e 0f03 	tst.w	lr, #3
 8006700:	f109 0908 	add.w	r9, r9, #8
 8006704:	d1f3      	bne.n	80066ee <_malloc_r+0x18e>
 8006706:	0798      	lsls	r0, r3, #30
 8006708:	f040 80e2 	bne.w	80068d0 <_malloc_r+0x370>
 800670c:	6873      	ldr	r3, [r6, #4]
 800670e:	ea23 0302 	bic.w	r3, r3, r2
 8006712:	6073      	str	r3, [r6, #4]
 8006714:	6870      	ldr	r0, [r6, #4]
 8006716:	0052      	lsls	r2, r2, #1
 8006718:	4290      	cmp	r0, r2
 800671a:	d302      	bcc.n	8006722 <_malloc_r+0x1c2>
 800671c:	2a00      	cmp	r2, #0
 800671e:	f040 80e3 	bne.w	80068e8 <_malloc_r+0x388>
 8006722:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8006726:	f8da 3004 	ldr.w	r3, [sl, #4]
 800672a:	f023 0903 	bic.w	r9, r3, #3
 800672e:	45b9      	cmp	r9, r7
 8006730:	d304      	bcc.n	800673c <_malloc_r+0x1dc>
 8006732:	eba9 0207 	sub.w	r2, r9, r7
 8006736:	2a0f      	cmp	r2, #15
 8006738:	f300 8141 	bgt.w	80069be <_malloc_r+0x45e>
 800673c:	4b45      	ldr	r3, [pc, #276]	; (8006854 <_malloc_r+0x2f4>)
 800673e:	2008      	movs	r0, #8
 8006740:	6819      	ldr	r1, [r3, #0]
 8006742:	eb0a 0b09 	add.w	fp, sl, r9
 8006746:	3110      	adds	r1, #16
 8006748:	4439      	add	r1, r7
 800674a:	9101      	str	r1, [sp, #4]
 800674c:	f000 f976 	bl	8006a3c <sysconf>
 8006750:	4a41      	ldr	r2, [pc, #260]	; (8006858 <_malloc_r+0x2f8>)
 8006752:	9901      	ldr	r1, [sp, #4]
 8006754:	6813      	ldr	r3, [r2, #0]
 8006756:	4680      	mov	r8, r0
 8006758:	3301      	adds	r3, #1
 800675a:	bf1f      	itttt	ne
 800675c:	f101 31ff 	addne.w	r1, r1, #4294967295
 8006760:	1809      	addne	r1, r1, r0
 8006762:	4243      	negne	r3, r0
 8006764:	4019      	andne	r1, r3
 8006766:	4628      	mov	r0, r5
 8006768:	9101      	str	r1, [sp, #4]
 800676a:	f000 f957 	bl	8006a1c <_sbrk_r>
 800676e:	1c42      	adds	r2, r0, #1
 8006770:	4604      	mov	r4, r0
 8006772:	f000 80f7 	beq.w	8006964 <_malloc_r+0x404>
 8006776:	4583      	cmp	fp, r0
 8006778:	9901      	ldr	r1, [sp, #4]
 800677a:	4a37      	ldr	r2, [pc, #220]	; (8006858 <_malloc_r+0x2f8>)
 800677c:	d902      	bls.n	8006784 <_malloc_r+0x224>
 800677e:	45b2      	cmp	sl, r6
 8006780:	f040 80f0 	bne.w	8006964 <_malloc_r+0x404>
 8006784:	4b35      	ldr	r3, [pc, #212]	; (800685c <_malloc_r+0x2fc>)
 8006786:	45a3      	cmp	fp, r4
 8006788:	6818      	ldr	r0, [r3, #0]
 800678a:	f108 3cff 	add.w	ip, r8, #4294967295
 800678e:	4408      	add	r0, r1
 8006790:	6018      	str	r0, [r3, #0]
 8006792:	f040 80ab 	bne.w	80068ec <_malloc_r+0x38c>
 8006796:	ea1b 0f0c 	tst.w	fp, ip
 800679a:	f040 80a7 	bne.w	80068ec <_malloc_r+0x38c>
 800679e:	68b2      	ldr	r2, [r6, #8]
 80067a0:	4449      	add	r1, r9
 80067a2:	f041 0101 	orr.w	r1, r1, #1
 80067a6:	6051      	str	r1, [r2, #4]
 80067a8:	4a2d      	ldr	r2, [pc, #180]	; (8006860 <_malloc_r+0x300>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6811      	ldr	r1, [r2, #0]
 80067ae:	428b      	cmp	r3, r1
 80067b0:	bf88      	it	hi
 80067b2:	6013      	strhi	r3, [r2, #0]
 80067b4:	4a2b      	ldr	r2, [pc, #172]	; (8006864 <_malloc_r+0x304>)
 80067b6:	6811      	ldr	r1, [r2, #0]
 80067b8:	428b      	cmp	r3, r1
 80067ba:	bf88      	it	hi
 80067bc:	6013      	strhi	r3, [r2, #0]
 80067be:	e0d1      	b.n	8006964 <_malloc_r+0x404>
 80067c0:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 80067c4:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80067c8:	d218      	bcs.n	80067fc <_malloc_r+0x29c>
 80067ca:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80067ce:	3238      	adds	r2, #56	; 0x38
 80067d0:	f102 0e01 	add.w	lr, r2, #1
 80067d4:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 80067d8:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 80067dc:	45f0      	cmp	r8, lr
 80067de:	d12b      	bne.n	8006838 <_malloc_r+0x2d8>
 80067e0:	f04f 0c01 	mov.w	ip, #1
 80067e4:	1092      	asrs	r2, r2, #2
 80067e6:	fa0c f202 	lsl.w	r2, ip, r2
 80067ea:	4310      	orrs	r0, r2
 80067ec:	6070      	str	r0, [r6, #4]
 80067ee:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80067f2:	f8c8 4008 	str.w	r4, [r8, #8]
 80067f6:	f8ce 400c 	str.w	r4, [lr, #12]
 80067fa:	e764      	b.n	80066c6 <_malloc_r+0x166>
 80067fc:	2a14      	cmp	r2, #20
 80067fe:	d801      	bhi.n	8006804 <_malloc_r+0x2a4>
 8006800:	325b      	adds	r2, #91	; 0x5b
 8006802:	e7e5      	b.n	80067d0 <_malloc_r+0x270>
 8006804:	2a54      	cmp	r2, #84	; 0x54
 8006806:	d803      	bhi.n	8006810 <_malloc_r+0x2b0>
 8006808:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800680c:	326e      	adds	r2, #110	; 0x6e
 800680e:	e7df      	b.n	80067d0 <_malloc_r+0x270>
 8006810:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006814:	d803      	bhi.n	800681e <_malloc_r+0x2be>
 8006816:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800681a:	3277      	adds	r2, #119	; 0x77
 800681c:	e7d8      	b.n	80067d0 <_malloc_r+0x270>
 800681e:	f240 5e54 	movw	lr, #1364	; 0x554
 8006822:	4572      	cmp	r2, lr
 8006824:	bf96      	itet	ls
 8006826:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800682a:	227e      	movhi	r2, #126	; 0x7e
 800682c:	327c      	addls	r2, #124	; 0x7c
 800682e:	e7cf      	b.n	80067d0 <_malloc_r+0x270>
 8006830:	f8de e008 	ldr.w	lr, [lr, #8]
 8006834:	45f0      	cmp	r8, lr
 8006836:	d005      	beq.n	8006844 <_malloc_r+0x2e4>
 8006838:	f8de 2004 	ldr.w	r2, [lr, #4]
 800683c:	f022 0203 	bic.w	r2, r2, #3
 8006840:	4562      	cmp	r2, ip
 8006842:	d8f5      	bhi.n	8006830 <_malloc_r+0x2d0>
 8006844:	f8de 800c 	ldr.w	r8, [lr, #12]
 8006848:	e7d1      	b.n	80067ee <_malloc_r+0x28e>
 800684a:	bf00      	nop
 800684c:	20000790 	.word	0x20000790
 8006850:	20000798 	.word	0x20000798
 8006854:	20000f74 	.word	0x20000f74
 8006858:	20000b98 	.word	0x20000b98
 800685c:	20000f44 	.word	0x20000f44
 8006860:	20000f6c 	.word	0x20000f6c
 8006864:	20000f70 	.word	0x20000f70
 8006868:	6860      	ldr	r0, [r4, #4]
 800686a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800686e:	f020 0003 	bic.w	r0, r0, #3
 8006872:	eba0 0a07 	sub.w	sl, r0, r7
 8006876:	f1ba 0f0f 	cmp.w	sl, #15
 800687a:	dd12      	ble.n	80068a2 <_malloc_r+0x342>
 800687c:	68a3      	ldr	r3, [r4, #8]
 800687e:	19e2      	adds	r2, r4, r7
 8006880:	f047 0701 	orr.w	r7, r7, #1
 8006884:	6067      	str	r7, [r4, #4]
 8006886:	f8c3 c00c 	str.w	ip, [r3, #12]
 800688a:	f8cc 3008 	str.w	r3, [ip, #8]
 800688e:	f04a 0301 	orr.w	r3, sl, #1
 8006892:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8006896:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800689a:	6053      	str	r3, [r2, #4]
 800689c:	f844 a000 	str.w	sl, [r4, r0]
 80068a0:	e68f      	b.n	80065c2 <_malloc_r+0x62>
 80068a2:	f1ba 0f00 	cmp.w	sl, #0
 80068a6:	db11      	blt.n	80068cc <_malloc_r+0x36c>
 80068a8:	4420      	add	r0, r4
 80068aa:	6843      	ldr	r3, [r0, #4]
 80068ac:	f043 0301 	orr.w	r3, r3, #1
 80068b0:	6043      	str	r3, [r0, #4]
 80068b2:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80068b6:	4628      	mov	r0, r5
 80068b8:	f8c3 c00c 	str.w	ip, [r3, #12]
 80068bc:	f8cc 3008 	str.w	r3, [ip, #8]
 80068c0:	f000 f8a6 	bl	8006a10 <__malloc_unlock>
 80068c4:	4620      	mov	r0, r4
 80068c6:	b003      	add	sp, #12
 80068c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068cc:	4664      	mov	r4, ip
 80068ce:	e710      	b.n	80066f2 <_malloc_r+0x192>
 80068d0:	f858 0908 	ldr.w	r0, [r8], #-8
 80068d4:	3b01      	subs	r3, #1
 80068d6:	4540      	cmp	r0, r8
 80068d8:	f43f af15 	beq.w	8006706 <_malloc_r+0x1a6>
 80068dc:	e71a      	b.n	8006714 <_malloc_r+0x1b4>
 80068de:	3304      	adds	r3, #4
 80068e0:	0052      	lsls	r2, r2, #1
 80068e2:	4210      	tst	r0, r2
 80068e4:	d0fb      	beq.n	80068de <_malloc_r+0x37e>
 80068e6:	e6fe      	b.n	80066e6 <_malloc_r+0x186>
 80068e8:	4673      	mov	r3, lr
 80068ea:	e7fa      	b.n	80068e2 <_malloc_r+0x382>
 80068ec:	f8d2 e000 	ldr.w	lr, [r2]
 80068f0:	f1be 3fff 	cmp.w	lr, #4294967295
 80068f4:	bf1b      	ittet	ne
 80068f6:	eba4 0b0b 	subne.w	fp, r4, fp
 80068fa:	eb0b 0200 	addne.w	r2, fp, r0
 80068fe:	6014      	streq	r4, [r2, #0]
 8006900:	601a      	strne	r2, [r3, #0]
 8006902:	f014 0b07 	ands.w	fp, r4, #7
 8006906:	bf0e      	itee	eq
 8006908:	4658      	moveq	r0, fp
 800690a:	f1cb 0008 	rsbne	r0, fp, #8
 800690e:	1824      	addne	r4, r4, r0
 8006910:	1862      	adds	r2, r4, r1
 8006912:	ea02 010c 	and.w	r1, r2, ip
 8006916:	4480      	add	r8, r0
 8006918:	eba8 0801 	sub.w	r8, r8, r1
 800691c:	ea08 080c 	and.w	r8, r8, ip
 8006920:	4641      	mov	r1, r8
 8006922:	4628      	mov	r0, r5
 8006924:	9201      	str	r2, [sp, #4]
 8006926:	f000 f879 	bl	8006a1c <_sbrk_r>
 800692a:	1c43      	adds	r3, r0, #1
 800692c:	9a01      	ldr	r2, [sp, #4]
 800692e:	4b29      	ldr	r3, [pc, #164]	; (80069d4 <_malloc_r+0x474>)
 8006930:	d107      	bne.n	8006942 <_malloc_r+0x3e2>
 8006932:	f1bb 0f00 	cmp.w	fp, #0
 8006936:	d023      	beq.n	8006980 <_malloc_r+0x420>
 8006938:	f04f 0800 	mov.w	r8, #0
 800693c:	f1ab 0008 	sub.w	r0, fp, #8
 8006940:	4410      	add	r0, r2
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	1b00      	subs	r0, r0, r4
 8006946:	4440      	add	r0, r8
 8006948:	4442      	add	r2, r8
 800694a:	f040 0001 	orr.w	r0, r0, #1
 800694e:	45b2      	cmp	sl, r6
 8006950:	60b4      	str	r4, [r6, #8]
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	6060      	str	r0, [r4, #4]
 8006956:	f43f af27 	beq.w	80067a8 <_malloc_r+0x248>
 800695a:	f1b9 0f0f 	cmp.w	r9, #15
 800695e:	d812      	bhi.n	8006986 <_malloc_r+0x426>
 8006960:	2301      	movs	r3, #1
 8006962:	6063      	str	r3, [r4, #4]
 8006964:	68b3      	ldr	r3, [r6, #8]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f023 0303 	bic.w	r3, r3, #3
 800696c:	42bb      	cmp	r3, r7
 800696e:	eba3 0207 	sub.w	r2, r3, r7
 8006972:	d301      	bcc.n	8006978 <_malloc_r+0x418>
 8006974:	2a0f      	cmp	r2, #15
 8006976:	dc22      	bgt.n	80069be <_malloc_r+0x45e>
 8006978:	4628      	mov	r0, r5
 800697a:	f000 f849 	bl	8006a10 <__malloc_unlock>
 800697e:	e5fb      	b.n	8006578 <_malloc_r+0x18>
 8006980:	4610      	mov	r0, r2
 8006982:	46d8      	mov	r8, fp
 8006984:	e7dd      	b.n	8006942 <_malloc_r+0x3e2>
 8006986:	2105      	movs	r1, #5
 8006988:	f8da 2004 	ldr.w	r2, [sl, #4]
 800698c:	f1a9 090c 	sub.w	r9, r9, #12
 8006990:	f029 0907 	bic.w	r9, r9, #7
 8006994:	f002 0201 	and.w	r2, r2, #1
 8006998:	ea42 0209 	orr.w	r2, r2, r9
 800699c:	f8ca 2004 	str.w	r2, [sl, #4]
 80069a0:	f1b9 0f0f 	cmp.w	r9, #15
 80069a4:	eb0a 0209 	add.w	r2, sl, r9
 80069a8:	e9c2 1101 	strd	r1, r1, [r2, #4]
 80069ac:	f67f aefc 	bls.w	80067a8 <_malloc_r+0x248>
 80069b0:	4628      	mov	r0, r5
 80069b2:	f10a 0108 	add.w	r1, sl, #8
 80069b6:	f000 f8c7 	bl	8006b48 <_free_r>
 80069ba:	4b06      	ldr	r3, [pc, #24]	; (80069d4 <_malloc_r+0x474>)
 80069bc:	e6f4      	b.n	80067a8 <_malloc_r+0x248>
 80069be:	68b4      	ldr	r4, [r6, #8]
 80069c0:	f047 0301 	orr.w	r3, r7, #1
 80069c4:	f042 0201 	orr.w	r2, r2, #1
 80069c8:	4427      	add	r7, r4
 80069ca:	6063      	str	r3, [r4, #4]
 80069cc:	60b7      	str	r7, [r6, #8]
 80069ce:	607a      	str	r2, [r7, #4]
 80069d0:	e5f7      	b.n	80065c2 <_malloc_r+0x62>
 80069d2:	bf00      	nop
 80069d4:	20000f44 	.word	0x20000f44

080069d8 <memcpy>:
 80069d8:	440a      	add	r2, r1
 80069da:	4291      	cmp	r1, r2
 80069dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80069e0:	d100      	bne.n	80069e4 <memcpy+0xc>
 80069e2:	4770      	bx	lr
 80069e4:	b510      	push	{r4, lr}
 80069e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069ea:	4291      	cmp	r1, r2
 80069ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069f0:	d1f9      	bne.n	80069e6 <memcpy+0xe>
 80069f2:	bd10      	pop	{r4, pc}

080069f4 <memset>:
 80069f4:	4603      	mov	r3, r0
 80069f6:	4402      	add	r2, r0
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d100      	bne.n	80069fe <memset+0xa>
 80069fc:	4770      	bx	lr
 80069fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006a02:	e7f9      	b.n	80069f8 <memset+0x4>

08006a04 <__malloc_lock>:
 8006a04:	4801      	ldr	r0, [pc, #4]	; (8006a0c <__malloc_lock+0x8>)
 8006a06:	f000 b95f 	b.w	8006cc8 <__retarget_lock_acquire_recursive>
 8006a0a:	bf00      	nop
 8006a0c:	20000f79 	.word	0x20000f79

08006a10 <__malloc_unlock>:
 8006a10:	4801      	ldr	r0, [pc, #4]	; (8006a18 <__malloc_unlock+0x8>)
 8006a12:	f000 b95a 	b.w	8006cca <__retarget_lock_release_recursive>
 8006a16:	bf00      	nop
 8006a18:	20000f79 	.word	0x20000f79

08006a1c <_sbrk_r>:
 8006a1c:	b538      	push	{r3, r4, r5, lr}
 8006a1e:	2300      	movs	r3, #0
 8006a20:	4d05      	ldr	r5, [pc, #20]	; (8006a38 <_sbrk_r+0x1c>)
 8006a22:	4604      	mov	r4, r0
 8006a24:	4608      	mov	r0, r1
 8006a26:	602b      	str	r3, [r5, #0]
 8006a28:	f7ff fce2 	bl	80063f0 <_sbrk>
 8006a2c:	1c43      	adds	r3, r0, #1
 8006a2e:	d102      	bne.n	8006a36 <_sbrk_r+0x1a>
 8006a30:	682b      	ldr	r3, [r5, #0]
 8006a32:	b103      	cbz	r3, 8006a36 <_sbrk_r+0x1a>
 8006a34:	6023      	str	r3, [r4, #0]
 8006a36:	bd38      	pop	{r3, r4, r5, pc}
 8006a38:	20000f7c 	.word	0x20000f7c

08006a3c <sysconf>:
 8006a3c:	2808      	cmp	r0, #8
 8006a3e:	b508      	push	{r3, lr}
 8006a40:	d006      	beq.n	8006a50 <sysconf+0x14>
 8006a42:	f7ff fd5b 	bl	80064fc <__errno>
 8006a46:	2316      	movs	r3, #22
 8006a48:	6003      	str	r3, [r0, #0]
 8006a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a4e:	bd08      	pop	{r3, pc}
 8006a50:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006a54:	e7fb      	b.n	8006a4e <sysconf+0x12>
	...

08006a58 <register_fini>:
 8006a58:	4b02      	ldr	r3, [pc, #8]	; (8006a64 <register_fini+0xc>)
 8006a5a:	b113      	cbz	r3, 8006a62 <register_fini+0xa>
 8006a5c:	4802      	ldr	r0, [pc, #8]	; (8006a68 <register_fini+0x10>)
 8006a5e:	f000 b805 	b.w	8006a6c <atexit>
 8006a62:	4770      	bx	lr
 8006a64:	00000000 	.word	0x00000000
 8006a68:	08006a79 	.word	0x08006a79

08006a6c <atexit>:
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	4601      	mov	r1, r0
 8006a70:	461a      	mov	r2, r3
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 b92a 	b.w	8006ccc <__register_exitproc>

08006a78 <__libc_fini_array>:
 8006a78:	b538      	push	{r3, r4, r5, lr}
 8006a7a:	4d07      	ldr	r5, [pc, #28]	; (8006a98 <__libc_fini_array+0x20>)
 8006a7c:	4c07      	ldr	r4, [pc, #28]	; (8006a9c <__libc_fini_array+0x24>)
 8006a7e:	1b64      	subs	r4, r4, r5
 8006a80:	10a4      	asrs	r4, r4, #2
 8006a82:	b91c      	cbnz	r4, 8006a8c <__libc_fini_array+0x14>
 8006a84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a88:	f000 b968 	b.w	8006d5c <_fini>
 8006a8c:	3c01      	subs	r4, #1
 8006a8e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8006a92:	4798      	blx	r3
 8006a94:	e7f5      	b.n	8006a82 <__libc_fini_array+0xa>
 8006a96:	bf00      	nop
 8006a98:	08007c34 	.word	0x08007c34
 8006a9c:	08007c38 	.word	0x08007c38

08006aa0 <_malloc_trim_r>:
 8006aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa4:	4606      	mov	r6, r0
 8006aa6:	2008      	movs	r0, #8
 8006aa8:	460c      	mov	r4, r1
 8006aaa:	f7ff ffc7 	bl	8006a3c <sysconf>
 8006aae:	4680      	mov	r8, r0
 8006ab0:	4f22      	ldr	r7, [pc, #136]	; (8006b3c <_malloc_trim_r+0x9c>)
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	f7ff ffa6 	bl	8006a04 <__malloc_lock>
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	685d      	ldr	r5, [r3, #4]
 8006abc:	f025 0503 	bic.w	r5, r5, #3
 8006ac0:	1b2c      	subs	r4, r5, r4
 8006ac2:	3c11      	subs	r4, #17
 8006ac4:	4444      	add	r4, r8
 8006ac6:	fbb4 f4f8 	udiv	r4, r4, r8
 8006aca:	3c01      	subs	r4, #1
 8006acc:	fb08 f404 	mul.w	r4, r8, r4
 8006ad0:	45a0      	cmp	r8, r4
 8006ad2:	dd05      	ble.n	8006ae0 <_malloc_trim_r+0x40>
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	f7ff ff9b 	bl	8006a10 <__malloc_unlock>
 8006ada:	2000      	movs	r0, #0
 8006adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	f7ff ff9a 	bl	8006a1c <_sbrk_r>
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	442b      	add	r3, r5
 8006aec:	4298      	cmp	r0, r3
 8006aee:	d1f1      	bne.n	8006ad4 <_malloc_trim_r+0x34>
 8006af0:	4630      	mov	r0, r6
 8006af2:	4261      	negs	r1, r4
 8006af4:	f7ff ff92 	bl	8006a1c <_sbrk_r>
 8006af8:	3001      	adds	r0, #1
 8006afa:	d110      	bne.n	8006b1e <_malloc_trim_r+0x7e>
 8006afc:	2100      	movs	r1, #0
 8006afe:	4630      	mov	r0, r6
 8006b00:	f7ff ff8c 	bl	8006a1c <_sbrk_r>
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	1a83      	subs	r3, r0, r2
 8006b08:	2b0f      	cmp	r3, #15
 8006b0a:	dde3      	ble.n	8006ad4 <_malloc_trim_r+0x34>
 8006b0c:	490c      	ldr	r1, [pc, #48]	; (8006b40 <_malloc_trim_r+0xa0>)
 8006b0e:	f043 0301 	orr.w	r3, r3, #1
 8006b12:	6809      	ldr	r1, [r1, #0]
 8006b14:	6053      	str	r3, [r2, #4]
 8006b16:	1a40      	subs	r0, r0, r1
 8006b18:	490a      	ldr	r1, [pc, #40]	; (8006b44 <_malloc_trim_r+0xa4>)
 8006b1a:	6008      	str	r0, [r1, #0]
 8006b1c:	e7da      	b.n	8006ad4 <_malloc_trim_r+0x34>
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	4a08      	ldr	r2, [pc, #32]	; (8006b44 <_malloc_trim_r+0xa4>)
 8006b22:	1b2d      	subs	r5, r5, r4
 8006b24:	f045 0501 	orr.w	r5, r5, #1
 8006b28:	605d      	str	r5, [r3, #4]
 8006b2a:	6813      	ldr	r3, [r2, #0]
 8006b2c:	4630      	mov	r0, r6
 8006b2e:	1b1b      	subs	r3, r3, r4
 8006b30:	6013      	str	r3, [r2, #0]
 8006b32:	f7ff ff6d 	bl	8006a10 <__malloc_unlock>
 8006b36:	2001      	movs	r0, #1
 8006b38:	e7d0      	b.n	8006adc <_malloc_trim_r+0x3c>
 8006b3a:	bf00      	nop
 8006b3c:	20000790 	.word	0x20000790
 8006b40:	20000b98 	.word	0x20000b98
 8006b44:	20000f44 	.word	0x20000f44

08006b48 <_free_r>:
 8006b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b4a:	4605      	mov	r5, r0
 8006b4c:	460f      	mov	r7, r1
 8006b4e:	2900      	cmp	r1, #0
 8006b50:	f000 80b1 	beq.w	8006cb6 <_free_r+0x16e>
 8006b54:	f7ff ff56 	bl	8006a04 <__malloc_lock>
 8006b58:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006b5c:	4856      	ldr	r0, [pc, #344]	; (8006cb8 <_free_r+0x170>)
 8006b5e:	f022 0401 	bic.w	r4, r2, #1
 8006b62:	f1a7 0308 	sub.w	r3, r7, #8
 8006b66:	eb03 0c04 	add.w	ip, r3, r4
 8006b6a:	6881      	ldr	r1, [r0, #8]
 8006b6c:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8006b70:	4561      	cmp	r1, ip
 8006b72:	f026 0603 	bic.w	r6, r6, #3
 8006b76:	f002 0201 	and.w	r2, r2, #1
 8006b7a:	d11b      	bne.n	8006bb4 <_free_r+0x6c>
 8006b7c:	4434      	add	r4, r6
 8006b7e:	b93a      	cbnz	r2, 8006b90 <_free_r+0x48>
 8006b80:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8006b84:	1a9b      	subs	r3, r3, r2
 8006b86:	4414      	add	r4, r2
 8006b88:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8006b8c:	60ca      	str	r2, [r1, #12]
 8006b8e:	6091      	str	r1, [r2, #8]
 8006b90:	f044 0201 	orr.w	r2, r4, #1
 8006b94:	605a      	str	r2, [r3, #4]
 8006b96:	6083      	str	r3, [r0, #8]
 8006b98:	4b48      	ldr	r3, [pc, #288]	; (8006cbc <_free_r+0x174>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	42a3      	cmp	r3, r4
 8006b9e:	d804      	bhi.n	8006baa <_free_r+0x62>
 8006ba0:	4b47      	ldr	r3, [pc, #284]	; (8006cc0 <_free_r+0x178>)
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	6819      	ldr	r1, [r3, #0]
 8006ba6:	f7ff ff7b 	bl	8006aa0 <_malloc_trim_r>
 8006baa:	4628      	mov	r0, r5
 8006bac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006bb0:	f7ff bf2e 	b.w	8006a10 <__malloc_unlock>
 8006bb4:	f8cc 6004 	str.w	r6, [ip, #4]
 8006bb8:	2a00      	cmp	r2, #0
 8006bba:	d138      	bne.n	8006c2e <_free_r+0xe6>
 8006bbc:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8006bc0:	f100 0708 	add.w	r7, r0, #8
 8006bc4:	1a5b      	subs	r3, r3, r1
 8006bc6:	440c      	add	r4, r1
 8006bc8:	6899      	ldr	r1, [r3, #8]
 8006bca:	42b9      	cmp	r1, r7
 8006bcc:	d031      	beq.n	8006c32 <_free_r+0xea>
 8006bce:	68df      	ldr	r7, [r3, #12]
 8006bd0:	60cf      	str	r7, [r1, #12]
 8006bd2:	60b9      	str	r1, [r7, #8]
 8006bd4:	eb0c 0106 	add.w	r1, ip, r6
 8006bd8:	6849      	ldr	r1, [r1, #4]
 8006bda:	07c9      	lsls	r1, r1, #31
 8006bdc:	d40b      	bmi.n	8006bf6 <_free_r+0xae>
 8006bde:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8006be2:	4434      	add	r4, r6
 8006be4:	bb3a      	cbnz	r2, 8006c36 <_free_r+0xee>
 8006be6:	4e37      	ldr	r6, [pc, #220]	; (8006cc4 <_free_r+0x17c>)
 8006be8:	42b1      	cmp	r1, r6
 8006bea:	d124      	bne.n	8006c36 <_free_r+0xee>
 8006bec:	2201      	movs	r2, #1
 8006bee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bf2:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8006bf6:	f044 0101 	orr.w	r1, r4, #1
 8006bfa:	6059      	str	r1, [r3, #4]
 8006bfc:	511c      	str	r4, [r3, r4]
 8006bfe:	2a00      	cmp	r2, #0
 8006c00:	d1d3      	bne.n	8006baa <_free_r+0x62>
 8006c02:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8006c06:	d21b      	bcs.n	8006c40 <_free_r+0xf8>
 8006c08:	0961      	lsrs	r1, r4, #5
 8006c0a:	08e2      	lsrs	r2, r4, #3
 8006c0c:	2401      	movs	r4, #1
 8006c0e:	408c      	lsls	r4, r1
 8006c10:	6841      	ldr	r1, [r0, #4]
 8006c12:	3201      	adds	r2, #1
 8006c14:	430c      	orrs	r4, r1
 8006c16:	6044      	str	r4, [r0, #4]
 8006c18:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8006c1c:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8006c20:	3908      	subs	r1, #8
 8006c22:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8006c26:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 8006c2a:	60e3      	str	r3, [r4, #12]
 8006c2c:	e7bd      	b.n	8006baa <_free_r+0x62>
 8006c2e:	2200      	movs	r2, #0
 8006c30:	e7d0      	b.n	8006bd4 <_free_r+0x8c>
 8006c32:	2201      	movs	r2, #1
 8006c34:	e7ce      	b.n	8006bd4 <_free_r+0x8c>
 8006c36:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8006c3a:	60ce      	str	r6, [r1, #12]
 8006c3c:	60b1      	str	r1, [r6, #8]
 8006c3e:	e7da      	b.n	8006bf6 <_free_r+0xae>
 8006c40:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8006c44:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8006c48:	d214      	bcs.n	8006c74 <_free_r+0x12c>
 8006c4a:	09a2      	lsrs	r2, r4, #6
 8006c4c:	3238      	adds	r2, #56	; 0x38
 8006c4e:	1c51      	adds	r1, r2, #1
 8006c50:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8006c54:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8006c58:	428e      	cmp	r6, r1
 8006c5a:	d125      	bne.n	8006ca8 <_free_r+0x160>
 8006c5c:	2401      	movs	r4, #1
 8006c5e:	1092      	asrs	r2, r2, #2
 8006c60:	fa04 f202 	lsl.w	r2, r4, r2
 8006c64:	6844      	ldr	r4, [r0, #4]
 8006c66:	4322      	orrs	r2, r4
 8006c68:	6042      	str	r2, [r0, #4]
 8006c6a:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8006c6e:	60b3      	str	r3, [r6, #8]
 8006c70:	60cb      	str	r3, [r1, #12]
 8006c72:	e79a      	b.n	8006baa <_free_r+0x62>
 8006c74:	2a14      	cmp	r2, #20
 8006c76:	d801      	bhi.n	8006c7c <_free_r+0x134>
 8006c78:	325b      	adds	r2, #91	; 0x5b
 8006c7a:	e7e8      	b.n	8006c4e <_free_r+0x106>
 8006c7c:	2a54      	cmp	r2, #84	; 0x54
 8006c7e:	d802      	bhi.n	8006c86 <_free_r+0x13e>
 8006c80:	0b22      	lsrs	r2, r4, #12
 8006c82:	326e      	adds	r2, #110	; 0x6e
 8006c84:	e7e3      	b.n	8006c4e <_free_r+0x106>
 8006c86:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006c8a:	d802      	bhi.n	8006c92 <_free_r+0x14a>
 8006c8c:	0be2      	lsrs	r2, r4, #15
 8006c8e:	3277      	adds	r2, #119	; 0x77
 8006c90:	e7dd      	b.n	8006c4e <_free_r+0x106>
 8006c92:	f240 5154 	movw	r1, #1364	; 0x554
 8006c96:	428a      	cmp	r2, r1
 8006c98:	bf96      	itet	ls
 8006c9a:	0ca2      	lsrls	r2, r4, #18
 8006c9c:	227e      	movhi	r2, #126	; 0x7e
 8006c9e:	327c      	addls	r2, #124	; 0x7c
 8006ca0:	e7d5      	b.n	8006c4e <_free_r+0x106>
 8006ca2:	6889      	ldr	r1, [r1, #8]
 8006ca4:	428e      	cmp	r6, r1
 8006ca6:	d004      	beq.n	8006cb2 <_free_r+0x16a>
 8006ca8:	684a      	ldr	r2, [r1, #4]
 8006caa:	f022 0203 	bic.w	r2, r2, #3
 8006cae:	42a2      	cmp	r2, r4
 8006cb0:	d8f7      	bhi.n	8006ca2 <_free_r+0x15a>
 8006cb2:	68ce      	ldr	r6, [r1, #12]
 8006cb4:	e7d9      	b.n	8006c6a <_free_r+0x122>
 8006cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cb8:	20000790 	.word	0x20000790
 8006cbc:	20000b9c 	.word	0x20000b9c
 8006cc0:	20000f74 	.word	0x20000f74
 8006cc4:	20000798 	.word	0x20000798

08006cc8 <__retarget_lock_acquire_recursive>:
 8006cc8:	4770      	bx	lr

08006cca <__retarget_lock_release_recursive>:
 8006cca:	4770      	bx	lr

08006ccc <__register_exitproc>:
 8006ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8006d48 <__register_exitproc+0x7c>
 8006cd4:	4606      	mov	r6, r0
 8006cd6:	f8da 0000 	ldr.w	r0, [sl]
 8006cda:	4698      	mov	r8, r3
 8006cdc:	460f      	mov	r7, r1
 8006cde:	4691      	mov	r9, r2
 8006ce0:	f7ff fff2 	bl	8006cc8 <__retarget_lock_acquire_recursive>
 8006ce4:	4b19      	ldr	r3, [pc, #100]	; (8006d4c <__register_exitproc+0x80>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8006cec:	b91c      	cbnz	r4, 8006cf6 <__register_exitproc+0x2a>
 8006cee:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8006cf2:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8006cf6:	6865      	ldr	r5, [r4, #4]
 8006cf8:	f8da 0000 	ldr.w	r0, [sl]
 8006cfc:	2d1f      	cmp	r5, #31
 8006cfe:	dd05      	ble.n	8006d0c <__register_exitproc+0x40>
 8006d00:	f7ff ffe3 	bl	8006cca <__retarget_lock_release_recursive>
 8006d04:	f04f 30ff 	mov.w	r0, #4294967295
 8006d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d0c:	b19e      	cbz	r6, 8006d36 <__register_exitproc+0x6a>
 8006d0e:	2201      	movs	r2, #1
 8006d10:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8006d14:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8006d18:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8006d1c:	40aa      	lsls	r2, r5
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8006d24:	2e02      	cmp	r6, #2
 8006d26:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8006d2a:	bf02      	ittt	eq
 8006d2c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8006d30:	4313      	orreq	r3, r2
 8006d32:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 8006d36:	1c6b      	adds	r3, r5, #1
 8006d38:	3502      	adds	r5, #2
 8006d3a:	6063      	str	r3, [r4, #4]
 8006d3c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8006d40:	f7ff ffc3 	bl	8006cca <__retarget_lock_release_recursive>
 8006d44:	2000      	movs	r0, #0
 8006d46:	e7df      	b.n	8006d08 <__register_exitproc+0x3c>
 8006d48:	20000ba0 	.word	0x20000ba0
 8006d4c:	08007c28 	.word	0x08007c28

08006d50 <_init>:
 8006d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d52:	bf00      	nop
 8006d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d56:	bc08      	pop	{r3}
 8006d58:	469e      	mov	lr, r3
 8006d5a:	4770      	bx	lr

08006d5c <_fini>:
 8006d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5e:	bf00      	nop
 8006d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d62:	bc08      	pop	{r3}
 8006d64:	469e      	mov	lr, r3
 8006d66:	4770      	bx	lr
